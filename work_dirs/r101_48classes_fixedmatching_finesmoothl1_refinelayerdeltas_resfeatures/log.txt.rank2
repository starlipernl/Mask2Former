[02/25 17:19:11] detectron2 INFO: Rank of current process: 2. World size: 4
[02/25 17:19:17] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/home/nstarli/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.5
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             Tesla V100-SXM2-32GB (arch=7.0)
Driver version          495.29.05
CUDA_HOME               /usr/local/cuda-11
Pillow                  8.4.0
torchvision             0.10.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.4
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[02/25 17:19:17] detectron2 INFO: Command line arguments: Namespace(config_file='configs/sceneflow/semantic-segmentation/maskformer2stereo_R50_bs16_90k.yaml', dist_url='tcp://127.0.0.1:65530', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[02/25 17:19:17] detectron2 INFO: Contents of args.config_file=configs/sceneflow/semantic-segmentation/maskformer2stereo_R50_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBase-SceneFlow-SemanticSegmentationStereo.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMaskFormerStereo[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMaskFormerHead[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m48[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mMASK_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mGN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;242m# pixel decoder[39m
[38;5;15m    [39m[38;5;197mPIXEL_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMSDeformAttnPixelDecoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mDEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mTRANSFORMER_ENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m  [39m[38;5;197mMASK_FORMER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mTRANSFORMER_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMultiScaleMaskedTransformerDecoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mTRANSFORMER_IN_FEATURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmulti_scale_pixel_decoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mDEEP_SUPERVISION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m    [39m[38;5;197mNO_OBJECT_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mCLASS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mMASK_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;197mDICE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mSEG_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mHIDDEN_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNUM_OBJECT_QUERIES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m48[39m
[38;5;15m    [39m[38;5;197mNHEADS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;197mDROPOUT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mDIM_FEEDFORWARD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;197mENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPRE_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mENFORCE_INPUT_PROJ[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mDEC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 9 decoder layers, add one for the loss on learnable query[39m
[38;5;15m    [39m[38;5;197mTRAIN_NUM_POINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12544[39m
[38;5;15m    [39m[38;5;197mOVERSAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3.0[39m
[38;5;15m    [39m[38;5;197mIMPORTANCE_SAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.75[39m
[38;5;15m    [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mSEMANTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m      [39m[38;5;197mINSTANCE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m      [39m[38;5;197mPANOPTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m      [39m[38;5;197mOVERLAP_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.8[39m
[38;5;15m      [39m[38;5;197mOBJECT_MASK_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.8[39m

[02/25 17:19:17] detectron2.utils.env INFO: Using a generated random seed 17352052
[02/25 17:19:19] detectron2.engine.defaults INFO: Model:
MaskFormerStereo(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(4096, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(48, 256)
      (query_embed): Embedding(48, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=49, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (refinement_layer): DispRefineLayer(
    (conv2d_feature): Conv2d(
      257, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
      (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
    )
    (residual_atrous_blocks): ModuleList(
      (0): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same, dilation=(2, 2)
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (2): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same, dilation=(4, 4)
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (3): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same, dilation=(8, 8)
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (4): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (5): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
    )
    (conv2d_out): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (criterion): Criterion SetCriterionStereo
      matcher: Matcher FixedMatcher
      losses: ['labels', 'masks', 'segs']
      weight_dict: {'loss_mask': 5.0, 'loss_ce': 0.0, 'loss_dice': 1.0, 'loss_seg': 0.1, 'loss_mask_0': 5.0, 'loss_ce_0': 0.0, 'loss_dice_0': 1.0, 'loss_mask_1': 5.0, 'loss_ce_1': 0.0, 'loss_dice_1': 1.0, 'loss_mask_2': 5.0, 'loss_ce_2': 0.0, 'loss_dice_2': 1.0}
      num_classes: 48
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
)
[02/25 17:19:19] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in training: [RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[256, 512], single_category_max_area=1.0, ignored_category=0)]
[02/25 17:19:25] detectron2.data.build INFO: Using training sampler TrainingSampler
[02/25 17:19:25] detectron2.data.common INFO: Serializing 35454 elements to byte tensors and concatenating them all ...
[02/25 17:19:25] detectron2.data.common INFO: Serialized dataset takes 10.76 MiB
[02/25 17:19:25] fvcore.common.checkpoint INFO: [Checkpointer] Loading from detectron2://ImageNetPretrained/torchvision/R-50.pkl ...
[02/25 17:19:25] fvcore.common.checkpoint INFO: Reading a file from 'torchvision'
[02/25 17:19:25] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint                                                               | Shapes                                          |
|:------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.*      | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
[02/25 17:19:26] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34mrefinement_layer.conv2d_feature.norm.{bias, weight}[0m
[34mrefinement_layer.conv2d_feature.{bias, weight}[0m
[34mrefinement_layer.conv2d_out.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.0.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.0.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.1.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.1.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.2.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.2.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.3.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.3.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.4.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.4.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.5.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.5.conv1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[02/25 17:19:26] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[02/25 17:19:26] detectron2.engine.train_loop INFO: Starting training from iteration 0
[02/25 17:19:37] detectron2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/home/nstarli/detectron2/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/home/nstarli/detectron2/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/home/nstarli/detectron2/detectron2/engine/train_loop.py", line 395, in run_step
    loss_dict = self.model(data)
  File "/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 799, in forward
    output = self.module(*inputs[0], **kwargs[0])
  File "/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/nstarli/Mask2Former/mask2former/maskformer_model_stereo.py", line 754, in forward
    outputs['pred_seg'] = self.refinement_layer(features['res2'], outputs['pred_seg'])
  File "/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/nstarli/Mask2Former/mask2former/maskformer_model_stereo.py", line 518, in forward
    output = self.conv2d_feature(
  File "/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/nstarli/detectron2/detectron2/layers/wrappers.py", line 106, in forward
    x = F.conv2d(
RuntimeError: Given groups=1, weight of size [256, 257, 3, 3], expected input[4, 513, 64, 128] to have 257 channels, but got 513 channels instead
[02/25 17:19:37] detectron2.engine.hooks INFO: Total training time: 0:00:11 (0:00:00 on hooks)
[02/25 17:21:20] detectron2 INFO: Rank of current process: 2. World size: 4
[02/25 17:21:25] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/home/nstarli/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.5
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             Tesla V100-SXM2-32GB (arch=7.0)
Driver version          495.29.05
CUDA_HOME               /usr/local/cuda-11
Pillow                  8.4.0
torchvision             0.10.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.4
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[02/25 17:21:25] detectron2 INFO: Command line arguments: Namespace(config_file='configs/sceneflow/semantic-segmentation/maskformer2stereo_R50_bs16_90k.yaml', dist_url='tcp://127.0.0.1:65530', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[02/25 17:21:25] detectron2 INFO: Contents of args.config_file=configs/sceneflow/semantic-segmentation/maskformer2stereo_R50_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBase-SceneFlow-SemanticSegmentationStereo.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMaskFormerStereo[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMaskFormerHead[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m48[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mMASK_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mGN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;242m# pixel decoder[39m
[38;5;15m    [39m[38;5;197mPIXEL_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMSDeformAttnPixelDecoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mDEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mTRANSFORMER_ENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m  [39m[38;5;197mMASK_FORMER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mTRANSFORMER_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMultiScaleMaskedTransformerDecoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mTRANSFORMER_IN_FEATURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmulti_scale_pixel_decoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mDEEP_SUPERVISION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m    [39m[38;5;197mNO_OBJECT_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mCLASS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mMASK_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;197mDICE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mSEG_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mHIDDEN_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNUM_OBJECT_QUERIES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m48[39m
[38;5;15m    [39m[38;5;197mNHEADS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;197mDROPOUT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mDIM_FEEDFORWARD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;197mENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPRE_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mENFORCE_INPUT_PROJ[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mDEC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 9 decoder layers, add one for the loss on learnable query[39m
[38;5;15m    [39m[38;5;197mTRAIN_NUM_POINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12544[39m
[38;5;15m    [39m[38;5;197mOVERSAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3.0[39m
[38;5;15m    [39m[38;5;197mIMPORTANCE_SAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.75[39m
[38;5;15m    [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mSEMANTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m      [39m[38;5;197mINSTANCE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m      [39m[38;5;197mPANOPTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m      [39m[38;5;197mOVERLAP_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.8[39m
[38;5;15m      [39m[38;5;197mOBJECT_MASK_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.8[39m

[02/25 17:21:25] detectron2.utils.env INFO: Using a generated random seed 25542364
[02/25 17:21:28] detectron2.engine.defaults INFO: Model:
MaskFormerStereo(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(4096, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(48, 256)
      (query_embed): Embedding(48, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=49, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (refinement_layer): DispRefineLayer(
    (conv2d_feature): Conv2d(
      513, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
      (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
    )
    (residual_atrous_blocks): ModuleList(
      (0): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same, dilation=(2, 2)
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (2): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same, dilation=(4, 4)
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (3): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same, dilation=(8, 8)
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (4): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (5): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
    )
    (conv2d_out): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (criterion): Criterion SetCriterionStereo
      matcher: Matcher FixedMatcher
      losses: ['labels', 'masks', 'segs']
      weight_dict: {'loss_mask': 5.0, 'loss_ce': 0.0, 'loss_dice': 1.0, 'loss_seg': 0.1, 'loss_mask_0': 5.0, 'loss_ce_0': 0.0, 'loss_dice_0': 1.0, 'loss_mask_1': 5.0, 'loss_ce_1': 0.0, 'loss_dice_1': 1.0, 'loss_mask_2': 5.0, 'loss_ce_2': 0.0, 'loss_dice_2': 1.0}
      num_classes: 48
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
)
[02/25 17:21:28] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in training: [RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[256, 512], single_category_max_area=1.0, ignored_category=0)]
[02/25 17:21:34] detectron2.data.build INFO: Using training sampler TrainingSampler
[02/25 17:21:34] detectron2.data.common INFO: Serializing 35454 elements to byte tensors and concatenating them all ...
[02/25 17:21:34] detectron2.data.common INFO: Serialized dataset takes 10.76 MiB
[02/25 17:21:34] fvcore.common.checkpoint INFO: [Checkpointer] Loading from detectron2://ImageNetPretrained/torchvision/R-50.pkl ...
[02/25 17:21:34] fvcore.common.checkpoint INFO: Reading a file from 'torchvision'
[02/25 17:21:34] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint                                                               | Shapes                                          |
|:------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.*      | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
[02/25 17:21:35] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34mrefinement_layer.conv2d_feature.norm.{bias, weight}[0m
[34mrefinement_layer.conv2d_feature.{bias, weight}[0m
[34mrefinement_layer.conv2d_out.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.0.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.0.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.1.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.1.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.2.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.2.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.3.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.3.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.4.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.4.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.5.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.5.conv1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[02/25 17:21:35] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[02/25 17:21:35] detectron2.engine.train_loop INFO: Starting training from iteration 0
[02/25 18:10:06] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/25 18:10:07] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/25 18:10:07] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/25 18:10:22] mask2former INFO: Inference done 11/1092. Dataloading: 0.0058 s/iter. Inference: 0.2146 s/iter. Eval: 0.2034 s/iter. Total: 0.4237 s/iter. ETA=0:07:38
[02/25 18:10:27] mask2former INFO: Inference done 24/1092. Dataloading: 0.0087 s/iter. Inference: 0.2243 s/iter. Eval: 0.1652 s/iter. Total: 0.3983 s/iter. ETA=0:07:05
[02/25 18:10:32] mask2former INFO: Inference done 37/1092. Dataloading: 0.0081 s/iter. Inference: 0.2182 s/iter. Eval: 0.1743 s/iter. Total: 0.4007 s/iter. ETA=0:07:02
[02/25 18:10:38] mask2former INFO: Inference done 50/1092. Dataloading: 0.0083 s/iter. Inference: 0.2183 s/iter. Eval: 0.1755 s/iter. Total: 0.4022 s/iter. ETA=0:06:59
[02/25 18:10:43] mask2former INFO: Inference done 64/1092. Dataloading: 0.0077 s/iter. Inference: 0.2212 s/iter. Eval: 0.1681 s/iter. Total: 0.3971 s/iter. ETA=0:06:48
[02/25 18:10:48] mask2former INFO: Inference done 78/1092. Dataloading: 0.0075 s/iter. Inference: 0.2180 s/iter. Eval: 0.1659 s/iter. Total: 0.3915 s/iter. ETA=0:06:36
[02/25 18:10:53] mask2former INFO: Inference done 92/1092. Dataloading: 0.0073 s/iter. Inference: 0.2187 s/iter. Eval: 0.1630 s/iter. Total: 0.3891 s/iter. ETA=0:06:29
[02/25 18:10:58] mask2former INFO: Inference done 105/1092. Dataloading: 0.0073 s/iter. Inference: 0.2203 s/iter. Eval: 0.1611 s/iter. Total: 0.3888 s/iter. ETA=0:06:23
[02/25 18:11:04] mask2former INFO: Inference done 118/1092. Dataloading: 0.0074 s/iter. Inference: 0.2218 s/iter. Eval: 0.1621 s/iter. Total: 0.3914 s/iter. ETA=0:06:21
[02/25 18:11:09] mask2former INFO: Inference done 131/1092. Dataloading: 0.0077 s/iter. Inference: 0.2212 s/iter. Eval: 0.1635 s/iter. Total: 0.3925 s/iter. ETA=0:06:17
[02/25 18:11:14] mask2former INFO: Inference done 144/1092. Dataloading: 0.0081 s/iter. Inference: 0.2209 s/iter. Eval: 0.1648 s/iter. Total: 0.3940 s/iter. ETA=0:06:13
[02/25 18:11:20] mask2former INFO: Inference done 158/1092. Dataloading: 0.0082 s/iter. Inference: 0.2215 s/iter. Eval: 0.1629 s/iter. Total: 0.3927 s/iter. ETA=0:06:06
[02/25 18:11:25] mask2former INFO: Inference done 172/1092. Dataloading: 0.0081 s/iter. Inference: 0.2211 s/iter. Eval: 0.1618 s/iter. Total: 0.3911 s/iter. ETA=0:05:59
[02/25 18:11:30] mask2former INFO: Inference done 185/1092. Dataloading: 0.0082 s/iter. Inference: 0.2208 s/iter. Eval: 0.1630 s/iter. Total: 0.3922 s/iter. ETA=0:05:55
[02/25 18:11:35] mask2former INFO: Inference done 197/1092. Dataloading: 0.0082 s/iter. Inference: 0.2223 s/iter. Eval: 0.1636 s/iter. Total: 0.3942 s/iter. ETA=0:05:52
[02/25 18:11:40] mask2former INFO: Inference done 210/1092. Dataloading: 0.0081 s/iter. Inference: 0.2228 s/iter. Eval: 0.1641 s/iter. Total: 0.3952 s/iter. ETA=0:05:48
[02/25 18:11:46] mask2former INFO: Inference done 223/1092. Dataloading: 0.0082 s/iter. Inference: 0.2219 s/iter. Eval: 0.1660 s/iter. Total: 0.3963 s/iter. ETA=0:05:44
[02/25 18:11:51] mask2former INFO: Inference done 237/1092. Dataloading: 0.0084 s/iter. Inference: 0.2229 s/iter. Eval: 0.1641 s/iter. Total: 0.3956 s/iter. ETA=0:05:38
[02/25 18:11:57] mask2former INFO: Inference done 250/1092. Dataloading: 0.0084 s/iter. Inference: 0.2242 s/iter. Eval: 0.1638 s/iter. Total: 0.3965 s/iter. ETA=0:05:33
[02/25 18:12:02] mask2former INFO: Inference done 263/1092. Dataloading: 0.0083 s/iter. Inference: 0.2242 s/iter. Eval: 0.1648 s/iter. Total: 0.3974 s/iter. ETA=0:05:29
[02/25 18:12:07] mask2former INFO: Inference done 276/1092. Dataloading: 0.0083 s/iter. Inference: 0.2238 s/iter. Eval: 0.1650 s/iter. Total: 0.3973 s/iter. ETA=0:05:24
[02/25 18:12:12] mask2former INFO: Inference done 289/1092. Dataloading: 0.0084 s/iter. Inference: 0.2235 s/iter. Eval: 0.1656 s/iter. Total: 0.3976 s/iter. ETA=0:05:19
[02/25 18:12:17] mask2former INFO: Inference done 301/1092. Dataloading: 0.0083 s/iter. Inference: 0.2239 s/iter. Eval: 0.1663 s/iter. Total: 0.3986 s/iter. ETA=0:05:15
[02/25 18:12:23] mask2former INFO: Inference done 315/1092. Dataloading: 0.0082 s/iter. Inference: 0.2239 s/iter. Eval: 0.1654 s/iter. Total: 0.3977 s/iter. ETA=0:05:09
[02/25 18:12:28] mask2former INFO: Inference done 327/1092. Dataloading: 0.0085 s/iter. Inference: 0.2245 s/iter. Eval: 0.1661 s/iter. Total: 0.3992 s/iter. ETA=0:05:05
[02/25 18:12:33] mask2former INFO: Inference done 339/1092. Dataloading: 0.0086 s/iter. Inference: 0.2252 s/iter. Eval: 0.1660 s/iter. Total: 0.3999 s/iter. ETA=0:05:01
[02/25 18:12:38] mask2former INFO: Inference done 353/1092. Dataloading: 0.0086 s/iter. Inference: 0.2257 s/iter. Eval: 0.1642 s/iter. Total: 0.3987 s/iter. ETA=0:04:54
[02/25 18:12:43] mask2former INFO: Inference done 365/1092. Dataloading: 0.0086 s/iter. Inference: 0.2267 s/iter. Eval: 0.1639 s/iter. Total: 0.3994 s/iter. ETA=0:04:50
[02/25 18:12:49] mask2former INFO: Inference done 378/1092. Dataloading: 0.0086 s/iter. Inference: 0.2272 s/iter. Eval: 0.1640 s/iter. Total: 0.3999 s/iter. ETA=0:04:45
[02/25 18:12:54] mask2former INFO: Inference done 391/1092. Dataloading: 0.0086 s/iter. Inference: 0.2274 s/iter. Eval: 0.1635 s/iter. Total: 0.3996 s/iter. ETA=0:04:40
[02/25 18:12:59] mask2former INFO: Inference done 405/1092. Dataloading: 0.0085 s/iter. Inference: 0.2268 s/iter. Eval: 0.1630 s/iter. Total: 0.3984 s/iter. ETA=0:04:33
[02/25 18:13:04] mask2former INFO: Inference done 417/1092. Dataloading: 0.0085 s/iter. Inference: 0.2262 s/iter. Eval: 0.1645 s/iter. Total: 0.3994 s/iter. ETA=0:04:29
[02/25 18:13:09] mask2former INFO: Inference done 429/1092. Dataloading: 0.0085 s/iter. Inference: 0.2275 s/iter. Eval: 0.1642 s/iter. Total: 0.4003 s/iter. ETA=0:04:25
[02/25 18:13:14] mask2former INFO: Inference done 443/1092. Dataloading: 0.0084 s/iter. Inference: 0.2271 s/iter. Eval: 0.1637 s/iter. Total: 0.3995 s/iter. ETA=0:04:19
[02/25 18:13:20] mask2former INFO: Inference done 456/1092. Dataloading: 0.0085 s/iter. Inference: 0.2271 s/iter. Eval: 0.1637 s/iter. Total: 0.3993 s/iter. ETA=0:04:13
[02/25 18:13:25] mask2former INFO: Inference done 469/1092. Dataloading: 0.0085 s/iter. Inference: 0.2270 s/iter. Eval: 0.1641 s/iter. Total: 0.3997 s/iter. ETA=0:04:09
[02/25 18:13:30] mask2former INFO: Inference done 482/1092. Dataloading: 0.0085 s/iter. Inference: 0.2274 s/iter. Eval: 0.1637 s/iter. Total: 0.3997 s/iter. ETA=0:04:03
[02/25 18:13:35] mask2former INFO: Inference done 496/1092. Dataloading: 0.0084 s/iter. Inference: 0.2270 s/iter. Eval: 0.1634 s/iter. Total: 0.3990 s/iter. ETA=0:03:57
[02/25 18:13:41] mask2former INFO: Inference done 509/1092. Dataloading: 0.0084 s/iter. Inference: 0.2271 s/iter. Eval: 0.1637 s/iter. Total: 0.3993 s/iter. ETA=0:03:52
[02/25 18:13:46] mask2former INFO: Inference done 522/1092. Dataloading: 0.0084 s/iter. Inference: 0.2271 s/iter. Eval: 0.1636 s/iter. Total: 0.3992 s/iter. ETA=0:03:47
[02/25 18:13:51] mask2former INFO: Inference done 536/1092. Dataloading: 0.0084 s/iter. Inference: 0.2274 s/iter. Eval: 0.1623 s/iter. Total: 0.3982 s/iter. ETA=0:03:41
[02/25 18:13:56] mask2former INFO: Inference done 549/1092. Dataloading: 0.0084 s/iter. Inference: 0.2275 s/iter. Eval: 0.1625 s/iter. Total: 0.3985 s/iter. ETA=0:03:36
[02/25 18:14:01] mask2former INFO: Inference done 563/1092. Dataloading: 0.0083 s/iter. Inference: 0.2276 s/iter. Eval: 0.1616 s/iter. Total: 0.3976 s/iter. ETA=0:03:30
[02/25 18:14:06] mask2former INFO: Inference done 576/1092. Dataloading: 0.0083 s/iter. Inference: 0.2278 s/iter. Eval: 0.1613 s/iter. Total: 0.3975 s/iter. ETA=0:03:25
[02/25 18:14:12] mask2former INFO: Inference done 589/1092. Dataloading: 0.0083 s/iter. Inference: 0.2280 s/iter. Eval: 0.1612 s/iter. Total: 0.3976 s/iter. ETA=0:03:19
[02/25 18:14:17] mask2former INFO: Inference done 604/1092. Dataloading: 0.0083 s/iter. Inference: 0.2273 s/iter. Eval: 0.1608 s/iter. Total: 0.3965 s/iter. ETA=0:03:13
[02/25 18:14:22] mask2former INFO: Inference done 618/1092. Dataloading: 0.0083 s/iter. Inference: 0.2273 s/iter. Eval: 0.1605 s/iter. Total: 0.3962 s/iter. ETA=0:03:07
[02/25 18:14:27] mask2former INFO: Inference done 633/1092. Dataloading: 0.0083 s/iter. Inference: 0.2272 s/iter. Eval: 0.1593 s/iter. Total: 0.3949 s/iter. ETA=0:03:01
[02/25 18:14:33] mask2former INFO: Inference done 644/1092. Dataloading: 0.0083 s/iter. Inference: 0.2275 s/iter. Eval: 0.1602 s/iter. Total: 0.3962 s/iter. ETA=0:02:57
[02/25 18:14:38] mask2former INFO: Inference done 656/1092. Dataloading: 0.0083 s/iter. Inference: 0.2280 s/iter. Eval: 0.1605 s/iter. Total: 0.3969 s/iter. ETA=0:02:53
[02/25 18:14:43] mask2former INFO: Inference done 668/1092. Dataloading: 0.0083 s/iter. Inference: 0.2283 s/iter. Eval: 0.1606 s/iter. Total: 0.3973 s/iter. ETA=0:02:48
[02/25 18:14:48] mask2former INFO: Inference done 681/1092. Dataloading: 0.0083 s/iter. Inference: 0.2285 s/iter. Eval: 0.1607 s/iter. Total: 0.3976 s/iter. ETA=0:02:43
[02/25 18:14:54] mask2former INFO: Inference done 694/1092. Dataloading: 0.0083 s/iter. Inference: 0.2284 s/iter. Eval: 0.1609 s/iter. Total: 0.3978 s/iter. ETA=0:02:38
[02/25 18:14:59] mask2former INFO: Inference done 708/1092. Dataloading: 0.0083 s/iter. Inference: 0.2281 s/iter. Eval: 0.1605 s/iter. Total: 0.3971 s/iter. ETA=0:02:32
[02/25 18:15:04] mask2former INFO: Inference done 722/1092. Dataloading: 0.0083 s/iter. Inference: 0.2278 s/iter. Eval: 0.1603 s/iter. Total: 0.3966 s/iter. ETA=0:02:26
[02/25 18:15:09] mask2former INFO: Inference done 735/1092. Dataloading: 0.0083 s/iter. Inference: 0.2278 s/iter. Eval: 0.1602 s/iter. Total: 0.3964 s/iter. ETA=0:02:21
[02/25 18:15:14] mask2former INFO: Inference done 747/1092. Dataloading: 0.0083 s/iter. Inference: 0.2281 s/iter. Eval: 0.1602 s/iter. Total: 0.3968 s/iter. ETA=0:02:16
[02/25 18:15:19] mask2former INFO: Inference done 760/1092. Dataloading: 0.0083 s/iter. Inference: 0.2282 s/iter. Eval: 0.1604 s/iter. Total: 0.3969 s/iter. ETA=0:02:11
[02/25 18:15:24] mask2former INFO: Inference done 775/1092. Dataloading: 0.0082 s/iter. Inference: 0.2278 s/iter. Eval: 0.1598 s/iter. Total: 0.3960 s/iter. ETA=0:02:05
[02/25 18:15:29] mask2former INFO: Inference done 787/1092. Dataloading: 0.0082 s/iter. Inference: 0.2280 s/iter. Eval: 0.1601 s/iter. Total: 0.3964 s/iter. ETA=0:02:00
[02/25 18:15:35] mask2former INFO: Inference done 801/1092. Dataloading: 0.0082 s/iter. Inference: 0.2278 s/iter. Eval: 0.1602 s/iter. Total: 0.3963 s/iter. ETA=0:01:55
[02/25 18:15:40] mask2former INFO: Inference done 814/1092. Dataloading: 0.0082 s/iter. Inference: 0.2277 s/iter. Eval: 0.1604 s/iter. Total: 0.3965 s/iter. ETA=0:01:50
[02/25 18:15:45] mask2former INFO: Inference done 827/1092. Dataloading: 0.0082 s/iter. Inference: 0.2275 s/iter. Eval: 0.1607 s/iter. Total: 0.3965 s/iter. ETA=0:01:45
[02/25 18:15:51] mask2former INFO: Inference done 840/1092. Dataloading: 0.0082 s/iter. Inference: 0.2272 s/iter. Eval: 0.1610 s/iter. Total: 0.3965 s/iter. ETA=0:01:39
[02/25 18:15:56] mask2former INFO: Inference done 853/1092. Dataloading: 0.0082 s/iter. Inference: 0.2275 s/iter. Eval: 0.1608 s/iter. Total: 0.3965 s/iter. ETA=0:01:34
[02/25 18:16:01] mask2former INFO: Inference done 866/1092. Dataloading: 0.0082 s/iter. Inference: 0.2277 s/iter. Eval: 0.1604 s/iter. Total: 0.3964 s/iter. ETA=0:01:29
[02/25 18:16:06] mask2former INFO: Inference done 881/1092. Dataloading: 0.0081 s/iter. Inference: 0.2275 s/iter. Eval: 0.1599 s/iter. Total: 0.3957 s/iter. ETA=0:01:23
[02/25 18:16:11] mask2former INFO: Inference done 895/1092. Dataloading: 0.0081 s/iter. Inference: 0.2273 s/iter. Eval: 0.1598 s/iter. Total: 0.3954 s/iter. ETA=0:01:17
[02/25 18:16:16] mask2former INFO: Inference done 908/1092. Dataloading: 0.0081 s/iter. Inference: 0.2273 s/iter. Eval: 0.1599 s/iter. Total: 0.3954 s/iter. ETA=0:01:12
[02/25 18:16:22] mask2former INFO: Inference done 921/1092. Dataloading: 0.0081 s/iter. Inference: 0.2274 s/iter. Eval: 0.1598 s/iter. Total: 0.3954 s/iter. ETA=0:01:07
[02/25 18:16:27] mask2former INFO: Inference done 934/1092. Dataloading: 0.0081 s/iter. Inference: 0.2275 s/iter. Eval: 0.1598 s/iter. Total: 0.3956 s/iter. ETA=0:01:02
[02/25 18:16:32] mask2former INFO: Inference done 947/1092. Dataloading: 0.0081 s/iter. Inference: 0.2277 s/iter. Eval: 0.1598 s/iter. Total: 0.3957 s/iter. ETA=0:00:57
[02/25 18:16:37] mask2former INFO: Inference done 961/1092. Dataloading: 0.0080 s/iter. Inference: 0.2274 s/iter. Eval: 0.1596 s/iter. Total: 0.3952 s/iter. ETA=0:00:51
[02/25 18:16:42] mask2former INFO: Inference done 973/1092. Dataloading: 0.0080 s/iter. Inference: 0.2276 s/iter. Eval: 0.1597 s/iter. Total: 0.3955 s/iter. ETA=0:00:47
[02/25 18:16:47] mask2former INFO: Inference done 986/1092. Dataloading: 0.0081 s/iter. Inference: 0.2274 s/iter. Eval: 0.1599 s/iter. Total: 0.3955 s/iter. ETA=0:00:41
[02/25 18:16:53] mask2former INFO: Inference done 1000/1092. Dataloading: 0.0081 s/iter. Inference: 0.2273 s/iter. Eval: 0.1598 s/iter. Total: 0.3954 s/iter. ETA=0:00:36
[02/25 18:16:58] mask2former INFO: Inference done 1014/1092. Dataloading: 0.0081 s/iter. Inference: 0.2272 s/iter. Eval: 0.1597 s/iter. Total: 0.3951 s/iter. ETA=0:00:30
[02/25 18:17:03] mask2former INFO: Inference done 1027/1092. Dataloading: 0.0081 s/iter. Inference: 0.2270 s/iter. Eval: 0.1598 s/iter. Total: 0.3950 s/iter. ETA=0:00:25
[02/25 18:17:08] mask2former INFO: Inference done 1040/1092. Dataloading: 0.0081 s/iter. Inference: 0.2272 s/iter. Eval: 0.1597 s/iter. Total: 0.3951 s/iter. ETA=0:00:20
[02/25 18:17:14] mask2former INFO: Inference done 1053/1092. Dataloading: 0.0081 s/iter. Inference: 0.2271 s/iter. Eval: 0.1598 s/iter. Total: 0.3951 s/iter. ETA=0:00:15
[02/25 18:17:19] mask2former INFO: Inference done 1066/1092. Dataloading: 0.0081 s/iter. Inference: 0.2273 s/iter. Eval: 0.1597 s/iter. Total: 0.3952 s/iter. ETA=0:00:10
[02/25 18:17:24] mask2former INFO: Inference done 1080/1092. Dataloading: 0.0081 s/iter. Inference: 0.2272 s/iter. Eval: 0.1593 s/iter. Total: 0.3947 s/iter. ETA=0:00:04
[02/25 19:05:58] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/25 19:05:58] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/25 19:05:58] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/25 19:06:13] mask2former INFO: Inference done 11/1092. Dataloading: 0.0063 s/iter. Inference: 0.2274 s/iter. Eval: 0.1503 s/iter. Total: 0.3840 s/iter. ETA=0:06:55
[02/25 19:06:18] mask2former INFO: Inference done 24/1092. Dataloading: 0.0061 s/iter. Inference: 0.2408 s/iter. Eval: 0.1490 s/iter. Total: 0.3960 s/iter. ETA=0:07:02
[02/25 19:06:23] mask2former INFO: Inference done 37/1092. Dataloading: 0.0064 s/iter. Inference: 0.2342 s/iter. Eval: 0.1558 s/iter. Total: 0.3965 s/iter. ETA=0:06:58
[02/25 19:06:28] mask2former INFO: Inference done 50/1092. Dataloading: 0.0066 s/iter. Inference: 0.2339 s/iter. Eval: 0.1586 s/iter. Total: 0.3993 s/iter. ETA=0:06:56
[02/25 19:06:33] mask2former INFO: Inference done 64/1092. Dataloading: 0.0070 s/iter. Inference: 0.2293 s/iter. Eval: 0.1557 s/iter. Total: 0.3920 s/iter. ETA=0:06:43
[02/25 19:06:39] mask2former INFO: Inference done 77/1092. Dataloading: 0.0074 s/iter. Inference: 0.2312 s/iter. Eval: 0.1550 s/iter. Total: 0.3936 s/iter. ETA=0:06:39
[02/25 19:06:44] mask2former INFO: Inference done 92/1092. Dataloading: 0.0072 s/iter. Inference: 0.2283 s/iter. Eval: 0.1492 s/iter. Total: 0.3848 s/iter. ETA=0:06:24
[02/25 19:06:49] mask2former INFO: Inference done 105/1092. Dataloading: 0.0074 s/iter. Inference: 0.2275 s/iter. Eval: 0.1511 s/iter. Total: 0.3861 s/iter. ETA=0:06:21
[02/25 19:06:54] mask2former INFO: Inference done 119/1092. Dataloading: 0.0076 s/iter. Inference: 0.2272 s/iter. Eval: 0.1494 s/iter. Total: 0.3844 s/iter. ETA=0:06:13
[02/25 19:06:59] mask2former INFO: Inference done 132/1092. Dataloading: 0.0075 s/iter. Inference: 0.2269 s/iter. Eval: 0.1504 s/iter. Total: 0.3849 s/iter. ETA=0:06:09
[02/25 19:07:04] mask2former INFO: Inference done 145/1092. Dataloading: 0.0076 s/iter. Inference: 0.2275 s/iter. Eval: 0.1508 s/iter. Total: 0.3860 s/iter. ETA=0:06:05
[02/25 19:07:09] mask2former INFO: Inference done 157/1092. Dataloading: 0.0075 s/iter. Inference: 0.2303 s/iter. Eval: 0.1518 s/iter. Total: 0.3897 s/iter. ETA=0:06:04
[02/25 19:07:14] mask2former INFO: Inference done 170/1092. Dataloading: 0.0077 s/iter. Inference: 0.2302 s/iter. Eval: 0.1514 s/iter. Total: 0.3894 s/iter. ETA=0:05:59
[02/25 19:07:20] mask2former INFO: Inference done 183/1092. Dataloading: 0.0076 s/iter. Inference: 0.2302 s/iter. Eval: 0.1517 s/iter. Total: 0.3895 s/iter. ETA=0:05:54
[02/25 19:07:25] mask2former INFO: Inference done 196/1092. Dataloading: 0.0078 s/iter. Inference: 0.2303 s/iter. Eval: 0.1528 s/iter. Total: 0.3911 s/iter. ETA=0:05:50
[02/25 19:07:30] mask2former INFO: Inference done 209/1092. Dataloading: 0.0079 s/iter. Inference: 0.2296 s/iter. Eval: 0.1536 s/iter. Total: 0.3912 s/iter. ETA=0:05:45
[02/25 19:07:35] mask2former INFO: Inference done 222/1092. Dataloading: 0.0079 s/iter. Inference: 0.2290 s/iter. Eval: 0.1545 s/iter. Total: 0.3915 s/iter. ETA=0:05:40
[02/25 19:07:41] mask2former INFO: Inference done 237/1092. Dataloading: 0.0079 s/iter. Inference: 0.2278 s/iter. Eval: 0.1535 s/iter. Total: 0.3893 s/iter. ETA=0:05:32
[02/25 19:07:46] mask2former INFO: Inference done 250/1092. Dataloading: 0.0080 s/iter. Inference: 0.2276 s/iter. Eval: 0.1547 s/iter. Total: 0.3905 s/iter. ETA=0:05:28
[02/25 19:07:51] mask2former INFO: Inference done 263/1092. Dataloading: 0.0081 s/iter. Inference: 0.2273 s/iter. Eval: 0.1559 s/iter. Total: 0.3915 s/iter. ETA=0:05:24
[02/25 19:07:56] mask2former INFO: Inference done 275/1092. Dataloading: 0.0081 s/iter. Inference: 0.2277 s/iter. Eval: 0.1573 s/iter. Total: 0.3932 s/iter. ETA=0:05:21
[02/25 19:08:02] mask2former INFO: Inference done 288/1092. Dataloading: 0.0082 s/iter. Inference: 0.2281 s/iter. Eval: 0.1569 s/iter. Total: 0.3934 s/iter. ETA=0:05:16
[02/25 19:08:07] mask2former INFO: Inference done 301/1092. Dataloading: 0.0082 s/iter. Inference: 0.2282 s/iter. Eval: 0.1571 s/iter. Total: 0.3936 s/iter. ETA=0:05:11
[02/25 19:08:12] mask2former INFO: Inference done 314/1092. Dataloading: 0.0082 s/iter. Inference: 0.2282 s/iter. Eval: 0.1570 s/iter. Total: 0.3935 s/iter. ETA=0:05:06
[02/25 19:08:17] mask2former INFO: Inference done 327/1092. Dataloading: 0.0082 s/iter. Inference: 0.2281 s/iter. Eval: 0.1576 s/iter. Total: 0.3940 s/iter. ETA=0:05:01
[02/25 19:08:22] mask2former INFO: Inference done 340/1092. Dataloading: 0.0083 s/iter. Inference: 0.2275 s/iter. Eval: 0.1587 s/iter. Total: 0.3945 s/iter. ETA=0:04:56
[02/25 19:08:28] mask2former INFO: Inference done 355/1092. Dataloading: 0.0083 s/iter. Inference: 0.2271 s/iter. Eval: 0.1573 s/iter. Total: 0.3928 s/iter. ETA=0:04:49
[02/25 19:08:33] mask2former INFO: Inference done 368/1092. Dataloading: 0.0083 s/iter. Inference: 0.2264 s/iter. Eval: 0.1580 s/iter. Total: 0.3928 s/iter. ETA=0:04:44
[02/25 19:08:38] mask2former INFO: Inference done 381/1092. Dataloading: 0.0083 s/iter. Inference: 0.2263 s/iter. Eval: 0.1584 s/iter. Total: 0.3932 s/iter. ETA=0:04:39
[02/25 19:08:43] mask2former INFO: Inference done 394/1092. Dataloading: 0.0083 s/iter. Inference: 0.2266 s/iter. Eval: 0.1584 s/iter. Total: 0.3934 s/iter. ETA=0:04:34
[02/25 19:08:49] mask2former INFO: Inference done 409/1092. Dataloading: 0.0083 s/iter. Inference: 0.2258 s/iter. Eval: 0.1579 s/iter. Total: 0.3920 s/iter. ETA=0:04:27
[02/25 19:08:54] mask2former INFO: Inference done 421/1092. Dataloading: 0.0083 s/iter. Inference: 0.2252 s/iter. Eval: 0.1593 s/iter. Total: 0.3929 s/iter. ETA=0:04:23
[02/25 19:08:59] mask2former INFO: Inference done 435/1092. Dataloading: 0.0082 s/iter. Inference: 0.2249 s/iter. Eval: 0.1586 s/iter. Total: 0.3918 s/iter. ETA=0:04:17
[02/25 19:09:04] mask2former INFO: Inference done 448/1092. Dataloading: 0.0082 s/iter. Inference: 0.2251 s/iter. Eval: 0.1590 s/iter. Total: 0.3924 s/iter. ETA=0:04:12
[02/25 19:09:09] mask2former INFO: Inference done 461/1092. Dataloading: 0.0082 s/iter. Inference: 0.2252 s/iter. Eval: 0.1592 s/iter. Total: 0.3927 s/iter. ETA=0:04:07
[02/25 19:09:15] mask2former INFO: Inference done 474/1092. Dataloading: 0.0082 s/iter. Inference: 0.2253 s/iter. Eval: 0.1595 s/iter. Total: 0.3931 s/iter. ETA=0:04:02
[02/25 19:09:20] mask2former INFO: Inference done 486/1092. Dataloading: 0.0081 s/iter. Inference: 0.2259 s/iter. Eval: 0.1599 s/iter. Total: 0.3940 s/iter. ETA=0:03:58
[02/25 19:09:25] mask2former INFO: Inference done 499/1092. Dataloading: 0.0082 s/iter. Inference: 0.2263 s/iter. Eval: 0.1600 s/iter. Total: 0.3946 s/iter. ETA=0:03:54
[02/25 19:09:31] mask2former INFO: Inference done 513/1092. Dataloading: 0.0082 s/iter. Inference: 0.2268 s/iter. Eval: 0.1593 s/iter. Total: 0.3943 s/iter. ETA=0:03:48
[02/25 19:09:36] mask2former INFO: Inference done 526/1092. Dataloading: 0.0082 s/iter. Inference: 0.2264 s/iter. Eval: 0.1597 s/iter. Total: 0.3944 s/iter. ETA=0:03:43
[02/25 19:09:41] mask2former INFO: Inference done 540/1092. Dataloading: 0.0081 s/iter. Inference: 0.2264 s/iter. Eval: 0.1594 s/iter. Total: 0.3940 s/iter. ETA=0:03:37
[02/25 19:09:46] mask2former INFO: Inference done 553/1092. Dataloading: 0.0081 s/iter. Inference: 0.2264 s/iter. Eval: 0.1595 s/iter. Total: 0.3941 s/iter. ETA=0:03:32
[02/25 19:09:51] mask2former INFO: Inference done 564/1092. Dataloading: 0.0081 s/iter. Inference: 0.2270 s/iter. Eval: 0.1603 s/iter. Total: 0.3955 s/iter. ETA=0:03:28
[02/25 19:09:57] mask2former INFO: Inference done 576/1092. Dataloading: 0.0081 s/iter. Inference: 0.2278 s/iter. Eval: 0.1606 s/iter. Total: 0.3967 s/iter. ETA=0:03:24
[02/25 19:10:02] mask2former INFO: Inference done 589/1092. Dataloading: 0.0081 s/iter. Inference: 0.2278 s/iter. Eval: 0.1608 s/iter. Total: 0.3968 s/iter. ETA=0:03:19
[02/25 19:10:07] mask2former INFO: Inference done 602/1092. Dataloading: 0.0081 s/iter. Inference: 0.2279 s/iter. Eval: 0.1610 s/iter. Total: 0.3971 s/iter. ETA=0:03:14
[02/25 19:10:12] mask2former INFO: Inference done 615/1092. Dataloading: 0.0081 s/iter. Inference: 0.2276 s/iter. Eval: 0.1611 s/iter. Total: 0.3970 s/iter. ETA=0:03:09
[02/25 19:10:17] mask2former INFO: Inference done 627/1092. Dataloading: 0.0081 s/iter. Inference: 0.2279 s/iter. Eval: 0.1614 s/iter. Total: 0.3975 s/iter. ETA=0:03:04
[02/25 19:10:23] mask2former INFO: Inference done 640/1092. Dataloading: 0.0081 s/iter. Inference: 0.2283 s/iter. Eval: 0.1611 s/iter. Total: 0.3975 s/iter. ETA=0:02:59
[02/25 19:10:28] mask2former INFO: Inference done 653/1092. Dataloading: 0.0081 s/iter. Inference: 0.2283 s/iter. Eval: 0.1609 s/iter. Total: 0.3974 s/iter. ETA=0:02:54
[02/25 19:10:33] mask2former INFO: Inference done 666/1092. Dataloading: 0.0080 s/iter. Inference: 0.2283 s/iter. Eval: 0.1608 s/iter. Total: 0.3972 s/iter. ETA=0:02:49
[02/25 19:10:38] mask2former INFO: Inference done 680/1092. Dataloading: 0.0080 s/iter. Inference: 0.2282 s/iter. Eval: 0.1605 s/iter. Total: 0.3969 s/iter. ETA=0:02:43
[02/25 19:10:43] mask2former INFO: Inference done 693/1092. Dataloading: 0.0081 s/iter. Inference: 0.2283 s/iter. Eval: 0.1605 s/iter. Total: 0.3971 s/iter. ETA=0:02:38
[02/25 19:10:49] mask2former INFO: Inference done 706/1092. Dataloading: 0.0080 s/iter. Inference: 0.2287 s/iter. Eval: 0.1602 s/iter. Total: 0.3971 s/iter. ETA=0:02:33
[02/25 19:10:54] mask2former INFO: Inference done 720/1092. Dataloading: 0.0080 s/iter. Inference: 0.2289 s/iter. Eval: 0.1595 s/iter. Total: 0.3966 s/iter. ETA=0:02:27
[02/25 19:10:59] mask2former INFO: Inference done 733/1092. Dataloading: 0.0081 s/iter. Inference: 0.2288 s/iter. Eval: 0.1597 s/iter. Total: 0.3967 s/iter. ETA=0:02:22
[02/25 19:11:04] mask2former INFO: Inference done 746/1092. Dataloading: 0.0081 s/iter. Inference: 0.2291 s/iter. Eval: 0.1597 s/iter. Total: 0.3970 s/iter. ETA=0:02:17
[02/25 19:11:10] mask2former INFO: Inference done 760/1092. Dataloading: 0.0081 s/iter. Inference: 0.2293 s/iter. Eval: 0.1591 s/iter. Total: 0.3966 s/iter. ETA=0:02:11
[02/25 19:11:15] mask2former INFO: Inference done 773/1092. Dataloading: 0.0081 s/iter. Inference: 0.2294 s/iter. Eval: 0.1589 s/iter. Total: 0.3965 s/iter. ETA=0:02:06
[02/25 19:11:20] mask2former INFO: Inference done 787/1092. Dataloading: 0.0083 s/iter. Inference: 0.2294 s/iter. Eval: 0.1587 s/iter. Total: 0.3964 s/iter. ETA=0:02:00
[02/25 19:11:26] mask2former INFO: Inference done 800/1092. Dataloading: 0.0083 s/iter. Inference: 0.2293 s/iter. Eval: 0.1589 s/iter. Total: 0.3967 s/iter. ETA=0:01:55
[02/25 19:11:31] mask2former INFO: Inference done 812/1092. Dataloading: 0.0083 s/iter. Inference: 0.2295 s/iter. Eval: 0.1593 s/iter. Total: 0.3972 s/iter. ETA=0:01:51
[02/25 19:11:36] mask2former INFO: Inference done 825/1092. Dataloading: 0.0083 s/iter. Inference: 0.2296 s/iter. Eval: 0.1595 s/iter. Total: 0.3975 s/iter. ETA=0:01:46
[02/25 19:11:41] mask2former INFO: Inference done 838/1092. Dataloading: 0.0083 s/iter. Inference: 0.2296 s/iter. Eval: 0.1593 s/iter. Total: 0.3974 s/iter. ETA=0:01:40
[02/25 19:11:46] mask2former INFO: Inference done 853/1092. Dataloading: 0.0083 s/iter. Inference: 0.2292 s/iter. Eval: 0.1588 s/iter. Total: 0.3964 s/iter. ETA=0:01:34
[02/25 19:11:52] mask2former INFO: Inference done 867/1092. Dataloading: 0.0083 s/iter. Inference: 0.2290 s/iter. Eval: 0.1586 s/iter. Total: 0.3961 s/iter. ETA=0:01:29
[02/25 19:11:57] mask2former INFO: Inference done 881/1092. Dataloading: 0.0083 s/iter. Inference: 0.2290 s/iter. Eval: 0.1584 s/iter. Total: 0.3959 s/iter. ETA=0:01:23
[02/25 19:12:02] mask2former INFO: Inference done 895/1092. Dataloading: 0.0083 s/iter. Inference: 0.2289 s/iter. Eval: 0.1583 s/iter. Total: 0.3956 s/iter. ETA=0:01:17
[02/25 19:12:07] mask2former INFO: Inference done 907/1092. Dataloading: 0.0083 s/iter. Inference: 0.2292 s/iter. Eval: 0.1582 s/iter. Total: 0.3960 s/iter. ETA=0:01:13
[02/25 19:12:13] mask2former INFO: Inference done 920/1092. Dataloading: 0.0083 s/iter. Inference: 0.2291 s/iter. Eval: 0.1585 s/iter. Total: 0.3961 s/iter. ETA=0:01:08
[02/25 19:12:18] mask2former INFO: Inference done 934/1092. Dataloading: 0.0083 s/iter. Inference: 0.2289 s/iter. Eval: 0.1582 s/iter. Total: 0.3956 s/iter. ETA=0:01:02
[02/25 19:12:23] mask2former INFO: Inference done 947/1092. Dataloading: 0.0084 s/iter. Inference: 0.2291 s/iter. Eval: 0.1581 s/iter. Total: 0.3957 s/iter. ETA=0:00:57
[02/25 19:12:28] mask2former INFO: Inference done 961/1092. Dataloading: 0.0084 s/iter. Inference: 0.2290 s/iter. Eval: 0.1576 s/iter. Total: 0.3952 s/iter. ETA=0:00:51
[02/25 19:12:33] mask2former INFO: Inference done 975/1092. Dataloading: 0.0084 s/iter. Inference: 0.2288 s/iter. Eval: 0.1574 s/iter. Total: 0.3947 s/iter. ETA=0:00:46
[02/25 19:12:38] mask2former INFO: Inference done 986/1092. Dataloading: 0.0084 s/iter. Inference: 0.2288 s/iter. Eval: 0.1581 s/iter. Total: 0.3954 s/iter. ETA=0:00:41
[02/25 19:12:43] mask2former INFO: Inference done 999/1092. Dataloading: 0.0084 s/iter. Inference: 0.2290 s/iter. Eval: 0.1581 s/iter. Total: 0.3956 s/iter. ETA=0:00:36
[02/25 19:12:48] mask2former INFO: Inference done 1013/1092. Dataloading: 0.0084 s/iter. Inference: 0.2286 s/iter. Eval: 0.1579 s/iter. Total: 0.3951 s/iter. ETA=0:00:31
[02/25 19:12:54] mask2former INFO: Inference done 1027/1092. Dataloading: 0.0084 s/iter. Inference: 0.2285 s/iter. Eval: 0.1576 s/iter. Total: 0.3946 s/iter. ETA=0:00:25
[02/25 19:12:59] mask2former INFO: Inference done 1042/1092. Dataloading: 0.0083 s/iter. Inference: 0.2284 s/iter. Eval: 0.1573 s/iter. Total: 0.3942 s/iter. ETA=0:00:19
[02/25 19:13:04] mask2former INFO: Inference done 1054/1092. Dataloading: 0.0084 s/iter. Inference: 0.2288 s/iter. Eval: 0.1572 s/iter. Total: 0.3944 s/iter. ETA=0:00:14
[02/25 19:13:09] mask2former INFO: Inference done 1069/1092. Dataloading: 0.0083 s/iter. Inference: 0.2286 s/iter. Eval: 0.1567 s/iter. Total: 0.3938 s/iter. ETA=0:00:09
[02/25 19:13:14] mask2former INFO: Inference done 1082/1092. Dataloading: 0.0083 s/iter. Inference: 0.2287 s/iter. Eval: 0.1566 s/iter. Total: 0.3937 s/iter. ETA=0:00:03
[02/25 20:01:49] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/25 20:01:49] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/25 20:01:49] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/25 20:02:03] mask2former INFO: Inference done 11/1092. Dataloading: 0.0050 s/iter. Inference: 0.2488 s/iter. Eval: 0.1454 s/iter. Total: 0.3992 s/iter. ETA=0:07:11
[02/25 20:02:08] mask2former INFO: Inference done 23/1092. Dataloading: 0.0075 s/iter. Inference: 0.2315 s/iter. Eval: 0.1720 s/iter. Total: 0.4111 s/iter. ETA=0:07:19
[02/25 20:02:14] mask2former INFO: Inference done 36/1092. Dataloading: 0.0069 s/iter. Inference: 0.2248 s/iter. Eval: 0.1705 s/iter. Total: 0.4023 s/iter. ETA=0:07:04
[02/25 20:02:19] mask2former INFO: Inference done 48/1092. Dataloading: 0.0072 s/iter. Inference: 0.2305 s/iter. Eval: 0.1732 s/iter. Total: 0.4110 s/iter. ETA=0:07:09
[02/25 20:02:24] mask2former INFO: Inference done 61/1092. Dataloading: 0.0074 s/iter. Inference: 0.2309 s/iter. Eval: 0.1699 s/iter. Total: 0.4083 s/iter. ETA=0:07:00
[02/25 20:02:29] mask2former INFO: Inference done 74/1092. Dataloading: 0.0073 s/iter. Inference: 0.2329 s/iter. Eval: 0.1655 s/iter. Total: 0.4058 s/iter. ETA=0:06:53
[02/25 20:02:34] mask2former INFO: Inference done 87/1092. Dataloading: 0.0071 s/iter. Inference: 0.2308 s/iter. Eval: 0.1662 s/iter. Total: 0.4042 s/iter. ETA=0:06:46
[02/25 20:02:39] mask2former INFO: Inference done 100/1092. Dataloading: 0.0072 s/iter. Inference: 0.2290 s/iter. Eval: 0.1657 s/iter. Total: 0.4020 s/iter. ETA=0:06:38
[02/25 20:02:45] mask2former INFO: Inference done 114/1092. Dataloading: 0.0071 s/iter. Inference: 0.2287 s/iter. Eval: 0.1628 s/iter. Total: 0.3988 s/iter. ETA=0:06:30
[02/25 20:02:50] mask2former INFO: Inference done 127/1092. Dataloading: 0.0071 s/iter. Inference: 0.2291 s/iter. Eval: 0.1616 s/iter. Total: 0.3978 s/iter. ETA=0:06:23
[02/25 20:02:55] mask2former INFO: Inference done 141/1092. Dataloading: 0.0071 s/iter. Inference: 0.2278 s/iter. Eval: 0.1618 s/iter. Total: 0.3967 s/iter. ETA=0:06:17
[02/25 20:03:00] mask2former INFO: Inference done 156/1092. Dataloading: 0.0072 s/iter. Inference: 0.2284 s/iter. Eval: 0.1577 s/iter. Total: 0.3934 s/iter. ETA=0:06:08
[02/25 20:03:06] mask2former INFO: Inference done 169/1092. Dataloading: 0.0073 s/iter. Inference: 0.2282 s/iter. Eval: 0.1600 s/iter. Total: 0.3956 s/iter. ETA=0:06:05
[02/25 20:03:11] mask2former INFO: Inference done 182/1092. Dataloading: 0.0073 s/iter. Inference: 0.2275 s/iter. Eval: 0.1607 s/iter. Total: 0.3956 s/iter. ETA=0:06:00
[02/25 20:03:16] mask2former INFO: Inference done 195/1092. Dataloading: 0.0073 s/iter. Inference: 0.2269 s/iter. Eval: 0.1616 s/iter. Total: 0.3959 s/iter. ETA=0:05:55
[02/25 20:03:21] mask2former INFO: Inference done 206/1092. Dataloading: 0.0074 s/iter. Inference: 0.2293 s/iter. Eval: 0.1629 s/iter. Total: 0.3997 s/iter. ETA=0:05:54
[02/25 20:03:27] mask2former INFO: Inference done 219/1092. Dataloading: 0.0075 s/iter. Inference: 0.2298 s/iter. Eval: 0.1628 s/iter. Total: 0.4003 s/iter. ETA=0:05:49
[02/25 20:03:32] mask2former INFO: Inference done 232/1092. Dataloading: 0.0076 s/iter. Inference: 0.2287 s/iter. Eval: 0.1631 s/iter. Total: 0.3996 s/iter. ETA=0:05:43
[02/25 20:03:37] mask2former INFO: Inference done 245/1092. Dataloading: 0.0076 s/iter. Inference: 0.2290 s/iter. Eval: 0.1623 s/iter. Total: 0.3991 s/iter. ETA=0:05:38
[02/25 20:03:42] mask2former INFO: Inference done 258/1092. Dataloading: 0.0076 s/iter. Inference: 0.2293 s/iter. Eval: 0.1624 s/iter. Total: 0.3994 s/iter. ETA=0:05:33
[02/25 20:03:47] mask2former INFO: Inference done 271/1092. Dataloading: 0.0076 s/iter. Inference: 0.2296 s/iter. Eval: 0.1627 s/iter. Total: 0.4000 s/iter. ETA=0:05:28
[02/25 20:03:53] mask2former INFO: Inference done 283/1092. Dataloading: 0.0076 s/iter. Inference: 0.2294 s/iter. Eval: 0.1646 s/iter. Total: 0.4017 s/iter. ETA=0:05:24
[02/25 20:03:58] mask2former INFO: Inference done 296/1092. Dataloading: 0.0076 s/iter. Inference: 0.2295 s/iter. Eval: 0.1639 s/iter. Total: 0.4011 s/iter. ETA=0:05:19
[02/25 20:04:03] mask2former INFO: Inference done 308/1092. Dataloading: 0.0076 s/iter. Inference: 0.2311 s/iter. Eval: 0.1634 s/iter. Total: 0.4022 s/iter. ETA=0:05:15
[02/25 20:04:08] mask2former INFO: Inference done 321/1092. Dataloading: 0.0080 s/iter. Inference: 0.2312 s/iter. Eval: 0.1627 s/iter. Total: 0.4020 s/iter. ETA=0:05:09
[02/25 20:04:13] mask2former INFO: Inference done 333/1092. Dataloading: 0.0080 s/iter. Inference: 0.2314 s/iter. Eval: 0.1636 s/iter. Total: 0.4030 s/iter. ETA=0:05:05
[02/25 20:04:19] mask2former INFO: Inference done 348/1092. Dataloading: 0.0079 s/iter. Inference: 0.2309 s/iter. Eval: 0.1621 s/iter. Total: 0.4011 s/iter. ETA=0:04:58
[02/25 20:04:24] mask2former INFO: Inference done 361/1092. Dataloading: 0.0078 s/iter. Inference: 0.2308 s/iter. Eval: 0.1623 s/iter. Total: 0.4011 s/iter. ETA=0:04:53
[02/25 20:04:29] mask2former INFO: Inference done 373/1092. Dataloading: 0.0079 s/iter. Inference: 0.2305 s/iter. Eval: 0.1633 s/iter. Total: 0.4019 s/iter. ETA=0:04:48
[02/25 20:04:34] mask2former INFO: Inference done 385/1092. Dataloading: 0.0079 s/iter. Inference: 0.2308 s/iter. Eval: 0.1636 s/iter. Total: 0.4024 s/iter. ETA=0:04:44
[02/25 20:04:39] mask2former INFO: Inference done 398/1092. Dataloading: 0.0080 s/iter. Inference: 0.2314 s/iter. Eval: 0.1630 s/iter. Total: 0.4025 s/iter. ETA=0:04:39
[02/25 20:04:44] mask2former INFO: Inference done 410/1092. Dataloading: 0.0080 s/iter. Inference: 0.2315 s/iter. Eval: 0.1638 s/iter. Total: 0.4034 s/iter. ETA=0:04:35
[02/25 20:04:50] mask2former INFO: Inference done 422/1092. Dataloading: 0.0081 s/iter. Inference: 0.2315 s/iter. Eval: 0.1646 s/iter. Total: 0.4043 s/iter. ETA=0:04:30
[02/25 20:04:55] mask2former INFO: Inference done 435/1092. Dataloading: 0.0080 s/iter. Inference: 0.2310 s/iter. Eval: 0.1650 s/iter. Total: 0.4041 s/iter. ETA=0:04:25
[02/25 20:05:00] mask2former INFO: Inference done 449/1092. Dataloading: 0.0080 s/iter. Inference: 0.2312 s/iter. Eval: 0.1643 s/iter. Total: 0.4036 s/iter. ETA=0:04:19
[02/25 20:05:05] mask2former INFO: Inference done 463/1092. Dataloading: 0.0080 s/iter. Inference: 0.2308 s/iter. Eval: 0.1636 s/iter. Total: 0.4025 s/iter. ETA=0:04:13
[02/25 20:05:11] mask2former INFO: Inference done 475/1092. Dataloading: 0.0080 s/iter. Inference: 0.2312 s/iter. Eval: 0.1638 s/iter. Total: 0.4031 s/iter. ETA=0:04:08
[02/25 20:05:16] mask2former INFO: Inference done 489/1092. Dataloading: 0.0080 s/iter. Inference: 0.2315 s/iter. Eval: 0.1632 s/iter. Total: 0.4027 s/iter. ETA=0:04:02
[02/25 20:05:21] mask2former INFO: Inference done 503/1092. Dataloading: 0.0079 s/iter. Inference: 0.2307 s/iter. Eval: 0.1630 s/iter. Total: 0.4017 s/iter. ETA=0:03:56
[02/25 20:05:26] mask2former INFO: Inference done 516/1092. Dataloading: 0.0079 s/iter. Inference: 0.2305 s/iter. Eval: 0.1630 s/iter. Total: 0.4015 s/iter. ETA=0:03:51
[02/25 20:05:31] mask2former INFO: Inference done 528/1092. Dataloading: 0.0079 s/iter. Inference: 0.2311 s/iter. Eval: 0.1629 s/iter. Total: 0.4019 s/iter. ETA=0:03:46
[02/25 20:05:36] mask2former INFO: Inference done 542/1092. Dataloading: 0.0078 s/iter. Inference: 0.2306 s/iter. Eval: 0.1624 s/iter. Total: 0.4010 s/iter. ETA=0:03:40
[02/25 20:05:41] mask2former INFO: Inference done 555/1092. Dataloading: 0.0079 s/iter. Inference: 0.2303 s/iter. Eval: 0.1626 s/iter. Total: 0.4008 s/iter. ETA=0:03:35
[02/25 20:05:47] mask2former INFO: Inference done 569/1092. Dataloading: 0.0079 s/iter. Inference: 0.2299 s/iter. Eval: 0.1626 s/iter. Total: 0.4005 s/iter. ETA=0:03:29
[02/25 20:05:52] mask2former INFO: Inference done 582/1092. Dataloading: 0.0079 s/iter. Inference: 0.2298 s/iter. Eval: 0.1629 s/iter. Total: 0.4007 s/iter. ETA=0:03:24
[02/25 20:05:58] mask2former INFO: Inference done 597/1092. Dataloading: 0.0079 s/iter. Inference: 0.2294 s/iter. Eval: 0.1623 s/iter. Total: 0.3997 s/iter. ETA=0:03:17
[02/25 20:06:03] mask2former INFO: Inference done 611/1092. Dataloading: 0.0079 s/iter. Inference: 0.2292 s/iter. Eval: 0.1617 s/iter. Total: 0.3989 s/iter. ETA=0:03:11
[02/25 20:06:08] mask2former INFO: Inference done 626/1092. Dataloading: 0.0079 s/iter. Inference: 0.2290 s/iter. Eval: 0.1606 s/iter. Total: 0.3976 s/iter. ETA=0:03:05
[02/25 20:06:13] mask2former INFO: Inference done 639/1092. Dataloading: 0.0079 s/iter. Inference: 0.2289 s/iter. Eval: 0.1607 s/iter. Total: 0.3976 s/iter. ETA=0:03:00
[02/25 20:06:18] mask2former INFO: Inference done 652/1092. Dataloading: 0.0079 s/iter. Inference: 0.2289 s/iter. Eval: 0.1608 s/iter. Total: 0.3978 s/iter. ETA=0:02:55
[02/25 20:06:24] mask2former INFO: Inference done 665/1092. Dataloading: 0.0079 s/iter. Inference: 0.2286 s/iter. Eval: 0.1611 s/iter. Total: 0.3978 s/iter. ETA=0:02:49
[02/25 20:06:29] mask2former INFO: Inference done 680/1092. Dataloading: 0.0079 s/iter. Inference: 0.2286 s/iter. Eval: 0.1601 s/iter. Total: 0.3968 s/iter. ETA=0:02:43
[02/25 20:06:34] mask2former INFO: Inference done 694/1092. Dataloading: 0.0079 s/iter. Inference: 0.2286 s/iter. Eval: 0.1598 s/iter. Total: 0.3964 s/iter. ETA=0:02:37
[02/25 20:06:39] mask2former INFO: Inference done 707/1092. Dataloading: 0.0078 s/iter. Inference: 0.2285 s/iter. Eval: 0.1600 s/iter. Total: 0.3965 s/iter. ETA=0:02:32
[02/25 20:06:45] mask2former INFO: Inference done 721/1092. Dataloading: 0.0078 s/iter. Inference: 0.2284 s/iter. Eval: 0.1596 s/iter. Total: 0.3960 s/iter. ETA=0:02:26
[02/25 20:06:50] mask2former INFO: Inference done 733/1092. Dataloading: 0.0079 s/iter. Inference: 0.2286 s/iter. Eval: 0.1602 s/iter. Total: 0.3968 s/iter. ETA=0:02:22
[02/25 20:06:55] mask2former INFO: Inference done 748/1092. Dataloading: 0.0078 s/iter. Inference: 0.2283 s/iter. Eval: 0.1594 s/iter. Total: 0.3957 s/iter. ETA=0:02:16
[02/25 20:07:00] mask2former INFO: Inference done 761/1092. Dataloading: 0.0078 s/iter. Inference: 0.2284 s/iter. Eval: 0.1594 s/iter. Total: 0.3957 s/iter. ETA=0:02:10
[02/25 20:07:05] mask2former INFO: Inference done 774/1092. Dataloading: 0.0078 s/iter. Inference: 0.2283 s/iter. Eval: 0.1595 s/iter. Total: 0.3957 s/iter. ETA=0:02:05
[02/25 20:07:10] mask2former INFO: Inference done 787/1092. Dataloading: 0.0078 s/iter. Inference: 0.2280 s/iter. Eval: 0.1597 s/iter. Total: 0.3956 s/iter. ETA=0:02:00
[02/25 20:07:16] mask2former INFO: Inference done 800/1092. Dataloading: 0.0078 s/iter. Inference: 0.2283 s/iter. Eval: 0.1595 s/iter. Total: 0.3957 s/iter. ETA=0:01:55
[02/25 20:07:21] mask2former INFO: Inference done 813/1092. Dataloading: 0.0078 s/iter. Inference: 0.2286 s/iter. Eval: 0.1595 s/iter. Total: 0.3960 s/iter. ETA=0:01:50
[02/25 20:07:26] mask2former INFO: Inference done 827/1092. Dataloading: 0.0078 s/iter. Inference: 0.2282 s/iter. Eval: 0.1594 s/iter. Total: 0.3955 s/iter. ETA=0:01:44
[02/25 20:07:31] mask2former INFO: Inference done 840/1092. Dataloading: 0.0078 s/iter. Inference: 0.2282 s/iter. Eval: 0.1593 s/iter. Total: 0.3954 s/iter. ETA=0:01:39
[02/25 20:07:37] mask2former INFO: Inference done 854/1092. Dataloading: 0.0078 s/iter. Inference: 0.2281 s/iter. Eval: 0.1593 s/iter. Total: 0.3953 s/iter. ETA=0:01:34
[02/25 20:07:42] mask2former INFO: Inference done 868/1092. Dataloading: 0.0078 s/iter. Inference: 0.2282 s/iter. Eval: 0.1590 s/iter. Total: 0.3950 s/iter. ETA=0:01:28
[02/25 20:07:47] mask2former INFO: Inference done 883/1092. Dataloading: 0.0078 s/iter. Inference: 0.2279 s/iter. Eval: 0.1582 s/iter. Total: 0.3940 s/iter. ETA=0:01:22
[02/25 20:07:52] mask2former INFO: Inference done 897/1092. Dataloading: 0.0078 s/iter. Inference: 0.2274 s/iter. Eval: 0.1581 s/iter. Total: 0.3934 s/iter. ETA=0:01:16
[02/25 20:07:57] mask2former INFO: Inference done 911/1092. Dataloading: 0.0078 s/iter. Inference: 0.2273 s/iter. Eval: 0.1580 s/iter. Total: 0.3932 s/iter. ETA=0:01:11
[02/25 20:08:02] mask2former INFO: Inference done 924/1092. Dataloading: 0.0078 s/iter. Inference: 0.2273 s/iter. Eval: 0.1581 s/iter. Total: 0.3933 s/iter. ETA=0:01:06
[02/25 20:08:08] mask2former INFO: Inference done 937/1092. Dataloading: 0.0078 s/iter. Inference: 0.2271 s/iter. Eval: 0.1583 s/iter. Total: 0.3934 s/iter. ETA=0:01:00
[02/25 20:08:13] mask2former INFO: Inference done 951/1092. Dataloading: 0.0078 s/iter. Inference: 0.2270 s/iter. Eval: 0.1582 s/iter. Total: 0.3931 s/iter. ETA=0:00:55
[02/25 20:08:18] mask2former INFO: Inference done 964/1092. Dataloading: 0.0078 s/iter. Inference: 0.2273 s/iter. Eval: 0.1581 s/iter. Total: 0.3933 s/iter. ETA=0:00:50
[02/25 20:08:23] mask2former INFO: Inference done 977/1092. Dataloading: 0.0078 s/iter. Inference: 0.2272 s/iter. Eval: 0.1581 s/iter. Total: 0.3932 s/iter. ETA=0:00:45
[02/25 20:08:28] mask2former INFO: Inference done 989/1092. Dataloading: 0.0077 s/iter. Inference: 0.2272 s/iter. Eval: 0.1585 s/iter. Total: 0.3935 s/iter. ETA=0:00:40
[02/25 20:08:33] mask2former INFO: Inference done 1002/1092. Dataloading: 0.0077 s/iter. Inference: 0.2271 s/iter. Eval: 0.1586 s/iter. Total: 0.3935 s/iter. ETA=0:00:35
[02/25 20:08:39] mask2former INFO: Inference done 1016/1092. Dataloading: 0.0077 s/iter. Inference: 0.2269 s/iter. Eval: 0.1585 s/iter. Total: 0.3932 s/iter. ETA=0:00:29
[02/25 20:08:44] mask2former INFO: Inference done 1030/1092. Dataloading: 0.0077 s/iter. Inference: 0.2268 s/iter. Eval: 0.1585 s/iter. Total: 0.3931 s/iter. ETA=0:00:24
[02/25 20:08:49] mask2former INFO: Inference done 1043/1092. Dataloading: 0.0077 s/iter. Inference: 0.2268 s/iter. Eval: 0.1584 s/iter. Total: 0.3930 s/iter. ETA=0:00:19
[02/25 20:08:54] mask2former INFO: Inference done 1056/1092. Dataloading: 0.0077 s/iter. Inference: 0.2269 s/iter. Eval: 0.1584 s/iter. Total: 0.3932 s/iter. ETA=0:00:14
[02/25 20:08:59] mask2former INFO: Inference done 1068/1092. Dataloading: 0.0077 s/iter. Inference: 0.2272 s/iter. Eval: 0.1584 s/iter. Total: 0.3935 s/iter. ETA=0:00:09
[02/25 20:09:05] mask2former INFO: Inference done 1081/1092. Dataloading: 0.0077 s/iter. Inference: 0.2273 s/iter. Eval: 0.1584 s/iter. Total: 0.3936 s/iter. ETA=0:00:04
