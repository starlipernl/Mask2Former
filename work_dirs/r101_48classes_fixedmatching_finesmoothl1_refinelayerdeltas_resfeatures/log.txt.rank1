[02/25 17:19:11] detectron2 INFO: Rank of current process: 1. World size: 4
[02/25 17:19:17] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/home/nstarli/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.5
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             Tesla V100-SXM2-32GB (arch=7.0)
Driver version          495.29.05
CUDA_HOME               /usr/local/cuda-11
Pillow                  8.4.0
torchvision             0.10.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.4
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[02/25 17:19:17] detectron2 INFO: Command line arguments: Namespace(config_file='configs/sceneflow/semantic-segmentation/maskformer2stereo_R50_bs16_90k.yaml', dist_url='tcp://127.0.0.1:65530', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[02/25 17:19:17] detectron2 INFO: Contents of args.config_file=configs/sceneflow/semantic-segmentation/maskformer2stereo_R50_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBase-SceneFlow-SemanticSegmentationStereo.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMaskFormerStereo[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMaskFormerHead[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m48[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mMASK_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mGN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;242m# pixel decoder[39m
[38;5;15m    [39m[38;5;197mPIXEL_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMSDeformAttnPixelDecoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mDEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mTRANSFORMER_ENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m  [39m[38;5;197mMASK_FORMER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mTRANSFORMER_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMultiScaleMaskedTransformerDecoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mTRANSFORMER_IN_FEATURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmulti_scale_pixel_decoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mDEEP_SUPERVISION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m    [39m[38;5;197mNO_OBJECT_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mCLASS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mMASK_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;197mDICE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mSEG_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mHIDDEN_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNUM_OBJECT_QUERIES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m48[39m
[38;5;15m    [39m[38;5;197mNHEADS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;197mDROPOUT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mDIM_FEEDFORWARD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;197mENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPRE_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mENFORCE_INPUT_PROJ[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mDEC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 9 decoder layers, add one for the loss on learnable query[39m
[38;5;15m    [39m[38;5;197mTRAIN_NUM_POINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12544[39m
[38;5;15m    [39m[38;5;197mOVERSAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3.0[39m
[38;5;15m    [39m[38;5;197mIMPORTANCE_SAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.75[39m
[38;5;15m    [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mSEMANTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m      [39m[38;5;197mINSTANCE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m      [39m[38;5;197mPANOPTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m      [39m[38;5;197mOVERLAP_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.8[39m
[38;5;15m      [39m[38;5;197mOBJECT_MASK_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.8[39m

[02/25 17:19:17] detectron2.utils.env INFO: Using a generated random seed 17297351
[02/25 17:19:19] detectron2.engine.defaults INFO: Model:
MaskFormerStereo(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(4096, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(48, 256)
      (query_embed): Embedding(48, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=49, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (refinement_layer): DispRefineLayer(
    (conv2d_feature): Conv2d(
      257, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
      (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
    )
    (residual_atrous_blocks): ModuleList(
      (0): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same, dilation=(2, 2)
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (2): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same, dilation=(4, 4)
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (3): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same, dilation=(8, 8)
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (4): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (5): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
    )
    (conv2d_out): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (criterion): Criterion SetCriterionStereo
      matcher: Matcher FixedMatcher
      losses: ['labels', 'masks', 'segs']
      weight_dict: {'loss_mask': 5.0, 'loss_ce': 0.0, 'loss_dice': 1.0, 'loss_seg': 0.1, 'loss_mask_0': 5.0, 'loss_ce_0': 0.0, 'loss_dice_0': 1.0, 'loss_mask_1': 5.0, 'loss_ce_1': 0.0, 'loss_dice_1': 1.0, 'loss_mask_2': 5.0, 'loss_ce_2': 0.0, 'loss_dice_2': 1.0}
      num_classes: 48
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
)
[02/25 17:19:19] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in training: [RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[256, 512], single_category_max_area=1.0, ignored_category=0)]
[02/25 17:19:24] detectron2.data.build INFO: Using training sampler TrainingSampler
[02/25 17:19:25] detectron2.data.common INFO: Serializing 35454 elements to byte tensors and concatenating them all ...
[02/25 17:19:25] detectron2.data.common INFO: Serialized dataset takes 10.76 MiB
[02/25 17:19:25] fvcore.common.checkpoint INFO: [Checkpointer] Loading from detectron2://ImageNetPretrained/torchvision/R-50.pkl ...
[02/25 17:19:25] fvcore.common.checkpoint INFO: Reading a file from 'torchvision'
[02/25 17:19:25] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint                                                               | Shapes                                          |
|:------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.*      | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
[02/25 17:19:26] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34mrefinement_layer.conv2d_feature.norm.{bias, weight}[0m
[34mrefinement_layer.conv2d_feature.{bias, weight}[0m
[34mrefinement_layer.conv2d_out.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.0.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.0.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.1.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.1.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.2.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.2.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.3.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.3.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.4.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.4.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.5.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.5.conv1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[02/25 17:19:26] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[02/25 17:19:26] detectron2.engine.train_loop INFO: Starting training from iteration 0
[02/25 17:19:37] detectron2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/home/nstarli/detectron2/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/home/nstarli/detectron2/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/home/nstarli/detectron2/detectron2/engine/train_loop.py", line 395, in run_step
    loss_dict = self.model(data)
  File "/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 799, in forward
    output = self.module(*inputs[0], **kwargs[0])
  File "/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/nstarli/Mask2Former/mask2former/maskformer_model_stereo.py", line 754, in forward
    outputs['pred_seg'] = self.refinement_layer(features['res2'], outputs['pred_seg'])
  File "/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/nstarli/Mask2Former/mask2former/maskformer_model_stereo.py", line 518, in forward
    output = self.conv2d_feature(
  File "/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/nstarli/detectron2/detectron2/layers/wrappers.py", line 106, in forward
    x = F.conv2d(
RuntimeError: Given groups=1, weight of size [256, 257, 3, 3], expected input[4, 513, 64, 128] to have 257 channels, but got 513 channels instead
[02/25 17:19:37] detectron2.engine.hooks INFO: Total training time: 0:00:11 (0:00:00 on hooks)
[02/25 17:21:20] detectron2 INFO: Rank of current process: 1. World size: 4
[02/25 17:21:25] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/home/nstarli/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.5
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             Tesla V100-SXM2-32GB (arch=7.0)
Driver version          495.29.05
CUDA_HOME               /usr/local/cuda-11
Pillow                  8.4.0
torchvision             0.10.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.4
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[02/25 17:21:25] detectron2 INFO: Command line arguments: Namespace(config_file='configs/sceneflow/semantic-segmentation/maskformer2stereo_R50_bs16_90k.yaml', dist_url='tcp://127.0.0.1:65530', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[02/25 17:21:25] detectron2 INFO: Contents of args.config_file=configs/sceneflow/semantic-segmentation/maskformer2stereo_R50_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBase-SceneFlow-SemanticSegmentationStereo.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMaskFormerStereo[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMaskFormerHead[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m48[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mMASK_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mGN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;242m# pixel decoder[39m
[38;5;15m    [39m[38;5;197mPIXEL_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMSDeformAttnPixelDecoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mDEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mTRANSFORMER_ENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m  [39m[38;5;197mMASK_FORMER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mTRANSFORMER_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMultiScaleMaskedTransformerDecoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mTRANSFORMER_IN_FEATURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmulti_scale_pixel_decoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mDEEP_SUPERVISION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m    [39m[38;5;197mNO_OBJECT_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mCLASS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mMASK_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;197mDICE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mSEG_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mHIDDEN_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNUM_OBJECT_QUERIES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m48[39m
[38;5;15m    [39m[38;5;197mNHEADS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;197mDROPOUT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mDIM_FEEDFORWARD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;197mENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPRE_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mENFORCE_INPUT_PROJ[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mDEC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 9 decoder layers, add one for the loss on learnable query[39m
[38;5;15m    [39m[38;5;197mTRAIN_NUM_POINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12544[39m
[38;5;15m    [39m[38;5;197mOVERSAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3.0[39m
[38;5;15m    [39m[38;5;197mIMPORTANCE_SAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.75[39m
[38;5;15m    [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mSEMANTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m      [39m[38;5;197mINSTANCE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m      [39m[38;5;197mPANOPTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m      [39m[38;5;197mOVERLAP_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.8[39m
[38;5;15m      [39m[38;5;197mOBJECT_MASK_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.8[39m

[02/25 17:21:25] detectron2.utils.env INFO: Using a generated random seed 25502129
[02/25 17:21:27] detectron2.engine.defaults INFO: Model:
MaskFormerStereo(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(4096, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(48, 256)
      (query_embed): Embedding(48, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=49, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (refinement_layer): DispRefineLayer(
    (conv2d_feature): Conv2d(
      513, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
      (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
    )
    (residual_atrous_blocks): ModuleList(
      (0): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same, dilation=(2, 2)
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (2): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same, dilation=(4, 4)
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (3): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same, dilation=(8, 8)
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (4): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (5): BasicBlock(
        (conv1): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
    )
    (conv2d_out): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (criterion): Criterion SetCriterionStereo
      matcher: Matcher FixedMatcher
      losses: ['labels', 'masks', 'segs']
      weight_dict: {'loss_mask': 5.0, 'loss_ce': 0.0, 'loss_dice': 1.0, 'loss_seg': 0.1, 'loss_mask_0': 5.0, 'loss_ce_0': 0.0, 'loss_dice_0': 1.0, 'loss_mask_1': 5.0, 'loss_ce_1': 0.0, 'loss_dice_1': 1.0, 'loss_mask_2': 5.0, 'loss_ce_2': 0.0, 'loss_dice_2': 1.0}
      num_classes: 48
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
)
[02/25 17:21:27] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in training: [RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[256, 512], single_category_max_area=1.0, ignored_category=0)]
[02/25 17:21:33] detectron2.data.build INFO: Using training sampler TrainingSampler
[02/25 17:21:34] detectron2.data.common INFO: Serializing 35454 elements to byte tensors and concatenating them all ...
[02/25 17:21:34] detectron2.data.common INFO: Serialized dataset takes 10.76 MiB
[02/25 17:21:34] fvcore.common.checkpoint INFO: [Checkpointer] Loading from detectron2://ImageNetPretrained/torchvision/R-50.pkl ...
[02/25 17:21:34] fvcore.common.checkpoint INFO: Reading a file from 'torchvision'
[02/25 17:21:34] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint                                                               | Shapes                                          |
|:------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.*      | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
[02/25 17:21:35] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34mrefinement_layer.conv2d_feature.norm.{bias, weight}[0m
[34mrefinement_layer.conv2d_feature.{bias, weight}[0m
[34mrefinement_layer.conv2d_out.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.0.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.0.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.1.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.1.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.2.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.2.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.3.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.3.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.4.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.4.conv1.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.5.conv1.norm.{bias, weight}[0m
[34mrefinement_layer.residual_atrous_blocks.5.conv1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[02/25 17:21:35] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[02/25 17:21:35] detectron2.engine.train_loop INFO: Starting training from iteration 0
[02/25 18:10:06] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/25 18:10:07] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/25 18:10:07] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/25 18:10:22] mask2former INFO: Inference done 11/1093. Dataloading: 0.0052 s/iter. Inference: 0.2383 s/iter. Eval: 0.1616 s/iter. Total: 0.4050 s/iter. ETA=0:07:18
[02/25 18:10:27] mask2former INFO: Inference done 25/1093. Dataloading: 0.0066 s/iter. Inference: 0.2148 s/iter. Eval: 0.1512 s/iter. Total: 0.3727 s/iter. ETA=0:06:38
[02/25 18:10:32] mask2former INFO: Inference done 38/1093. Dataloading: 0.0064 s/iter. Inference: 0.2176 s/iter. Eval: 0.1594 s/iter. Total: 0.3835 s/iter. ETA=0:06:44
[02/25 18:10:37] mask2former INFO: Inference done 51/1093. Dataloading: 0.0065 s/iter. Inference: 0.2204 s/iter. Eval: 0.1575 s/iter. Total: 0.3845 s/iter. ETA=0:06:40
[02/25 18:10:42] mask2former INFO: Inference done 65/1093. Dataloading: 0.0064 s/iter. Inference: 0.2193 s/iter. Eval: 0.1540 s/iter. Total: 0.3798 s/iter. ETA=0:06:30
[02/25 18:10:47] mask2former INFO: Inference done 79/1093. Dataloading: 0.0064 s/iter. Inference: 0.2192 s/iter. Eval: 0.1515 s/iter. Total: 0.3772 s/iter. ETA=0:06:22
[02/25 18:10:52] mask2former INFO: Inference done 92/1093. Dataloading: 0.0066 s/iter. Inference: 0.2185 s/iter. Eval: 0.1547 s/iter. Total: 0.3798 s/iter. ETA=0:06:20
[02/25 18:10:57] mask2former INFO: Inference done 106/1093. Dataloading: 0.0066 s/iter. Inference: 0.2189 s/iter. Eval: 0.1537 s/iter. Total: 0.3792 s/iter. ETA=0:06:14
[02/25 18:11:02] mask2former INFO: Inference done 119/1093. Dataloading: 0.0068 s/iter. Inference: 0.2198 s/iter. Eval: 0.1533 s/iter. Total: 0.3801 s/iter. ETA=0:06:10
[02/25 18:11:08] mask2former INFO: Inference done 132/1093. Dataloading: 0.0069 s/iter. Inference: 0.2201 s/iter. Eval: 0.1552 s/iter. Total: 0.3823 s/iter. ETA=0:06:07
[02/25 18:11:13] mask2former INFO: Inference done 145/1093. Dataloading: 0.0070 s/iter. Inference: 0.2205 s/iter. Eval: 0.1558 s/iter. Total: 0.3834 s/iter. ETA=0:06:03
[02/25 18:11:18] mask2former INFO: Inference done 158/1093. Dataloading: 0.0069 s/iter. Inference: 0.2205 s/iter. Eval: 0.1568 s/iter. Total: 0.3843 s/iter. ETA=0:05:59
[02/25 18:11:23] mask2former INFO: Inference done 172/1093. Dataloading: 0.0069 s/iter. Inference: 0.2208 s/iter. Eval: 0.1548 s/iter. Total: 0.3826 s/iter. ETA=0:05:52
[02/25 18:11:28] mask2former INFO: Inference done 184/1093. Dataloading: 0.0070 s/iter. Inference: 0.2215 s/iter. Eval: 0.1566 s/iter. Total: 0.3852 s/iter. ETA=0:05:50
[02/25 18:11:33] mask2former INFO: Inference done 197/1093. Dataloading: 0.0071 s/iter. Inference: 0.2215 s/iter. Eval: 0.1566 s/iter. Total: 0.3853 s/iter. ETA=0:05:45
[02/25 18:11:38] mask2former INFO: Inference done 210/1093. Dataloading: 0.0071 s/iter. Inference: 0.2221 s/iter. Eval: 0.1571 s/iter. Total: 0.3864 s/iter. ETA=0:05:41
[02/25 18:11:44] mask2former INFO: Inference done 223/1093. Dataloading: 0.0073 s/iter. Inference: 0.2223 s/iter. Eval: 0.1576 s/iter. Total: 0.3873 s/iter. ETA=0:05:36
[02/25 18:11:49] mask2former INFO: Inference done 237/1093. Dataloading: 0.0073 s/iter. Inference: 0.2219 s/iter. Eval: 0.1579 s/iter. Total: 0.3873 s/iter. ETA=0:05:31
[02/25 18:11:54] mask2former INFO: Inference done 251/1093. Dataloading: 0.0074 s/iter. Inference: 0.2221 s/iter. Eval: 0.1572 s/iter. Total: 0.3868 s/iter. ETA=0:05:25
[02/25 18:11:59] mask2former INFO: Inference done 263/1093. Dataloading: 0.0075 s/iter. Inference: 0.2224 s/iter. Eval: 0.1586 s/iter. Total: 0.3886 s/iter. ETA=0:05:22
[02/25 18:12:05] mask2former INFO: Inference done 276/1093. Dataloading: 0.0074 s/iter. Inference: 0.2237 s/iter. Eval: 0.1577 s/iter. Total: 0.3890 s/iter. ETA=0:05:17
[02/25 18:12:10] mask2former INFO: Inference done 288/1093. Dataloading: 0.0075 s/iter. Inference: 0.2256 s/iter. Eval: 0.1585 s/iter. Total: 0.3917 s/iter. ETA=0:05:15
[02/25 18:12:15] mask2former INFO: Inference done 300/1093. Dataloading: 0.0076 s/iter. Inference: 0.2266 s/iter. Eval: 0.1588 s/iter. Total: 0.3931 s/iter. ETA=0:05:11
[02/25 18:12:20] mask2former INFO: Inference done 312/1093. Dataloading: 0.0075 s/iter. Inference: 0.2271 s/iter. Eval: 0.1596 s/iter. Total: 0.3943 s/iter. ETA=0:05:07
[02/25 18:12:25] mask2former INFO: Inference done 325/1093. Dataloading: 0.0075 s/iter. Inference: 0.2266 s/iter. Eval: 0.1596 s/iter. Total: 0.3939 s/iter. ETA=0:05:02
[02/25 18:12:30] mask2former INFO: Inference done 338/1093. Dataloading: 0.0075 s/iter. Inference: 0.2271 s/iter. Eval: 0.1591 s/iter. Total: 0.3938 s/iter. ETA=0:04:57
[02/25 18:12:35] mask2former INFO: Inference done 351/1093. Dataloading: 0.0075 s/iter. Inference: 0.2279 s/iter. Eval: 0.1581 s/iter. Total: 0.3936 s/iter. ETA=0:04:52
[02/25 18:12:40] mask2former INFO: Inference done 364/1093. Dataloading: 0.0075 s/iter. Inference: 0.2278 s/iter. Eval: 0.1582 s/iter. Total: 0.3936 s/iter. ETA=0:04:46
[02/25 18:12:46] mask2former INFO: Inference done 378/1093. Dataloading: 0.0076 s/iter. Inference: 0.2276 s/iter. Eval: 0.1582 s/iter. Total: 0.3936 s/iter. ETA=0:04:41
[02/25 18:12:51] mask2former INFO: Inference done 392/1093. Dataloading: 0.0075 s/iter. Inference: 0.2277 s/iter. Eval: 0.1577 s/iter. Total: 0.3931 s/iter. ETA=0:04:35
[02/25 18:12:57] mask2former INFO: Inference done 406/1093. Dataloading: 0.0076 s/iter. Inference: 0.2275 s/iter. Eval: 0.1575 s/iter. Total: 0.3928 s/iter. ETA=0:04:29
[02/25 18:13:02] mask2former INFO: Inference done 419/1093. Dataloading: 0.0076 s/iter. Inference: 0.2279 s/iter. Eval: 0.1578 s/iter. Total: 0.3934 s/iter. ETA=0:04:25
[02/25 18:13:07] mask2former INFO: Inference done 431/1093. Dataloading: 0.0077 s/iter. Inference: 0.2286 s/iter. Eval: 0.1584 s/iter. Total: 0.3948 s/iter. ETA=0:04:21
[02/25 18:13:13] mask2former INFO: Inference done 444/1093. Dataloading: 0.0077 s/iter. Inference: 0.2290 s/iter. Eval: 0.1582 s/iter. Total: 0.3949 s/iter. ETA=0:04:16
[02/25 18:13:18] mask2former INFO: Inference done 456/1093. Dataloading: 0.0080 s/iter. Inference: 0.2298 s/iter. Eval: 0.1580 s/iter. Total: 0.3959 s/iter. ETA=0:04:12
[02/25 18:13:23] mask2former INFO: Inference done 468/1093. Dataloading: 0.0080 s/iter. Inference: 0.2298 s/iter. Eval: 0.1587 s/iter. Total: 0.3966 s/iter. ETA=0:04:07
[02/25 18:13:28] mask2former INFO: Inference done 481/1093. Dataloading: 0.0080 s/iter. Inference: 0.2302 s/iter. Eval: 0.1581 s/iter. Total: 0.3964 s/iter. ETA=0:04:02
[02/25 18:13:33] mask2former INFO: Inference done 494/1093. Dataloading: 0.0079 s/iter. Inference: 0.2300 s/iter. Eval: 0.1584 s/iter. Total: 0.3963 s/iter. ETA=0:03:57
[02/25 18:13:38] mask2former INFO: Inference done 507/1093. Dataloading: 0.0079 s/iter. Inference: 0.2298 s/iter. Eval: 0.1589 s/iter. Total: 0.3967 s/iter. ETA=0:03:52
[02/25 18:13:43] mask2former INFO: Inference done 521/1093. Dataloading: 0.0079 s/iter. Inference: 0.2295 s/iter. Eval: 0.1584 s/iter. Total: 0.3959 s/iter. ETA=0:03:46
[02/25 18:13:49] mask2former INFO: Inference done 534/1093. Dataloading: 0.0081 s/iter. Inference: 0.2296 s/iter. Eval: 0.1582 s/iter. Total: 0.3960 s/iter. ETA=0:03:41
[02/25 18:13:54] mask2former INFO: Inference done 548/1093. Dataloading: 0.0080 s/iter. Inference: 0.2290 s/iter. Eval: 0.1582 s/iter. Total: 0.3953 s/iter. ETA=0:03:35
[02/25 18:13:59] mask2former INFO: Inference done 561/1093. Dataloading: 0.0080 s/iter. Inference: 0.2289 s/iter. Eval: 0.1583 s/iter. Total: 0.3953 s/iter. ETA=0:03:30
[02/25 18:14:04] mask2former INFO: Inference done 574/1093. Dataloading: 0.0080 s/iter. Inference: 0.2291 s/iter. Eval: 0.1579 s/iter. Total: 0.3951 s/iter. ETA=0:03:25
[02/25 18:14:09] mask2former INFO: Inference done 588/1093. Dataloading: 0.0079 s/iter. Inference: 0.2287 s/iter. Eval: 0.1580 s/iter. Total: 0.3947 s/iter. ETA=0:03:19
[02/25 18:14:14] mask2former INFO: Inference done 601/1093. Dataloading: 0.0080 s/iter. Inference: 0.2287 s/iter. Eval: 0.1578 s/iter. Total: 0.3946 s/iter. ETA=0:03:14
[02/25 18:14:20] mask2former INFO: Inference done 615/1093. Dataloading: 0.0080 s/iter. Inference: 0.2289 s/iter. Eval: 0.1571 s/iter. Total: 0.3941 s/iter. ETA=0:03:08
[02/25 18:14:25] mask2former INFO: Inference done 629/1093. Dataloading: 0.0080 s/iter. Inference: 0.2287 s/iter. Eval: 0.1569 s/iter. Total: 0.3937 s/iter. ETA=0:03:02
[02/25 18:14:30] mask2former INFO: Inference done 644/1093. Dataloading: 0.0080 s/iter. Inference: 0.2285 s/iter. Eval: 0.1564 s/iter. Total: 0.3930 s/iter. ETA=0:02:56
[02/25 18:14:35] mask2former INFO: Inference done 657/1093. Dataloading: 0.0080 s/iter. Inference: 0.2284 s/iter. Eval: 0.1563 s/iter. Total: 0.3928 s/iter. ETA=0:02:51
[02/25 18:14:40] mask2former INFO: Inference done 669/1093. Dataloading: 0.0081 s/iter. Inference: 0.2291 s/iter. Eval: 0.1562 s/iter. Total: 0.3935 s/iter. ETA=0:02:46
[02/25 18:14:46] mask2former INFO: Inference done 683/1093. Dataloading: 0.0081 s/iter. Inference: 0.2293 s/iter. Eval: 0.1555 s/iter. Total: 0.3929 s/iter. ETA=0:02:41
[02/25 18:14:51] mask2former INFO: Inference done 697/1093. Dataloading: 0.0080 s/iter. Inference: 0.2293 s/iter. Eval: 0.1553 s/iter. Total: 0.3928 s/iter. ETA=0:02:35
[02/25 18:14:56] mask2former INFO: Inference done 710/1093. Dataloading: 0.0080 s/iter. Inference: 0.2295 s/iter. Eval: 0.1555 s/iter. Total: 0.3932 s/iter. ETA=0:02:30
[02/25 18:15:01] mask2former INFO: Inference done 723/1093. Dataloading: 0.0080 s/iter. Inference: 0.2292 s/iter. Eval: 0.1559 s/iter. Total: 0.3932 s/iter. ETA=0:02:25
[02/25 18:15:07] mask2former INFO: Inference done 737/1093. Dataloading: 0.0080 s/iter. Inference: 0.2290 s/iter. Eval: 0.1558 s/iter. Total: 0.3929 s/iter. ETA=0:02:19
[02/25 18:15:12] mask2former INFO: Inference done 750/1093. Dataloading: 0.0080 s/iter. Inference: 0.2289 s/iter. Eval: 0.1561 s/iter. Total: 0.3931 s/iter. ETA=0:02:14
[02/25 18:15:17] mask2former INFO: Inference done 762/1093. Dataloading: 0.0080 s/iter. Inference: 0.2291 s/iter. Eval: 0.1566 s/iter. Total: 0.3938 s/iter. ETA=0:02:10
[02/25 18:15:22] mask2former INFO: Inference done 775/1093. Dataloading: 0.0080 s/iter. Inference: 0.2286 s/iter. Eval: 0.1571 s/iter. Total: 0.3938 s/iter. ETA=0:02:05
[02/25 18:15:28] mask2former INFO: Inference done 787/1093. Dataloading: 0.0080 s/iter. Inference: 0.2287 s/iter. Eval: 0.1575 s/iter. Total: 0.3944 s/iter. ETA=0:02:00
[02/25 18:15:33] mask2former INFO: Inference done 801/1093. Dataloading: 0.0080 s/iter. Inference: 0.2290 s/iter. Eval: 0.1572 s/iter. Total: 0.3943 s/iter. ETA=0:01:55
[02/25 18:15:38] mask2former INFO: Inference done 813/1093. Dataloading: 0.0080 s/iter. Inference: 0.2293 s/iter. Eval: 0.1574 s/iter. Total: 0.3948 s/iter. ETA=0:01:50
[02/25 18:15:43] mask2former INFO: Inference done 826/1093. Dataloading: 0.0080 s/iter. Inference: 0.2294 s/iter. Eval: 0.1575 s/iter. Total: 0.3950 s/iter. ETA=0:01:45
[02/25 18:15:49] mask2former INFO: Inference done 839/1093. Dataloading: 0.0081 s/iter. Inference: 0.2293 s/iter. Eval: 0.1576 s/iter. Total: 0.3951 s/iter. ETA=0:01:40
[02/25 18:15:54] mask2former INFO: Inference done 851/1093. Dataloading: 0.0081 s/iter. Inference: 0.2294 s/iter. Eval: 0.1581 s/iter. Total: 0.3958 s/iter. ETA=0:01:35
[02/25 18:15:59] mask2former INFO: Inference done 863/1093. Dataloading: 0.0082 s/iter. Inference: 0.2294 s/iter. Eval: 0.1585 s/iter. Total: 0.3962 s/iter. ETA=0:01:31
[02/25 18:16:04] mask2former INFO: Inference done 877/1093. Dataloading: 0.0081 s/iter. Inference: 0.2291 s/iter. Eval: 0.1583 s/iter. Total: 0.3957 s/iter. ETA=0:01:25
[02/25 18:16:10] mask2former INFO: Inference done 891/1093. Dataloading: 0.0081 s/iter. Inference: 0.2291 s/iter. Eval: 0.1582 s/iter. Total: 0.3955 s/iter. ETA=0:01:19
[02/25 18:16:15] mask2former INFO: Inference done 906/1093. Dataloading: 0.0081 s/iter. Inference: 0.2290 s/iter. Eval: 0.1577 s/iter. Total: 0.3949 s/iter. ETA=0:01:13
[02/25 18:16:20] mask2former INFO: Inference done 918/1093. Dataloading: 0.0081 s/iter. Inference: 0.2290 s/iter. Eval: 0.1580 s/iter. Total: 0.3952 s/iter. ETA=0:01:09
[02/25 18:16:25] mask2former INFO: Inference done 931/1093. Dataloading: 0.0081 s/iter. Inference: 0.2288 s/iter. Eval: 0.1582 s/iter. Total: 0.3951 s/iter. ETA=0:01:04
[02/25 18:16:30] mask2former INFO: Inference done 945/1093. Dataloading: 0.0080 s/iter. Inference: 0.2287 s/iter. Eval: 0.1578 s/iter. Total: 0.3947 s/iter. ETA=0:00:58
[02/25 18:16:35] mask2former INFO: Inference done 959/1093. Dataloading: 0.0080 s/iter. Inference: 0.2285 s/iter. Eval: 0.1579 s/iter. Total: 0.3945 s/iter. ETA=0:00:52
[02/25 18:16:41] mask2former INFO: Inference done 972/1093. Dataloading: 0.0080 s/iter. Inference: 0.2282 s/iter. Eval: 0.1582 s/iter. Total: 0.3945 s/iter. ETA=0:00:47
[02/25 18:16:46] mask2former INFO: Inference done 987/1093. Dataloading: 0.0080 s/iter. Inference: 0.2280 s/iter. Eval: 0.1577 s/iter. Total: 0.3939 s/iter. ETA=0:00:41
[02/25 18:16:51] mask2former INFO: Inference done 1001/1093. Dataloading: 0.0080 s/iter. Inference: 0.2279 s/iter. Eval: 0.1576 s/iter. Total: 0.3937 s/iter. ETA=0:00:36
[02/25 18:16:57] mask2former INFO: Inference done 1016/1093. Dataloading: 0.0080 s/iter. Inference: 0.2278 s/iter. Eval: 0.1572 s/iter. Total: 0.3931 s/iter. ETA=0:00:30
[02/25 18:17:02] mask2former INFO: Inference done 1029/1093. Dataloading: 0.0079 s/iter. Inference: 0.2279 s/iter. Eval: 0.1574 s/iter. Total: 0.3933 s/iter. ETA=0:00:25
[02/25 18:17:07] mask2former INFO: Inference done 1042/1093. Dataloading: 0.0079 s/iter. Inference: 0.2277 s/iter. Eval: 0.1576 s/iter. Total: 0.3934 s/iter. ETA=0:00:20
[02/25 18:17:12] mask2former INFO: Inference done 1054/1093. Dataloading: 0.0079 s/iter. Inference: 0.2279 s/iter. Eval: 0.1579 s/iter. Total: 0.3938 s/iter. ETA=0:00:15
[02/25 18:17:18] mask2former INFO: Inference done 1066/1093. Dataloading: 0.0079 s/iter. Inference: 0.2280 s/iter. Eval: 0.1583 s/iter. Total: 0.3943 s/iter. ETA=0:00:10
[02/25 18:17:23] mask2former INFO: Inference done 1078/1093. Dataloading: 0.0079 s/iter. Inference: 0.2283 s/iter. Eval: 0.1583 s/iter. Total: 0.3946 s/iter. ETA=0:00:05
[02/25 18:17:28] mask2former INFO: Inference done 1091/1093. Dataloading: 0.0079 s/iter. Inference: 0.2282 s/iter. Eval: 0.1585 s/iter. Total: 0.3947 s/iter. ETA=0:00:00
[02/25 19:05:58] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/25 19:05:58] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/25 19:05:58] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/25 19:06:13] mask2former INFO: Inference done 11/1093. Dataloading: 0.0041 s/iter. Inference: 0.2110 s/iter. Eval: 0.1477 s/iter. Total: 0.3628 s/iter. ETA=0:06:32
[02/25 19:06:18] mask2former INFO: Inference done 25/1093. Dataloading: 0.0064 s/iter. Inference: 0.2247 s/iter. Eval: 0.1364 s/iter. Total: 0.3676 s/iter. ETA=0:06:32
[02/25 19:06:23] mask2former INFO: Inference done 38/1093. Dataloading: 0.0076 s/iter. Inference: 0.2227 s/iter. Eval: 0.1488 s/iter. Total: 0.3792 s/iter. ETA=0:06:40
[02/25 19:06:28] mask2former INFO: Inference done 52/1093. Dataloading: 0.0072 s/iter. Inference: 0.2234 s/iter. Eval: 0.1468 s/iter. Total: 0.3776 s/iter. ETA=0:06:33
[02/25 19:06:33] mask2former INFO: Inference done 66/1093. Dataloading: 0.0071 s/iter. Inference: 0.2215 s/iter. Eval: 0.1444 s/iter. Total: 0.3731 s/iter. ETA=0:06:23
[02/25 19:06:39] mask2former INFO: Inference done 80/1093. Dataloading: 0.0070 s/iter. Inference: 0.2227 s/iter. Eval: 0.1446 s/iter. Total: 0.3744 s/iter. ETA=0:06:19
[02/25 19:06:44] mask2former INFO: Inference done 94/1093. Dataloading: 0.0073 s/iter. Inference: 0.2216 s/iter. Eval: 0.1431 s/iter. Total: 0.3721 s/iter. ETA=0:06:11
[02/25 19:06:49] mask2former INFO: Inference done 107/1093. Dataloading: 0.0076 s/iter. Inference: 0.2215 s/iter. Eval: 0.1451 s/iter. Total: 0.3743 s/iter. ETA=0:06:09
[02/25 19:06:54] mask2former INFO: Inference done 121/1093. Dataloading: 0.0079 s/iter. Inference: 0.2204 s/iter. Eval: 0.1441 s/iter. Total: 0.3726 s/iter. ETA=0:06:02
[02/25 19:06:59] mask2former INFO: Inference done 134/1093. Dataloading: 0.0079 s/iter. Inference: 0.2204 s/iter. Eval: 0.1466 s/iter. Total: 0.3750 s/iter. ETA=0:05:59
[02/25 19:07:04] mask2former INFO: Inference done 147/1093. Dataloading: 0.0080 s/iter. Inference: 0.2212 s/iter. Eval: 0.1484 s/iter. Total: 0.3778 s/iter. ETA=0:05:57
[02/25 19:07:09] mask2former INFO: Inference done 160/1093. Dataloading: 0.0081 s/iter. Inference: 0.2240 s/iter. Eval: 0.1473 s/iter. Total: 0.3795 s/iter. ETA=0:05:54
[02/25 19:07:15] mask2former INFO: Inference done 175/1093. Dataloading: 0.0080 s/iter. Inference: 0.2218 s/iter. Eval: 0.1470 s/iter. Total: 0.3769 s/iter. ETA=0:05:45
[02/25 19:07:20] mask2former INFO: Inference done 189/1093. Dataloading: 0.0080 s/iter. Inference: 0.2216 s/iter. Eval: 0.1459 s/iter. Total: 0.3757 s/iter. ETA=0:05:39
[02/25 19:07:25] mask2former INFO: Inference done 203/1093. Dataloading: 0.0079 s/iter. Inference: 0.2224 s/iter. Eval: 0.1461 s/iter. Total: 0.3765 s/iter. ETA=0:05:35
[02/25 19:07:30] mask2former INFO: Inference done 217/1093. Dataloading: 0.0078 s/iter. Inference: 0.2225 s/iter. Eval: 0.1462 s/iter. Total: 0.3765 s/iter. ETA=0:05:29
[02/25 19:07:35] mask2former INFO: Inference done 231/1093. Dataloading: 0.0077 s/iter. Inference: 0.2225 s/iter. Eval: 0.1456 s/iter. Total: 0.3760 s/iter. ETA=0:05:24
[02/25 19:07:41] mask2former INFO: Inference done 246/1093. Dataloading: 0.0076 s/iter. Inference: 0.2215 s/iter. Eval: 0.1448 s/iter. Total: 0.3740 s/iter. ETA=0:05:16
[02/25 19:07:46] mask2former INFO: Inference done 259/1093. Dataloading: 0.0076 s/iter. Inference: 0.2219 s/iter. Eval: 0.1460 s/iter. Total: 0.3757 s/iter. ETA=0:05:13
[02/25 19:07:51] mask2former INFO: Inference done 273/1093. Dataloading: 0.0077 s/iter. Inference: 0.2223 s/iter. Eval: 0.1459 s/iter. Total: 0.3760 s/iter. ETA=0:05:08
[02/25 19:07:56] mask2former INFO: Inference done 287/1093. Dataloading: 0.0077 s/iter. Inference: 0.2222 s/iter. Eval: 0.1457 s/iter. Total: 0.3756 s/iter. ETA=0:05:02
[02/25 19:08:02] mask2former INFO: Inference done 301/1093. Dataloading: 0.0076 s/iter. Inference: 0.2222 s/iter. Eval: 0.1458 s/iter. Total: 0.3757 s/iter. ETA=0:04:57
[02/25 19:08:07] mask2former INFO: Inference done 315/1093. Dataloading: 0.0076 s/iter. Inference: 0.2222 s/iter. Eval: 0.1457 s/iter. Total: 0.3756 s/iter. ETA=0:04:52
[02/25 19:08:12] mask2former INFO: Inference done 329/1093. Dataloading: 0.0075 s/iter. Inference: 0.2219 s/iter. Eval: 0.1462 s/iter. Total: 0.3757 s/iter. ETA=0:04:47
[02/25 19:08:17] mask2former INFO: Inference done 343/1093. Dataloading: 0.0075 s/iter. Inference: 0.2219 s/iter. Eval: 0.1457 s/iter. Total: 0.3753 s/iter. ETA=0:04:41
[02/25 19:08:22] mask2former INFO: Inference done 356/1093. Dataloading: 0.0076 s/iter. Inference: 0.2217 s/iter. Eval: 0.1466 s/iter. Total: 0.3760 s/iter. ETA=0:04:37
[02/25 19:08:27] mask2former INFO: Inference done 370/1093. Dataloading: 0.0076 s/iter. Inference: 0.2213 s/iter. Eval: 0.1463 s/iter. Total: 0.3754 s/iter. ETA=0:04:31
[02/25 19:08:33] mask2former INFO: Inference done 383/1093. Dataloading: 0.0077 s/iter. Inference: 0.2216 s/iter. Eval: 0.1470 s/iter. Total: 0.3764 s/iter. ETA=0:04:27
[02/25 19:08:38] mask2former INFO: Inference done 395/1093. Dataloading: 0.0077 s/iter. Inference: 0.2222 s/iter. Eval: 0.1480 s/iter. Total: 0.3780 s/iter. ETA=0:04:23
[02/25 19:08:43] mask2former INFO: Inference done 408/1093. Dataloading: 0.0077 s/iter. Inference: 0.2224 s/iter. Eval: 0.1484 s/iter. Total: 0.3786 s/iter. ETA=0:04:19
[02/25 19:08:48] mask2former INFO: Inference done 421/1093. Dataloading: 0.0077 s/iter. Inference: 0.2227 s/iter. Eval: 0.1488 s/iter. Total: 0.3792 s/iter. ETA=0:04:14
[02/25 19:08:53] mask2former INFO: Inference done 435/1093. Dataloading: 0.0077 s/iter. Inference: 0.2221 s/iter. Eval: 0.1491 s/iter. Total: 0.3790 s/iter. ETA=0:04:09
[02/25 19:08:58] mask2former INFO: Inference done 449/1093. Dataloading: 0.0077 s/iter. Inference: 0.2218 s/iter. Eval: 0.1488 s/iter. Total: 0.3784 s/iter. ETA=0:04:03
[02/25 19:09:04] mask2former INFO: Inference done 461/1093. Dataloading: 0.0077 s/iter. Inference: 0.2230 s/iter. Eval: 0.1489 s/iter. Total: 0.3797 s/iter. ETA=0:03:59
[02/25 19:09:09] mask2former INFO: Inference done 474/1093. Dataloading: 0.0078 s/iter. Inference: 0.2231 s/iter. Eval: 0.1494 s/iter. Total: 0.3804 s/iter. ETA=0:03:55
[02/25 19:09:14] mask2former INFO: Inference done 489/1093. Dataloading: 0.0077 s/iter. Inference: 0.2230 s/iter. Eval: 0.1488 s/iter. Total: 0.3796 s/iter. ETA=0:03:49
[02/25 19:09:19] mask2former INFO: Inference done 501/1093. Dataloading: 0.0078 s/iter. Inference: 0.2234 s/iter. Eval: 0.1496 s/iter. Total: 0.3809 s/iter. ETA=0:03:45
[02/25 19:09:24] mask2former INFO: Inference done 514/1093. Dataloading: 0.0078 s/iter. Inference: 0.2239 s/iter. Eval: 0.1493 s/iter. Total: 0.3811 s/iter. ETA=0:03:40
[02/25 19:09:30] mask2former INFO: Inference done 528/1093. Dataloading: 0.0078 s/iter. Inference: 0.2235 s/iter. Eval: 0.1493 s/iter. Total: 0.3807 s/iter. ETA=0:03:35
[02/25 19:09:35] mask2former INFO: Inference done 541/1093. Dataloading: 0.0078 s/iter. Inference: 0.2236 s/iter. Eval: 0.1494 s/iter. Total: 0.3809 s/iter. ETA=0:03:30
[02/25 19:09:40] mask2former INFO: Inference done 555/1093. Dataloading: 0.0077 s/iter. Inference: 0.2238 s/iter. Eval: 0.1494 s/iter. Total: 0.3810 s/iter. ETA=0:03:24
[02/25 19:09:45] mask2former INFO: Inference done 569/1093. Dataloading: 0.0077 s/iter. Inference: 0.2239 s/iter. Eval: 0.1493 s/iter. Total: 0.3810 s/iter. ETA=0:03:19
[02/25 19:09:51] mask2former INFO: Inference done 581/1093. Dataloading: 0.0077 s/iter. Inference: 0.2245 s/iter. Eval: 0.1500 s/iter. Total: 0.3822 s/iter. ETA=0:03:15
[02/25 19:09:56] mask2former INFO: Inference done 594/1093. Dataloading: 0.0077 s/iter. Inference: 0.2248 s/iter. Eval: 0.1504 s/iter. Total: 0.3829 s/iter. ETA=0:03:11
[02/25 19:10:01] mask2former INFO: Inference done 608/1093. Dataloading: 0.0077 s/iter. Inference: 0.2245 s/iter. Eval: 0.1503 s/iter. Total: 0.3826 s/iter. ETA=0:03:05
[02/25 19:10:07] mask2former INFO: Inference done 621/1093. Dataloading: 0.0077 s/iter. Inference: 0.2245 s/iter. Eval: 0.1509 s/iter. Total: 0.3832 s/iter. ETA=0:03:00
[02/25 19:10:12] mask2former INFO: Inference done 635/1093. Dataloading: 0.0077 s/iter. Inference: 0.2246 s/iter. Eval: 0.1508 s/iter. Total: 0.3833 s/iter. ETA=0:02:55
[02/25 19:10:17] mask2former INFO: Inference done 648/1093. Dataloading: 0.0077 s/iter. Inference: 0.2247 s/iter. Eval: 0.1512 s/iter. Total: 0.3837 s/iter. ETA=0:02:50
[02/25 19:10:23] mask2former INFO: Inference done 662/1093. Dataloading: 0.0077 s/iter. Inference: 0.2249 s/iter. Eval: 0.1510 s/iter. Total: 0.3838 s/iter. ETA=0:02:45
[02/25 19:10:28] mask2former INFO: Inference done 676/1093. Dataloading: 0.0077 s/iter. Inference: 0.2248 s/iter. Eval: 0.1512 s/iter. Total: 0.3838 s/iter. ETA=0:02:40
[02/25 19:10:33] mask2former INFO: Inference done 690/1093. Dataloading: 0.0077 s/iter. Inference: 0.2248 s/iter. Eval: 0.1510 s/iter. Total: 0.3835 s/iter. ETA=0:02:34
[02/25 19:10:38] mask2former INFO: Inference done 704/1093. Dataloading: 0.0077 s/iter. Inference: 0.2248 s/iter. Eval: 0.1506 s/iter. Total: 0.3832 s/iter. ETA=0:02:29
[02/25 19:10:44] mask2former INFO: Inference done 716/1093. Dataloading: 0.0077 s/iter. Inference: 0.2253 s/iter. Eval: 0.1510 s/iter. Total: 0.3841 s/iter. ETA=0:02:24
[02/25 19:10:49] mask2former INFO: Inference done 728/1093. Dataloading: 0.0077 s/iter. Inference: 0.2257 s/iter. Eval: 0.1515 s/iter. Total: 0.3850 s/iter. ETA=0:02:20
[02/25 19:10:54] mask2former INFO: Inference done 742/1093. Dataloading: 0.0077 s/iter. Inference: 0.2257 s/iter. Eval: 0.1511 s/iter. Total: 0.3846 s/iter. ETA=0:02:15
[02/25 19:10:59] mask2former INFO: Inference done 756/1093. Dataloading: 0.0077 s/iter. Inference: 0.2258 s/iter. Eval: 0.1511 s/iter. Total: 0.3847 s/iter. ETA=0:02:09
[02/25 19:11:04] mask2former INFO: Inference done 768/1093. Dataloading: 0.0077 s/iter. Inference: 0.2261 s/iter. Eval: 0.1513 s/iter. Total: 0.3853 s/iter. ETA=0:02:05
[02/25 19:11:10] mask2former INFO: Inference done 781/1093. Dataloading: 0.0078 s/iter. Inference: 0.2259 s/iter. Eval: 0.1516 s/iter. Total: 0.3854 s/iter. ETA=0:02:00
[02/25 19:11:15] mask2former INFO: Inference done 794/1093. Dataloading: 0.0077 s/iter. Inference: 0.2262 s/iter. Eval: 0.1514 s/iter. Total: 0.3854 s/iter. ETA=0:01:55
[02/25 19:11:20] mask2former INFO: Inference done 807/1093. Dataloading: 0.0077 s/iter. Inference: 0.2261 s/iter. Eval: 0.1514 s/iter. Total: 0.3854 s/iter. ETA=0:01:50
[02/25 19:11:25] mask2former INFO: Inference done 819/1093. Dataloading: 0.0077 s/iter. Inference: 0.2262 s/iter. Eval: 0.1518 s/iter. Total: 0.3859 s/iter. ETA=0:01:45
[02/25 19:11:30] mask2former INFO: Inference done 831/1093. Dataloading: 0.0078 s/iter. Inference: 0.2261 s/iter. Eval: 0.1526 s/iter. Total: 0.3866 s/iter. ETA=0:01:41
[02/25 19:11:35] mask2former INFO: Inference done 844/1093. Dataloading: 0.0078 s/iter. Inference: 0.2262 s/iter. Eval: 0.1527 s/iter. Total: 0.3869 s/iter. ETA=0:01:36
[02/25 19:11:40] mask2former INFO: Inference done 857/1093. Dataloading: 0.0078 s/iter. Inference: 0.2259 s/iter. Eval: 0.1530 s/iter. Total: 0.3869 s/iter. ETA=0:01:31
[02/25 19:11:45] mask2former INFO: Inference done 870/1093. Dataloading: 0.0078 s/iter. Inference: 0.2258 s/iter. Eval: 0.1531 s/iter. Total: 0.3869 s/iter. ETA=0:01:26
[02/25 19:11:50] mask2former INFO: Inference done 884/1093. Dataloading: 0.0078 s/iter. Inference: 0.2259 s/iter. Eval: 0.1529 s/iter. Total: 0.3868 s/iter. ETA=0:01:20
[02/25 19:11:55] mask2former INFO: Inference done 897/1093. Dataloading: 0.0078 s/iter. Inference: 0.2260 s/iter. Eval: 0.1528 s/iter. Total: 0.3868 s/iter. ETA=0:01:15
[02/25 19:12:01] mask2former INFO: Inference done 910/1093. Dataloading: 0.0078 s/iter. Inference: 0.2262 s/iter. Eval: 0.1528 s/iter. Total: 0.3870 s/iter. ETA=0:01:10
[02/25 19:12:06] mask2former INFO: Inference done 923/1093. Dataloading: 0.0079 s/iter. Inference: 0.2266 s/iter. Eval: 0.1529 s/iter. Total: 0.3874 s/iter. ETA=0:01:05
[02/25 19:12:11] mask2former INFO: Inference done 936/1093. Dataloading: 0.0079 s/iter. Inference: 0.2267 s/iter. Eval: 0.1528 s/iter. Total: 0.3875 s/iter. ETA=0:01:00
[02/25 19:12:17] mask2former INFO: Inference done 950/1093. Dataloading: 0.0078 s/iter. Inference: 0.2267 s/iter. Eval: 0.1527 s/iter. Total: 0.3874 s/iter. ETA=0:00:55
[02/25 19:12:22] mask2former INFO: Inference done 962/1093. Dataloading: 0.0078 s/iter. Inference: 0.2270 s/iter. Eval: 0.1529 s/iter. Total: 0.3879 s/iter. ETA=0:00:50
[02/25 19:12:27] mask2former INFO: Inference done 976/1093. Dataloading: 0.0078 s/iter. Inference: 0.2268 s/iter. Eval: 0.1530 s/iter. Total: 0.3877 s/iter. ETA=0:00:45
[02/25 19:12:32] mask2former INFO: Inference done 990/1093. Dataloading: 0.0078 s/iter. Inference: 0.2266 s/iter. Eval: 0.1529 s/iter. Total: 0.3874 s/iter. ETA=0:00:39
[02/25 19:12:37] mask2former INFO: Inference done 1003/1093. Dataloading: 0.0078 s/iter. Inference: 0.2268 s/iter. Eval: 0.1528 s/iter. Total: 0.3875 s/iter. ETA=0:00:34
[02/25 19:12:42] mask2former INFO: Inference done 1016/1093. Dataloading: 0.0078 s/iter. Inference: 0.2270 s/iter. Eval: 0.1527 s/iter. Total: 0.3877 s/iter. ETA=0:00:29
[02/25 19:12:47] mask2former INFO: Inference done 1029/1093. Dataloading: 0.0078 s/iter. Inference: 0.2272 s/iter. Eval: 0.1526 s/iter. Total: 0.3877 s/iter. ETA=0:00:24
[02/25 19:12:53] mask2former INFO: Inference done 1043/1093. Dataloading: 0.0078 s/iter. Inference: 0.2272 s/iter. Eval: 0.1525 s/iter. Total: 0.3876 s/iter. ETA=0:00:19
[02/25 19:12:58] mask2former INFO: Inference done 1055/1093. Dataloading: 0.0078 s/iter. Inference: 0.2274 s/iter. Eval: 0.1527 s/iter. Total: 0.3881 s/iter. ETA=0:00:14
[02/25 19:13:03] mask2former INFO: Inference done 1068/1093. Dataloading: 0.0078 s/iter. Inference: 0.2274 s/iter. Eval: 0.1530 s/iter. Total: 0.3883 s/iter. ETA=0:00:09
[02/25 19:13:08] mask2former INFO: Inference done 1081/1093. Dataloading: 0.0078 s/iter. Inference: 0.2273 s/iter. Eval: 0.1532 s/iter. Total: 0.3884 s/iter. ETA=0:00:04
[02/25 20:01:49] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/25 20:01:49] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/25 20:01:49] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/25 20:02:04] mask2former INFO: Inference done 11/1093. Dataloading: 0.0053 s/iter. Inference: 0.2097 s/iter. Eval: 0.1774 s/iter. Total: 0.3924 s/iter. ETA=0:07:04
[02/25 20:02:10] mask2former INFO: Inference done 25/1093. Dataloading: 0.0076 s/iter. Inference: 0.2246 s/iter. Eval: 0.1484 s/iter. Total: 0.3807 s/iter. ETA=0:06:46
[02/25 20:02:15] mask2former INFO: Inference done 38/1093. Dataloading: 0.0081 s/iter. Inference: 0.2237 s/iter. Eval: 0.1549 s/iter. Total: 0.3868 s/iter. ETA=0:06:48
[02/25 20:02:20] mask2former INFO: Inference done 51/1093. Dataloading: 0.0075 s/iter. Inference: 0.2293 s/iter. Eval: 0.1551 s/iter. Total: 0.3920 s/iter. ETA=0:06:48
[02/25 20:02:25] mask2former INFO: Inference done 63/1093. Dataloading: 0.0072 s/iter. Inference: 0.2328 s/iter. Eval: 0.1575 s/iter. Total: 0.3976 s/iter. ETA=0:06:49
[02/25 20:02:30] mask2former INFO: Inference done 76/1093. Dataloading: 0.0078 s/iter. Inference: 0.2345 s/iter. Eval: 0.1565 s/iter. Total: 0.3989 s/iter. ETA=0:06:45
[02/25 20:02:35] mask2former INFO: Inference done 89/1093. Dataloading: 0.0077 s/iter. Inference: 0.2338 s/iter. Eval: 0.1557 s/iter. Total: 0.3974 s/iter. ETA=0:06:38
[02/25 20:02:40] mask2former INFO: Inference done 101/1093. Dataloading: 0.0076 s/iter. Inference: 0.2356 s/iter. Eval: 0.1567 s/iter. Total: 0.4000 s/iter. ETA=0:06:36
[02/25 20:02:46] mask2former INFO: Inference done 114/1093. Dataloading: 0.0076 s/iter. Inference: 0.2326 s/iter. Eval: 0.1584 s/iter. Total: 0.3988 s/iter. ETA=0:06:30
[02/25 20:02:51] mask2former INFO: Inference done 128/1093. Dataloading: 0.0074 s/iter. Inference: 0.2320 s/iter. Eval: 0.1572 s/iter. Total: 0.3967 s/iter. ETA=0:06:22
[02/25 20:02:56] mask2former INFO: Inference done 141/1093. Dataloading: 0.0073 s/iter. Inference: 0.2328 s/iter. Eval: 0.1565 s/iter. Total: 0.3968 s/iter. ETA=0:06:17
[02/25 20:03:01] mask2former INFO: Inference done 155/1093. Dataloading: 0.0073 s/iter. Inference: 0.2320 s/iter. Eval: 0.1539 s/iter. Total: 0.3933 s/iter. ETA=0:06:08
[02/25 20:03:06] mask2former INFO: Inference done 168/1093. Dataloading: 0.0076 s/iter. Inference: 0.2320 s/iter. Eval: 0.1532 s/iter. Total: 0.3929 s/iter. ETA=0:06:03
[02/25 20:03:11] mask2former INFO: Inference done 181/1093. Dataloading: 0.0078 s/iter. Inference: 0.2304 s/iter. Eval: 0.1540 s/iter. Total: 0.3923 s/iter. ETA=0:05:57
[02/25 20:03:16] mask2former INFO: Inference done 194/1093. Dataloading: 0.0077 s/iter. Inference: 0.2301 s/iter. Eval: 0.1547 s/iter. Total: 0.3926 s/iter. ETA=0:05:52
[02/25 20:03:21] mask2former INFO: Inference done 205/1093. Dataloading: 0.0076 s/iter. Inference: 0.2321 s/iter. Eval: 0.1570 s/iter. Total: 0.3969 s/iter. ETA=0:05:52
[02/25 20:03:27] mask2former INFO: Inference done 219/1093. Dataloading: 0.0077 s/iter. Inference: 0.2325 s/iter. Eval: 0.1557 s/iter. Total: 0.3961 s/iter. ETA=0:05:46
[02/25 20:03:32] mask2former INFO: Inference done 233/1093. Dataloading: 0.0078 s/iter. Inference: 0.2316 s/iter. Eval: 0.1546 s/iter. Total: 0.3941 s/iter. ETA=0:05:38
[02/25 20:03:37] mask2former INFO: Inference done 246/1093. Dataloading: 0.0077 s/iter. Inference: 0.2336 s/iter. Eval: 0.1528 s/iter. Total: 0.3942 s/iter. ETA=0:05:33
[02/25 20:03:42] mask2former INFO: Inference done 259/1093. Dataloading: 0.0078 s/iter. Inference: 0.2334 s/iter. Eval: 0.1535 s/iter. Total: 0.3948 s/iter. ETA=0:05:29
[02/25 20:03:47] mask2former INFO: Inference done 272/1093. Dataloading: 0.0079 s/iter. Inference: 0.2335 s/iter. Eval: 0.1532 s/iter. Total: 0.3948 s/iter. ETA=0:05:24
[02/25 20:03:53] mask2former INFO: Inference done 286/1093. Dataloading: 0.0079 s/iter. Inference: 0.2331 s/iter. Eval: 0.1529 s/iter. Total: 0.3940 s/iter. ETA=0:05:17
[02/25 20:03:58] mask2former INFO: Inference done 299/1093. Dataloading: 0.0078 s/iter. Inference: 0.2328 s/iter. Eval: 0.1539 s/iter. Total: 0.3946 s/iter. ETA=0:05:13
[02/25 20:04:03] mask2former INFO: Inference done 311/1093. Dataloading: 0.0079 s/iter. Inference: 0.2332 s/iter. Eval: 0.1555 s/iter. Total: 0.3967 s/iter. ETA=0:05:10
[02/25 20:04:09] mask2former INFO: Inference done 325/1093. Dataloading: 0.0079 s/iter. Inference: 0.2318 s/iter. Eval: 0.1556 s/iter. Total: 0.3954 s/iter. ETA=0:05:03
[02/25 20:04:14] mask2former INFO: Inference done 339/1093. Dataloading: 0.0079 s/iter. Inference: 0.2319 s/iter. Eval: 0.1548 s/iter. Total: 0.3947 s/iter. ETA=0:04:57
[02/25 20:04:19] mask2former INFO: Inference done 351/1093. Dataloading: 0.0079 s/iter. Inference: 0.2321 s/iter. Eval: 0.1560 s/iter. Total: 0.3960 s/iter. ETA=0:04:53
[02/25 20:04:24] mask2former INFO: Inference done 365/1093. Dataloading: 0.0078 s/iter. Inference: 0.2319 s/iter. Eval: 0.1556 s/iter. Total: 0.3954 s/iter. ETA=0:04:47
[02/25 20:04:30] mask2former INFO: Inference done 377/1093. Dataloading: 0.0078 s/iter. Inference: 0.2330 s/iter. Eval: 0.1558 s/iter. Total: 0.3967 s/iter. ETA=0:04:44
[02/25 20:04:35] mask2former INFO: Inference done 390/1093. Dataloading: 0.0078 s/iter. Inference: 0.2329 s/iter. Eval: 0.1555 s/iter. Total: 0.3964 s/iter. ETA=0:04:38
[02/25 20:04:40] mask2former INFO: Inference done 404/1093. Dataloading: 0.0078 s/iter. Inference: 0.2332 s/iter. Eval: 0.1549 s/iter. Total: 0.3960 s/iter. ETA=0:04:32
[02/25 20:04:45] mask2former INFO: Inference done 417/1093. Dataloading: 0.0078 s/iter. Inference: 0.2327 s/iter. Eval: 0.1552 s/iter. Total: 0.3959 s/iter. ETA=0:04:27
[02/25 20:04:50] mask2former INFO: Inference done 429/1093. Dataloading: 0.0078 s/iter. Inference: 0.2327 s/iter. Eval: 0.1559 s/iter. Total: 0.3965 s/iter. ETA=0:04:23
[02/25 20:04:56] mask2former INFO: Inference done 442/1093. Dataloading: 0.0080 s/iter. Inference: 0.2323 s/iter. Eval: 0.1566 s/iter. Total: 0.3970 s/iter. ETA=0:04:18
[02/25 20:05:01] mask2former INFO: Inference done 456/1093. Dataloading: 0.0080 s/iter. Inference: 0.2317 s/iter. Eval: 0.1570 s/iter. Total: 0.3968 s/iter. ETA=0:04:12
[02/25 20:05:06] mask2former INFO: Inference done 469/1093. Dataloading: 0.0080 s/iter. Inference: 0.2316 s/iter. Eval: 0.1569 s/iter. Total: 0.3966 s/iter. ETA=0:04:07
[02/25 20:05:11] mask2former INFO: Inference done 483/1093. Dataloading: 0.0079 s/iter. Inference: 0.2309 s/iter. Eval: 0.1571 s/iter. Total: 0.3960 s/iter. ETA=0:04:01
[02/25 20:05:16] mask2former INFO: Inference done 496/1093. Dataloading: 0.0081 s/iter. Inference: 0.2312 s/iter. Eval: 0.1566 s/iter. Total: 0.3959 s/iter. ETA=0:03:56
[02/25 20:05:22] mask2former INFO: Inference done 510/1093. Dataloading: 0.0080 s/iter. Inference: 0.2309 s/iter. Eval: 0.1559 s/iter. Total: 0.3950 s/iter. ETA=0:03:50
[02/25 20:05:27] mask2former INFO: Inference done 523/1093. Dataloading: 0.0081 s/iter. Inference: 0.2306 s/iter. Eval: 0.1564 s/iter. Total: 0.3952 s/iter. ETA=0:03:45
[02/25 20:05:32] mask2former INFO: Inference done 535/1093. Dataloading: 0.0081 s/iter. Inference: 0.2309 s/iter. Eval: 0.1568 s/iter. Total: 0.3959 s/iter. ETA=0:03:40
[02/25 20:05:37] mask2former INFO: Inference done 548/1093. Dataloading: 0.0081 s/iter. Inference: 0.2306 s/iter. Eval: 0.1571 s/iter. Total: 0.3959 s/iter. ETA=0:03:35
[02/25 20:05:42] mask2former INFO: Inference done 562/1093. Dataloading: 0.0080 s/iter. Inference: 0.2301 s/iter. Eval: 0.1568 s/iter. Total: 0.3951 s/iter. ETA=0:03:29
[02/25 20:05:47] mask2former INFO: Inference done 576/1093. Dataloading: 0.0080 s/iter. Inference: 0.2299 s/iter. Eval: 0.1567 s/iter. Total: 0.3947 s/iter. ETA=0:03:24
[02/25 20:05:53] mask2former INFO: Inference done 589/1093. Dataloading: 0.0080 s/iter. Inference: 0.2299 s/iter. Eval: 0.1569 s/iter. Total: 0.3948 s/iter. ETA=0:03:19
[02/25 20:05:58] mask2former INFO: Inference done 603/1093. Dataloading: 0.0079 s/iter. Inference: 0.2293 s/iter. Eval: 0.1569 s/iter. Total: 0.3943 s/iter. ETA=0:03:13
[02/25 20:06:03] mask2former INFO: Inference done 617/1093. Dataloading: 0.0080 s/iter. Inference: 0.2288 s/iter. Eval: 0.1567 s/iter. Total: 0.3936 s/iter. ETA=0:03:07
[02/25 20:06:08] mask2former INFO: Inference done 631/1093. Dataloading: 0.0080 s/iter. Inference: 0.2287 s/iter. Eval: 0.1565 s/iter. Total: 0.3932 s/iter. ETA=0:03:01
[02/25 20:06:14] mask2former INFO: Inference done 645/1093. Dataloading: 0.0080 s/iter. Inference: 0.2287 s/iter. Eval: 0.1561 s/iter. Total: 0.3930 s/iter. ETA=0:02:56
[02/25 20:06:19] mask2former INFO: Inference done 659/1093. Dataloading: 0.0080 s/iter. Inference: 0.2286 s/iter. Eval: 0.1558 s/iter. Total: 0.3924 s/iter. ETA=0:02:50
[02/25 20:06:24] mask2former INFO: Inference done 672/1093. Dataloading: 0.0081 s/iter. Inference: 0.2286 s/iter. Eval: 0.1560 s/iter. Total: 0.3927 s/iter. ETA=0:02:45
[02/25 20:06:29] mask2former INFO: Inference done 686/1093. Dataloading: 0.0080 s/iter. Inference: 0.2286 s/iter. Eval: 0.1553 s/iter. Total: 0.3921 s/iter. ETA=0:02:39
[02/25 20:06:34] mask2former INFO: Inference done 700/1093. Dataloading: 0.0080 s/iter. Inference: 0.2284 s/iter. Eval: 0.1554 s/iter. Total: 0.3919 s/iter. ETA=0:02:34
[02/25 20:06:40] mask2former INFO: Inference done 713/1093. Dataloading: 0.0080 s/iter. Inference: 0.2286 s/iter. Eval: 0.1554 s/iter. Total: 0.3921 s/iter. ETA=0:02:29
[02/25 20:06:45] mask2former INFO: Inference done 726/1093. Dataloading: 0.0080 s/iter. Inference: 0.2284 s/iter. Eval: 0.1557 s/iter. Total: 0.3922 s/iter. ETA=0:02:23
[02/25 20:06:50] mask2former INFO: Inference done 739/1093. Dataloading: 0.0080 s/iter. Inference: 0.2284 s/iter. Eval: 0.1556 s/iter. Total: 0.3921 s/iter. ETA=0:02:18
[02/25 20:06:55] mask2former INFO: Inference done 753/1093. Dataloading: 0.0079 s/iter. Inference: 0.2281 s/iter. Eval: 0.1553 s/iter. Total: 0.3915 s/iter. ETA=0:02:13
[02/25 20:07:00] mask2former INFO: Inference done 766/1093. Dataloading: 0.0079 s/iter. Inference: 0.2282 s/iter. Eval: 0.1554 s/iter. Total: 0.3916 s/iter. ETA=0:02:08
[02/25 20:07:05] mask2former INFO: Inference done 777/1093. Dataloading: 0.0079 s/iter. Inference: 0.2284 s/iter. Eval: 0.1562 s/iter. Total: 0.3927 s/iter. ETA=0:02:04
[02/25 20:07:11] mask2former INFO: Inference done 789/1093. Dataloading: 0.0079 s/iter. Inference: 0.2286 s/iter. Eval: 0.1569 s/iter. Total: 0.3935 s/iter. ETA=0:01:59
[02/25 20:07:16] mask2former INFO: Inference done 802/1093. Dataloading: 0.0079 s/iter. Inference: 0.2287 s/iter. Eval: 0.1570 s/iter. Total: 0.3937 s/iter. ETA=0:01:54
[02/25 20:07:21] mask2former INFO: Inference done 815/1093. Dataloading: 0.0079 s/iter. Inference: 0.2285 s/iter. Eval: 0.1573 s/iter. Total: 0.3938 s/iter. ETA=0:01:49
[02/25 20:07:26] mask2former INFO: Inference done 829/1093. Dataloading: 0.0079 s/iter. Inference: 0.2281 s/iter. Eval: 0.1572 s/iter. Total: 0.3933 s/iter. ETA=0:01:43
[02/25 20:07:31] mask2former INFO: Inference done 843/1093. Dataloading: 0.0078 s/iter. Inference: 0.2280 s/iter. Eval: 0.1570 s/iter. Total: 0.3930 s/iter. ETA=0:01:38
[02/25 20:07:37] mask2former INFO: Inference done 855/1093. Dataloading: 0.0079 s/iter. Inference: 0.2282 s/iter. Eval: 0.1575 s/iter. Total: 0.3937 s/iter. ETA=0:01:33
[02/25 20:07:42] mask2former INFO: Inference done 868/1093. Dataloading: 0.0079 s/iter. Inference: 0.2280 s/iter. Eval: 0.1579 s/iter. Total: 0.3939 s/iter. ETA=0:01:28
[02/25 20:07:47] mask2former INFO: Inference done 883/1093. Dataloading: 0.0078 s/iter. Inference: 0.2277 s/iter. Eval: 0.1574 s/iter. Total: 0.3931 s/iter. ETA=0:01:22
[02/25 20:07:52] mask2former INFO: Inference done 898/1093. Dataloading: 0.0078 s/iter. Inference: 0.2278 s/iter. Eval: 0.1568 s/iter. Total: 0.3924 s/iter. ETA=0:01:16
[02/25 20:07:58] mask2former INFO: Inference done 910/1093. Dataloading: 0.0078 s/iter. Inference: 0.2278 s/iter. Eval: 0.1571 s/iter. Total: 0.3928 s/iter. ETA=0:01:11
[02/25 20:08:03] mask2former INFO: Inference done 923/1093. Dataloading: 0.0078 s/iter. Inference: 0.2279 s/iter. Eval: 0.1571 s/iter. Total: 0.3929 s/iter. ETA=0:01:06
[02/25 20:08:08] mask2former INFO: Inference done 936/1093. Dataloading: 0.0078 s/iter. Inference: 0.2280 s/iter. Eval: 0.1569 s/iter. Total: 0.3929 s/iter. ETA=0:01:01
[02/25 20:08:13] mask2former INFO: Inference done 950/1093. Dataloading: 0.0078 s/iter. Inference: 0.2282 s/iter. Eval: 0.1566 s/iter. Total: 0.3927 s/iter. ETA=0:00:56
[02/25 20:08:18] mask2former INFO: Inference done 963/1093. Dataloading: 0.0078 s/iter. Inference: 0.2282 s/iter. Eval: 0.1567 s/iter. Total: 0.3928 s/iter. ETA=0:00:51
[02/25 20:08:23] mask2former INFO: Inference done 977/1093. Dataloading: 0.0078 s/iter. Inference: 0.2279 s/iter. Eval: 0.1566 s/iter. Total: 0.3924 s/iter. ETA=0:00:45
[02/25 20:08:29] mask2former INFO: Inference done 991/1093. Dataloading: 0.0078 s/iter. Inference: 0.2279 s/iter. Eval: 0.1565 s/iter. Total: 0.3924 s/iter. ETA=0:00:40
[02/25 20:08:34] mask2former INFO: Inference done 1006/1093. Dataloading: 0.0078 s/iter. Inference: 0.2276 s/iter. Eval: 0.1563 s/iter. Total: 0.3918 s/iter. ETA=0:00:34
[02/25 20:08:40] mask2former INFO: Inference done 1021/1093. Dataloading: 0.0078 s/iter. Inference: 0.2275 s/iter. Eval: 0.1558 s/iter. Total: 0.3913 s/iter. ETA=0:00:28
[02/25 20:08:45] mask2former INFO: Inference done 1033/1093. Dataloading: 0.0078 s/iter. Inference: 0.2278 s/iter. Eval: 0.1563 s/iter. Total: 0.3920 s/iter. ETA=0:00:23
[02/25 20:08:50] mask2former INFO: Inference done 1046/1093. Dataloading: 0.0078 s/iter. Inference: 0.2275 s/iter. Eval: 0.1568 s/iter. Total: 0.3923 s/iter. ETA=0:00:18
[02/25 20:08:56] mask2former INFO: Inference done 1059/1093. Dataloading: 0.0079 s/iter. Inference: 0.2273 s/iter. Eval: 0.1571 s/iter. Total: 0.3923 s/iter. ETA=0:00:13
[02/25 20:09:01] mask2former INFO: Inference done 1071/1093. Dataloading: 0.0079 s/iter. Inference: 0.2276 s/iter. Eval: 0.1571 s/iter. Total: 0.3928 s/iter. ETA=0:00:08
[02/25 20:09:06] mask2former INFO: Inference done 1084/1093. Dataloading: 0.0079 s/iter. Inference: 0.2279 s/iter. Eval: 0.1570 s/iter. Total: 0.3929 s/iter. ETA=0:00:03
