[02/17 22:40:03] detectron2 INFO: Rank of current process: 1. World size: 4
[02/17 22:40:08] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/home/nstarli/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.5
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             Tesla V100-SXM2-32GB (arch=7.0)
Driver version          495.29.05
CUDA_HOME               /usr/local/cuda-11
Pillow                  8.4.0
torchvision             0.10.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.4
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[02/17 22:40:08] detectron2 INFO: Command line arguments: Namespace(config_file='configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml', dist_url='tcp://127.0.0.1:65510', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[02/17 22:40:08] detectron2 INFO: Contents of args.config_file=configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmaskformer2stereo_R50_bs16_90k.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m  [39m[38;5;186m"[39m[38;5;186mcheckpoints/R-101.pkl[39m[38;5;186m"[39m[38;5;15m [39m[38;5;242m#"/home/nstarli/Mask2Former/work_dirs/r101_48classes_fixedmatching/model_final.pth"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m101[39m
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbasic[39m[38;5;186m"[39m[38;5;15m  [39m[38;5;242m# not used[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mSyncBN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m][39m[38;5;15m  [39m[38;5;242m# not used[39m

[02/17 22:40:08] detectron2.utils.env INFO: Using a generated random seed 8276061
[02/17 22:40:13] detectron2.engine.defaults INFO: Model:
MaskFormerStereo(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(4096, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(48, 256)
      (query_embed): Embedding(48, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=49, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterionStereo
      matcher: Matcher FixedMatcher
      losses: ['labels', 'masks', 'segs']
      weight_dict: {'loss_mask': 5.0, 'loss_ce': 0.0, 'loss_dice': 5.0, 'loss_seg': 0.1, 'loss_mask_0': 5.0, 'loss_ce_0': 0.0, 'loss_dice_0': 5.0, 'loss_mask_1': 5.0, 'loss_ce_1': 0.0, 'loss_dice_1': 5.0, 'loss_mask_2': 5.0, 'loss_ce_2': 0.0, 'loss_dice_2': 5.0, 'loss_mask_3': 5.0, 'loss_ce_3': 0.0, 'loss_dice_3': 5.0, 'loss_mask_4': 5.0, 'loss_ce_4': 0.0, 'loss_dice_4': 5.0, 'loss_mask_5': 5.0, 'loss_ce_5': 0.0, 'loss_dice_5': 5.0, 'loss_mask_6': 5.0, 'loss_ce_6': 0.0, 'loss_dice_6': 5.0, 'loss_mask_7': 5.0, 'loss_ce_7': 0.0, 'loss_dice_7': 5.0, 'loss_mask_8': 5.0, 'loss_ce_8': 0.0, 'loss_dice_8': 5.0}
      num_classes: 48
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (upsampler): UpsampleMasks(
    (conv2d): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[02/17 22:40:13] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in training: [RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[256, 512], single_category_max_area=1.0, ignored_category=0)]
[02/17 22:40:18] detectron2.data.build INFO: Using training sampler TrainingSampler
[02/17 22:40:19] detectron2.data.common INFO: Serializing 35454 elements to byte tensors and concatenating them all ...
[02/17 22:40:19] detectron2.data.common INFO: Serialized dataset takes 10.76 MiB
[02/17 22:40:19] fvcore.common.checkpoint INFO: [Checkpointer] Loading from checkpoints/R-101.pkl ...
[02/17 22:40:19] detectron2.checkpoint.c2_model_loading INFO: Renaming Caffe2 weights ......
[02/17 22:40:19] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint       | Shapes                                          |
|:------------------|:--------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}   | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}   | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}   | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.10.conv1.*   | res4_10_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.10.conv2.*   | res4_10_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.10.conv3.*   | res4_10_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.11.conv1.*   | res4_11_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.11.conv2.*   | res4_11_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.11.conv3.*   | res4_11_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.12.conv1.*   | res4_12_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.12.conv2.*   | res4_12_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.12.conv3.*   | res4_12_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.13.conv1.*   | res4_13_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.13.conv2.*   | res4_13_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.13.conv3.*   | res4_13_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.14.conv1.*   | res4_14_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.14.conv2.*   | res4_14_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.14.conv3.*   | res4_14_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.15.conv1.*   | res4_15_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.15.conv2.*   | res4_15_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.15.conv3.*   | res4_15_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.16.conv1.*   | res4_16_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.16.conv2.*   | res4_16_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.16.conv3.*   | res4_16_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.17.conv1.*   | res4_17_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.17.conv2.*   | res4_17_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.17.conv3.*   | res4_17_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.18.conv1.*   | res4_18_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.18.conv2.*   | res4_18_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.18.conv3.*   | res4_18_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.19.conv1.*   | res4_19_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.19.conv2.*   | res4_19_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.19.conv3.*   | res4_19_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.20.conv1.*   | res4_20_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.20.conv2.*   | res4_20_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.20.conv3.*   | res4_20_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.21.conv1.*   | res4_21_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.21.conv2.*   | res4_21_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.21.conv3.*   | res4_21_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.22.conv1.*   | res4_22_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.22.conv2.*   | res4_22_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.22.conv3.*   | res4_22_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.6.conv1.*    | res4_6_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.6.conv2.*    | res4_6_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.6.conv3.*    | res4_6_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.7.conv1.*    | res4_7_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.7.conv2.*    | res4_7_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.7.conv3.*    | res4_7_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.8.conv1.*    | res4_8_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.8.conv2.*    | res4_8_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.8.conv3.*    | res4_8_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.9.conv1.*    | res4_9_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.9.conv2.*    | res4_9_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.9.conv3.*    | res4_9_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}   | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*            | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                   | (64, 3, 7, 7)                                   |
[02/17 22:40:20] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mupsampler.conv2d.{bias, weight}[0m
[02/17 22:40:20] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc1000.{bias, weight}[0m
[02/17 22:40:20] detectron2.engine.train_loop INFO: Starting training from iteration 0
[02/17 22:46:51] detectron2.engine.hooks INFO: Overall training speed: 240 iterations in 0:06:15 (1.5634 s / it)
[02/17 22:46:51] detectron2.engine.hooks INFO: Total training time: 0:06:15 (0:00:00 on hooks)
[02/17 22:47:28] detectron2 INFO: Rank of current process: 1. World size: 4
[02/17 22:47:33] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/home/nstarli/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.5
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             Tesla V100-SXM2-32GB (arch=7.0)
Driver version          495.29.05
CUDA_HOME               /usr/local/cuda-11
Pillow                  8.4.0
torchvision             0.10.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.4
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[02/17 22:47:33] detectron2 INFO: Command line arguments: Namespace(config_file='configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml', dist_url='tcp://127.0.0.1:65510', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[02/17 22:47:33] detectron2 INFO: Contents of args.config_file=configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmaskformer2stereo_R50_bs16_90k.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m  [39m[38;5;186m"[39m[38;5;186mcheckpoints/R-101.pkl[39m[38;5;186m"[39m[38;5;15m [39m[38;5;242m#"/home/nstarli/Mask2Former/work_dirs/r101_48classes_fixedmatching/model_final.pth"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m101[39m
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbasic[39m[38;5;186m"[39m[38;5;15m  [39m[38;5;242m# not used[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mSyncBN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m][39m[38;5;15m  [39m[38;5;242m# not used[39m

[02/17 22:47:33] detectron2.utils.env INFO: Using a generated random seed 33504696
[02/17 22:47:38] detectron2.engine.defaults INFO: Model:
MaskFormerStereo(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(4096, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(48, 256)
      (query_embed): Embedding(48, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=49, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterionStereo
      matcher: Matcher FixedMatcher
      losses: ['labels', 'masks', 'segs']
      weight_dict: {'loss_mask': 5.0, 'loss_ce': 0.0, 'loss_dice': 5.0, 'loss_seg': 0.1, 'loss_mask_0': 5.0, 'loss_ce_0': 0.0, 'loss_dice_0': 5.0, 'loss_mask_1': 5.0, 'loss_ce_1': 0.0, 'loss_dice_1': 5.0, 'loss_mask_2': 5.0, 'loss_ce_2': 0.0, 'loss_dice_2': 5.0, 'loss_mask_3': 5.0, 'loss_ce_3': 0.0, 'loss_dice_3': 5.0, 'loss_mask_4': 5.0, 'loss_ce_4': 0.0, 'loss_dice_4': 5.0, 'loss_mask_5': 5.0, 'loss_ce_5': 0.0, 'loss_dice_5': 5.0, 'loss_mask_6': 5.0, 'loss_ce_6': 0.0, 'loss_dice_6': 5.0, 'loss_mask_7': 5.0, 'loss_ce_7': 0.0, 'loss_dice_7': 5.0, 'loss_mask_8': 5.0, 'loss_ce_8': 0.0, 'loss_dice_8': 5.0}
      num_classes: 48
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (upsampler): UpsampleMasks(
    (conv2d): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[02/17 22:47:38] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in training: [RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[256, 512], single_category_max_area=1.0, ignored_category=0)]
[02/17 22:47:43] detectron2.data.build INFO: Using training sampler TrainingSampler
[02/17 22:47:44] detectron2.data.common INFO: Serializing 35454 elements to byte tensors and concatenating them all ...
[02/17 22:47:44] detectron2.data.common INFO: Serialized dataset takes 10.76 MiB
[02/17 22:47:44] fvcore.common.checkpoint INFO: [Checkpointer] Loading from checkpoints/R-101.pkl ...
[02/17 22:47:44] detectron2.checkpoint.c2_model_loading INFO: Renaming Caffe2 weights ......
[02/17 22:47:44] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint       | Shapes                                          |
|:------------------|:--------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}   | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}   | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}   | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.10.conv1.*   | res4_10_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.10.conv2.*   | res4_10_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.10.conv3.*   | res4_10_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.11.conv1.*   | res4_11_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.11.conv2.*   | res4_11_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.11.conv3.*   | res4_11_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.12.conv1.*   | res4_12_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.12.conv2.*   | res4_12_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.12.conv3.*   | res4_12_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.13.conv1.*   | res4_13_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.13.conv2.*   | res4_13_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.13.conv3.*   | res4_13_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.14.conv1.*   | res4_14_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.14.conv2.*   | res4_14_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.14.conv3.*   | res4_14_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.15.conv1.*   | res4_15_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.15.conv2.*   | res4_15_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.15.conv3.*   | res4_15_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.16.conv1.*   | res4_16_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.16.conv2.*   | res4_16_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.16.conv3.*   | res4_16_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.17.conv1.*   | res4_17_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.17.conv2.*   | res4_17_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.17.conv3.*   | res4_17_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.18.conv1.*   | res4_18_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.18.conv2.*   | res4_18_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.18.conv3.*   | res4_18_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.19.conv1.*   | res4_19_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.19.conv2.*   | res4_19_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.19.conv3.*   | res4_19_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.20.conv1.*   | res4_20_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.20.conv2.*   | res4_20_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.20.conv3.*   | res4_20_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.21.conv1.*   | res4_21_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.21.conv2.*   | res4_21_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.21.conv3.*   | res4_21_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.22.conv1.*   | res4_22_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.22.conv2.*   | res4_22_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.22.conv3.*   | res4_22_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.6.conv1.*    | res4_6_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.6.conv2.*    | res4_6_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.6.conv3.*    | res4_6_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.7.conv1.*    | res4_7_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.7.conv2.*    | res4_7_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.7.conv3.*    | res4_7_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.8.conv1.*    | res4_8_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.8.conv2.*    | res4_8_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.8.conv3.*    | res4_8_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.9.conv1.*    | res4_9_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.9.conv2.*    | res4_9_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.9.conv3.*    | res4_9_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}   | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*            | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                   | (64, 3, 7, 7)                                   |
[02/17 22:47:45] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mupsampler.conv2d.{bias, weight}[0m
[02/17 22:47:45] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc1000.{bias, weight}[0m
[02/17 22:47:45] detectron2.engine.train_loop INFO: Starting training from iteration 0
[02/17 22:48:34] detectron2.engine.hooks INFO: Overall training speed: 15 iterations in 0:00:31 (2.1030 s / it)
[02/17 22:48:34] detectron2.engine.hooks INFO: Total training time: 0:00:31 (0:00:00 on hooks)
[02/17 22:48:54] detectron2 INFO: Rank of current process: 1. World size: 4
[02/17 22:48:58] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/home/nstarli/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.5
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             Tesla V100-SXM2-32GB (arch=7.0)
Driver version          495.29.05
CUDA_HOME               /usr/local/cuda-11
Pillow                  8.4.0
torchvision             0.10.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.4
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[02/17 22:48:58] detectron2 INFO: Command line arguments: Namespace(config_file='configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml', dist_url='tcp://127.0.0.1:65510', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[02/17 22:48:59] detectron2 INFO: Contents of args.config_file=configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmaskformer2stereo_R50_bs16_90k.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m  [39m[38;5;186m"[39m[38;5;186mcheckpoints/R-101.pkl[39m[38;5;186m"[39m[38;5;15m [39m[38;5;242m#"/home/nstarli/Mask2Former/work_dirs/r101_48classes_fixedmatching/model_final.pth"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m101[39m
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbasic[39m[38;5;186m"[39m[38;5;15m  [39m[38;5;242m# not used[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mSyncBN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m][39m[38;5;15m  [39m[38;5;242m# not used[39m

[02/17 22:48:59] detectron2.utils.env INFO: Using a generated random seed 59151581
[02/17 22:49:02] detectron2.engine.defaults INFO: Model:
MaskFormerStereo(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(4096, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(48, 256)
      (query_embed): Embedding(48, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=49, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterionStereo
      matcher: Matcher FixedMatcher
      losses: ['labels', 'masks', 'segs']
      weight_dict: {'loss_mask': 5.0, 'loss_ce': 0.0, 'loss_dice': 5.0, 'loss_seg': 0.1, 'loss_mask_0': 5.0, 'loss_ce_0': 0.0, 'loss_dice_0': 5.0, 'loss_mask_1': 5.0, 'loss_ce_1': 0.0, 'loss_dice_1': 5.0, 'loss_mask_2': 5.0, 'loss_ce_2': 0.0, 'loss_dice_2': 5.0, 'loss_mask_3': 5.0, 'loss_ce_3': 0.0, 'loss_dice_3': 5.0, 'loss_mask_4': 5.0, 'loss_ce_4': 0.0, 'loss_dice_4': 5.0, 'loss_mask_5': 5.0, 'loss_ce_5': 0.0, 'loss_dice_5': 5.0, 'loss_mask_6': 5.0, 'loss_ce_6': 0.0, 'loss_dice_6': 5.0, 'loss_mask_7': 5.0, 'loss_ce_7': 0.0, 'loss_dice_7': 5.0, 'loss_mask_8': 5.0, 'loss_ce_8': 0.0, 'loss_dice_8': 5.0}
      num_classes: 48
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (upsampler): UpsampleMasks(
    (conv2d): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[02/17 22:49:02] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in training: [RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[256, 512], single_category_max_area=1.0, ignored_category=0)]
[02/17 22:49:07] detectron2.data.build INFO: Using training sampler TrainingSampler
[02/17 22:49:09] detectron2.data.common INFO: Serializing 35454 elements to byte tensors and concatenating them all ...
[02/17 22:49:09] detectron2.data.common INFO: Serialized dataset takes 10.76 MiB
[02/17 22:49:09] fvcore.common.checkpoint INFO: [Checkpointer] Loading from checkpoints/R-101.pkl ...
[02/17 22:49:09] detectron2.checkpoint.c2_model_loading INFO: Renaming Caffe2 weights ......
[02/17 22:49:10] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint       | Shapes                                          |
|:------------------|:--------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}   | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}   | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}   | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.10.conv1.*   | res4_10_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.10.conv2.*   | res4_10_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.10.conv3.*   | res4_10_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.11.conv1.*   | res4_11_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.11.conv2.*   | res4_11_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.11.conv3.*   | res4_11_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.12.conv1.*   | res4_12_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.12.conv2.*   | res4_12_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.12.conv3.*   | res4_12_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.13.conv1.*   | res4_13_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.13.conv2.*   | res4_13_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.13.conv3.*   | res4_13_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.14.conv1.*   | res4_14_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.14.conv2.*   | res4_14_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.14.conv3.*   | res4_14_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.15.conv1.*   | res4_15_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.15.conv2.*   | res4_15_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.15.conv3.*   | res4_15_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.16.conv1.*   | res4_16_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.16.conv2.*   | res4_16_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.16.conv3.*   | res4_16_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.17.conv1.*   | res4_17_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.17.conv2.*   | res4_17_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.17.conv3.*   | res4_17_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.18.conv1.*   | res4_18_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.18.conv2.*   | res4_18_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.18.conv3.*   | res4_18_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.19.conv1.*   | res4_19_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.19.conv2.*   | res4_19_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.19.conv3.*   | res4_19_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.20.conv1.*   | res4_20_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.20.conv2.*   | res4_20_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.20.conv3.*   | res4_20_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.21.conv1.*   | res4_21_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.21.conv2.*   | res4_21_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.21.conv3.*   | res4_21_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.22.conv1.*   | res4_22_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.22.conv2.*   | res4_22_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.22.conv3.*   | res4_22_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.6.conv1.*    | res4_6_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.6.conv2.*    | res4_6_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.6.conv3.*    | res4_6_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.7.conv1.*    | res4_7_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.7.conv2.*    | res4_7_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.7.conv3.*    | res4_7_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.8.conv1.*    | res4_8_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.8.conv2.*    | res4_8_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.8.conv3.*    | res4_8_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.9.conv1.*    | res4_9_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.9.conv2.*    | res4_9_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.9.conv3.*    | res4_9_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}   | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*            | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                   | (64, 3, 7, 7)                                   |
[02/17 22:49:11] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mupsampler.conv2d.{bias, weight}[0m
[02/17 22:49:11] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc1000.{bias, weight}[0m
[02/17 22:49:11] detectron2.engine.train_loop INFO: Starting training from iteration 0
[02/17 22:53:51] detectron2.engine.hooks INFO: Overall training speed: 146 iterations in 0:04:23 (1.8041 s / it)
[02/17 22:53:51] detectron2.engine.hooks INFO: Total training time: 0:04:23 (0:00:00 on hooks)
[02/17 22:54:21] detectron2 INFO: Rank of current process: 1. World size: 4
[02/17 22:54:26] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/home/nstarli/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.5
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             Tesla V100-SXM2-32GB (arch=7.0)
Driver version          495.29.05
CUDA_HOME               /usr/local/cuda-11
Pillow                  8.4.0
torchvision             0.10.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.4
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[02/17 22:54:26] detectron2 INFO: Command line arguments: Namespace(config_file='configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml', dist_url='tcp://127.0.0.1:65510', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[02/17 22:54:26] detectron2 INFO: Contents of args.config_file=configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmaskformer2stereo_R50_bs16_90k.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m  [39m[38;5;186m"[39m[38;5;186mcheckpoints/R-101.pkl[39m[38;5;186m"[39m[38;5;15m [39m[38;5;242m#"/home/nstarli/Mask2Former/work_dirs/r101_48classes_fixedmatching/model_final.pth"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m101[39m
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbasic[39m[38;5;186m"[39m[38;5;15m  [39m[38;5;242m# not used[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mSyncBN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m][39m[38;5;15m  [39m[38;5;242m# not used[39m

[02/17 22:54:26] detectron2.utils.env INFO: Using a generated random seed 26221534
[02/17 22:54:29] detectron2.engine.defaults INFO: Model:
MaskFormerStereo(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(4096, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(48, 256)
      (query_embed): Embedding(48, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=49, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterionStereo
      matcher: Matcher FixedMatcher
      losses: ['labels', 'masks', 'segs']
      weight_dict: {'loss_mask': 5.0, 'loss_ce': 0.0, 'loss_dice': 5.0, 'loss_seg': 0.1, 'loss_mask_0': 5.0, 'loss_ce_0': 0.0, 'loss_dice_0': 5.0, 'loss_mask_1': 5.0, 'loss_ce_1': 0.0, 'loss_dice_1': 5.0, 'loss_mask_2': 5.0, 'loss_ce_2': 0.0, 'loss_dice_2': 5.0, 'loss_mask_3': 5.0, 'loss_ce_3': 0.0, 'loss_dice_3': 5.0, 'loss_mask_4': 5.0, 'loss_ce_4': 0.0, 'loss_dice_4': 5.0, 'loss_mask_5': 5.0, 'loss_ce_5': 0.0, 'loss_dice_5': 5.0, 'loss_mask_6': 5.0, 'loss_ce_6': 0.0, 'loss_dice_6': 5.0, 'loss_mask_7': 5.0, 'loss_ce_7': 0.0, 'loss_dice_7': 5.0, 'loss_mask_8': 5.0, 'loss_ce_8': 0.0, 'loss_dice_8': 5.0}
      num_classes: 48
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (upsampler): UpsampleMasks(
    (conv2d): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[02/17 22:54:29] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in training: [RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[256, 512], single_category_max_area=1.0, ignored_category=0)]
[02/17 22:54:34] detectron2.data.build INFO: Using training sampler TrainingSampler
[02/17 22:54:36] detectron2.data.common INFO: Serializing 35454 elements to byte tensors and concatenating them all ...
[02/17 22:54:36] detectron2.data.common INFO: Serialized dataset takes 10.76 MiB
[02/17 22:54:36] fvcore.common.checkpoint INFO: [Checkpointer] Loading from checkpoints/R-101.pkl ...
[02/17 22:54:36] detectron2.checkpoint.c2_model_loading INFO: Renaming Caffe2 weights ......
[02/17 22:54:37] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint       | Shapes                                          |
|:------------------|:--------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}   | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}   | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}   | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.10.conv1.*   | res4_10_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.10.conv2.*   | res4_10_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.10.conv3.*   | res4_10_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.11.conv1.*   | res4_11_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.11.conv2.*   | res4_11_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.11.conv3.*   | res4_11_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.12.conv1.*   | res4_12_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.12.conv2.*   | res4_12_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.12.conv3.*   | res4_12_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.13.conv1.*   | res4_13_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.13.conv2.*   | res4_13_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.13.conv3.*   | res4_13_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.14.conv1.*   | res4_14_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.14.conv2.*   | res4_14_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.14.conv3.*   | res4_14_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.15.conv1.*   | res4_15_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.15.conv2.*   | res4_15_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.15.conv3.*   | res4_15_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.16.conv1.*   | res4_16_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.16.conv2.*   | res4_16_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.16.conv3.*   | res4_16_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.17.conv1.*   | res4_17_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.17.conv2.*   | res4_17_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.17.conv3.*   | res4_17_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.18.conv1.*   | res4_18_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.18.conv2.*   | res4_18_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.18.conv3.*   | res4_18_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.19.conv1.*   | res4_19_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.19.conv2.*   | res4_19_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.19.conv3.*   | res4_19_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.20.conv1.*   | res4_20_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.20.conv2.*   | res4_20_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.20.conv3.*   | res4_20_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.21.conv1.*   | res4_21_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.21.conv2.*   | res4_21_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.21.conv3.*   | res4_21_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.22.conv1.*   | res4_22_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.22.conv2.*   | res4_22_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.22.conv3.*   | res4_22_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.6.conv1.*    | res4_6_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.6.conv2.*    | res4_6_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.6.conv3.*    | res4_6_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.7.conv1.*    | res4_7_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.7.conv2.*    | res4_7_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.7.conv3.*    | res4_7_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.8.conv1.*    | res4_8_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.8.conv2.*    | res4_8_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.8.conv3.*    | res4_8_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.9.conv1.*    | res4_9_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.9.conv2.*    | res4_9_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.9.conv3.*    | res4_9_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}   | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*            | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                   | (64, 3, 7, 7)                                   |
[02/17 22:54:38] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mupsampler.conv2d.{bias, weight}[0m
[02/17 22:54:38] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc1000.{bias, weight}[0m
[02/17 22:54:38] detectron2.engine.train_loop INFO: Starting training from iteration 0
[02/17 22:55:33] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/17 22:55:34] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/17 22:55:34] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/17 22:55:47] mask2former INFO: Inference done 11/1093. Dataloading: 0.0056 s/iter. Inference: 0.2619 s/iter. Eval: 0.0585 s/iter. Total: 0.3260 s/iter. ETA=0:05:52
[02/17 22:55:52] mask2former INFO: Inference done 25/1093. Dataloading: 0.0074 s/iter. Inference: 0.2812 s/iter. Eval: 0.0614 s/iter. Total: 0.3501 s/iter. ETA=0:06:13
[02/17 22:55:58] mask2former INFO: Inference done 41/1093. Dataloading: 0.0071 s/iter. Inference: 0.2763 s/iter. Eval: 0.0576 s/iter. Total: 0.3411 s/iter. ETA=0:05:58
[02/17 22:56:03] mask2former INFO: Inference done 57/1093. Dataloading: 0.0068 s/iter. Inference: 0.2752 s/iter. Eval: 0.0546 s/iter. Total: 0.3367 s/iter. ETA=0:05:48
[02/17 22:56:08] mask2former INFO: Inference done 72/1093. Dataloading: 0.0072 s/iter. Inference: 0.2753 s/iter. Eval: 0.0566 s/iter. Total: 0.3393 s/iter. ETA=0:05:46
[02/17 22:56:14] mask2former INFO: Inference done 88/1093. Dataloading: 0.0075 s/iter. Inference: 0.2745 s/iter. Eval: 0.0554 s/iter. Total: 0.3374 s/iter. ETA=0:05:39
[02/17 22:56:19] mask2former INFO: Inference done 103/1093. Dataloading: 0.0076 s/iter. Inference: 0.2741 s/iter. Eval: 0.0558 s/iter. Total: 0.3376 s/iter. ETA=0:05:34
[02/17 22:56:24] mask2former INFO: Inference done 118/1093. Dataloading: 0.0079 s/iter. Inference: 0.2761 s/iter. Eval: 0.0545 s/iter. Total: 0.3386 s/iter. ETA=0:05:30
[02/17 22:56:29] mask2former INFO: Inference done 134/1093. Dataloading: 0.0078 s/iter. Inference: 0.2748 s/iter. Eval: 0.0535 s/iter. Total: 0.3362 s/iter. ETA=0:05:22
[02/17 22:56:30] detectron2.engine.hooks INFO: Overall training speed: 17 iterations in 0:00:38 (2.2687 s / it)
[02/17 22:56:30] detectron2.engine.hooks INFO: Total training time: 0:01:35 (0:00:57 on hooks)
[02/17 22:56:58] detectron2 INFO: Rank of current process: 1. World size: 4
[02/17 22:57:03] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/home/nstarli/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.5
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             Tesla V100-SXM2-32GB (arch=7.0)
Driver version          495.29.05
CUDA_HOME               /usr/local/cuda-11
Pillow                  8.4.0
torchvision             0.10.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.4
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[02/17 22:57:03] detectron2 INFO: Command line arguments: Namespace(config_file='configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml', dist_url='tcp://127.0.0.1:65510', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[02/17 22:57:03] detectron2 INFO: Contents of args.config_file=configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmaskformer2stereo_R50_bs16_90k.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m  [39m[38;5;186m"[39m[38;5;186mcheckpoints/R-101.pkl[39m[38;5;186m"[39m[38;5;15m [39m[38;5;242m#"/home/nstarli/Mask2Former/work_dirs/r101_48classes_fixedmatching/model_final.pth"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m101[39m
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbasic[39m[38;5;186m"[39m[38;5;15m  [39m[38;5;242m# not used[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mSyncBN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m][39m[38;5;15m  [39m[38;5;242m# not used[39m

[02/17 22:57:03] detectron2.utils.env INFO: Using a generated random seed 3696094
[02/17 22:57:09] detectron2.engine.defaults INFO: Model:
MaskFormerStereo(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(4096, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(48, 256)
      (query_embed): Embedding(48, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=49, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterionStereo
      matcher: Matcher FixedMatcher
      losses: ['labels', 'masks', 'segs']
      weight_dict: {'loss_mask': 5.0, 'loss_ce': 0.0, 'loss_dice': 5.0, 'loss_seg': 0.1, 'loss_mask_0': 5.0, 'loss_ce_0': 0.0, 'loss_dice_0': 5.0, 'loss_mask_1': 5.0, 'loss_ce_1': 0.0, 'loss_dice_1': 5.0, 'loss_mask_2': 5.0, 'loss_ce_2': 0.0, 'loss_dice_2': 5.0, 'loss_mask_3': 5.0, 'loss_ce_3': 0.0, 'loss_dice_3': 5.0, 'loss_mask_4': 5.0, 'loss_ce_4': 0.0, 'loss_dice_4': 5.0, 'loss_mask_5': 5.0, 'loss_ce_5': 0.0, 'loss_dice_5': 5.0, 'loss_mask_6': 5.0, 'loss_ce_6': 0.0, 'loss_dice_6': 5.0, 'loss_mask_7': 5.0, 'loss_ce_7': 0.0, 'loss_dice_7': 5.0, 'loss_mask_8': 5.0, 'loss_ce_8': 0.0, 'loss_dice_8': 5.0}
      num_classes: 48
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (upsampler): UpsampleMasks(
    (conv2d): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[02/17 22:57:09] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in training: [RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[256, 512], single_category_max_area=1.0, ignored_category=0)]
[02/17 22:57:14] detectron2.data.build INFO: Using training sampler TrainingSampler
[02/17 22:57:14] detectron2.data.common INFO: Serializing 35454 elements to byte tensors and concatenating them all ...
[02/17 22:57:15] detectron2.data.common INFO: Serialized dataset takes 10.76 MiB
[02/17 22:57:15] fvcore.common.checkpoint INFO: [Checkpointer] Loading from checkpoints/R-101.pkl ...
[02/17 22:57:15] detectron2.checkpoint.c2_model_loading INFO: Renaming Caffe2 weights ......
[02/17 22:57:15] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint       | Shapes                                          |
|:------------------|:--------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}   | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}   | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}   | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.10.conv1.*   | res4_10_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.10.conv2.*   | res4_10_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.10.conv3.*   | res4_10_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.11.conv1.*   | res4_11_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.11.conv2.*   | res4_11_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.11.conv3.*   | res4_11_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.12.conv1.*   | res4_12_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.12.conv2.*   | res4_12_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.12.conv3.*   | res4_12_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.13.conv1.*   | res4_13_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.13.conv2.*   | res4_13_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.13.conv3.*   | res4_13_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.14.conv1.*   | res4_14_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.14.conv2.*   | res4_14_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.14.conv3.*   | res4_14_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.15.conv1.*   | res4_15_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.15.conv2.*   | res4_15_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.15.conv3.*   | res4_15_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.16.conv1.*   | res4_16_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.16.conv2.*   | res4_16_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.16.conv3.*   | res4_16_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.17.conv1.*   | res4_17_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.17.conv2.*   | res4_17_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.17.conv3.*   | res4_17_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.18.conv1.*   | res4_18_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.18.conv2.*   | res4_18_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.18.conv3.*   | res4_18_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.19.conv1.*   | res4_19_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.19.conv2.*   | res4_19_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.19.conv3.*   | res4_19_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.20.conv1.*   | res4_20_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.20.conv2.*   | res4_20_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.20.conv3.*   | res4_20_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.21.conv1.*   | res4_21_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.21.conv2.*   | res4_21_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.21.conv3.*   | res4_21_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.22.conv1.*   | res4_22_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.22.conv2.*   | res4_22_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.22.conv3.*   | res4_22_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.6.conv1.*    | res4_6_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.6.conv2.*    | res4_6_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.6.conv3.*    | res4_6_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.7.conv1.*    | res4_7_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.7.conv2.*    | res4_7_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.7.conv3.*    | res4_7_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.8.conv1.*    | res4_8_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.8.conv2.*    | res4_8_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.8.conv3.*    | res4_8_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.9.conv1.*    | res4_9_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.9.conv2.*    | res4_9_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.9.conv3.*    | res4_9_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}   | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*            | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                   | (64, 3, 7, 7)                                   |
[02/17 22:57:16] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mupsampler.conv2d.{bias, weight}[0m
[02/17 22:57:16] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc1000.{bias, weight}[0m
[02/17 22:57:16] detectron2.engine.train_loop INFO: Starting training from iteration 0
[02/17 22:58:08] detectron2.engine.hooks INFO: Overall training speed: 15 iterations in 0:00:33 (2.2651 s / it)
[02/17 22:58:08] detectron2.engine.hooks INFO: Total training time: 0:00:33 (0:00:00 on hooks)
[02/17 23:05:11] detectron2 INFO: Rank of current process: 1. World size: 4
[02/17 23:05:15] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/home/nstarli/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.5
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             Tesla V100-SXM2-32GB (arch=7.0)
Driver version          495.29.05
CUDA_HOME               /usr/local/cuda-11
Pillow                  8.4.0
torchvision             0.10.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.4
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[02/17 23:05:15] detectron2 INFO: Command line arguments: Namespace(config_file='configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml', dist_url='tcp://127.0.0.1:65510', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[02/17 23:05:15] detectron2 INFO: Contents of args.config_file=configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmaskformer2stereo_R50_bs16_90k.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m  [39m[38;5;186m"[39m[38;5;186mcheckpoints/R-101.pkl[39m[38;5;186m"[39m[38;5;15m [39m[38;5;242m#"/home/nstarli/Mask2Former/work_dirs/r101_48classes_fixedmatching/model_final.pth"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m101[39m
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbasic[39m[38;5;186m"[39m[38;5;15m  [39m[38;5;242m# not used[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mSyncBN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m][39m[38;5;15m  [39m[38;5;242m# not used[39m

[02/17 23:05:16] detectron2.utils.env INFO: Using a generated random seed 16139674
[02/17 23:05:20] detectron2.engine.defaults INFO: Model:
MaskFormerStereo(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(4096, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(48, 256)
      (query_embed): Embedding(48, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=49, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterionStereo
      matcher: Matcher FixedMatcher
      losses: ['labels', 'masks', 'segs']
      weight_dict: {'loss_mask': 5.0, 'loss_ce': 0.0, 'loss_dice': 5.0, 'loss_seg': 0.1, 'loss_mask_0': 5.0, 'loss_ce_0': 0.0, 'loss_dice_0': 5.0, 'loss_mask_1': 5.0, 'loss_ce_1': 0.0, 'loss_dice_1': 5.0, 'loss_mask_2': 5.0, 'loss_ce_2': 0.0, 'loss_dice_2': 5.0, 'loss_mask_3': 5.0, 'loss_ce_3': 0.0, 'loss_dice_3': 5.0, 'loss_mask_4': 5.0, 'loss_ce_4': 0.0, 'loss_dice_4': 5.0, 'loss_mask_5': 5.0, 'loss_ce_5': 0.0, 'loss_dice_5': 5.0, 'loss_mask_6': 5.0, 'loss_ce_6': 0.0, 'loss_dice_6': 5.0, 'loss_mask_7': 5.0, 'loss_ce_7': 0.0, 'loss_dice_7': 5.0, 'loss_mask_8': 5.0, 'loss_ce_8': 0.0, 'loss_dice_8': 5.0}
      num_classes: 48
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (upsampler): UpsampleMasks(
    (conv2d): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[02/17 23:05:20] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in training: [RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[256, 512], single_category_max_area=1.0, ignored_category=0)]
[02/17 23:05:25] detectron2.data.build INFO: Using training sampler TrainingSampler
[02/17 23:05:27] detectron2.data.common INFO: Serializing 35454 elements to byte tensors and concatenating them all ...
[02/17 23:05:27] detectron2.data.common INFO: Serialized dataset takes 10.76 MiB
[02/17 23:05:27] fvcore.common.checkpoint INFO: [Checkpointer] Loading from checkpoints/R-101.pkl ...
[02/17 23:05:27] detectron2.checkpoint.c2_model_loading INFO: Renaming Caffe2 weights ......
[02/17 23:05:28] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint       | Shapes                                          |
|:------------------|:--------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}   | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}   | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}   | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.10.conv1.*   | res4_10_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.10.conv2.*   | res4_10_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.10.conv3.*   | res4_10_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.11.conv1.*   | res4_11_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.11.conv2.*   | res4_11_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.11.conv3.*   | res4_11_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.12.conv1.*   | res4_12_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.12.conv2.*   | res4_12_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.12.conv3.*   | res4_12_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.13.conv1.*   | res4_13_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.13.conv2.*   | res4_13_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.13.conv3.*   | res4_13_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.14.conv1.*   | res4_14_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.14.conv2.*   | res4_14_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.14.conv3.*   | res4_14_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.15.conv1.*   | res4_15_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.15.conv2.*   | res4_15_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.15.conv3.*   | res4_15_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.16.conv1.*   | res4_16_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.16.conv2.*   | res4_16_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.16.conv3.*   | res4_16_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.17.conv1.*   | res4_17_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.17.conv2.*   | res4_17_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.17.conv3.*   | res4_17_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.18.conv1.*   | res4_18_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.18.conv2.*   | res4_18_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.18.conv3.*   | res4_18_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.19.conv1.*   | res4_19_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.19.conv2.*   | res4_19_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.19.conv3.*   | res4_19_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.20.conv1.*   | res4_20_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.20.conv2.*   | res4_20_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.20.conv3.*   | res4_20_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.21.conv1.*   | res4_21_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.21.conv2.*   | res4_21_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.21.conv3.*   | res4_21_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.22.conv1.*   | res4_22_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.22.conv2.*   | res4_22_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.22.conv3.*   | res4_22_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.6.conv1.*    | res4_6_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.6.conv2.*    | res4_6_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.6.conv3.*    | res4_6_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.7.conv1.*    | res4_7_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.7.conv2.*    | res4_7_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.7.conv3.*    | res4_7_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.8.conv1.*    | res4_8_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.8.conv2.*    | res4_8_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.8.conv3.*    | res4_8_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.9.conv1.*    | res4_9_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.9.conv2.*    | res4_9_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.9.conv3.*    | res4_9_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}   | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*            | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                   | (64, 3, 7, 7)                                   |
[02/17 23:05:29] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mupsampler.conv2d.{bias, weight}[0m
[02/17 23:05:29] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc1000.{bias, weight}[0m
[02/17 23:05:29] detectron2.engine.train_loop INFO: Starting training from iteration 0
[02/18 00:32:40] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 00:32:40] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 00:32:40] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 00:33:00] mask2former INFO: Inference done 11/1093. Dataloading: 0.0048 s/iter. Inference: 0.2878 s/iter. Eval: 0.1706 s/iter. Total: 0.4631 s/iter. ETA=0:08:21
[02/18 00:33:05] mask2former INFO: Inference done 21/1093. Dataloading: 0.0067 s/iter. Inference: 0.2918 s/iter. Eval: 0.2040 s/iter. Total: 0.5026 s/iter. ETA=0:08:58
[02/18 00:33:10] mask2former INFO: Inference done 30/1093. Dataloading: 0.0087 s/iter. Inference: 0.3160 s/iter. Eval: 0.1994 s/iter. Total: 0.5242 s/iter. ETA=0:09:17
[02/18 00:33:15] mask2former INFO: Inference done 43/1093. Dataloading: 0.0079 s/iter. Inference: 0.2962 s/iter. Eval: 0.1788 s/iter. Total: 0.4831 s/iter. ETA=0:08:27
[02/18 00:33:20] mask2former INFO: Inference done 54/1093. Dataloading: 0.0080 s/iter. Inference: 0.2950 s/iter. Eval: 0.1737 s/iter. Total: 0.4768 s/iter. ETA=0:08:15
[02/18 00:33:25] mask2former INFO: Inference done 66/1093. Dataloading: 0.0078 s/iter. Inference: 0.2927 s/iter. Eval: 0.1679 s/iter. Total: 0.4685 s/iter. ETA=0:08:01
[02/18 00:33:31] mask2former INFO: Inference done 78/1093. Dataloading: 0.0076 s/iter. Inference: 0.2861 s/iter. Eval: 0.1682 s/iter. Total: 0.4620 s/iter. ETA=0:07:48
[02/18 00:33:36] mask2former INFO: Inference done 90/1093. Dataloading: 0.0076 s/iter. Inference: 0.2850 s/iter. Eval: 0.1648 s/iter. Total: 0.4575 s/iter. ETA=0:07:38
[02/18 00:33:41] mask2former INFO: Inference done 103/1093. Dataloading: 0.0074 s/iter. Inference: 0.2805 s/iter. Eval: 0.1624 s/iter. Total: 0.4505 s/iter. ETA=0:07:25
[02/18 00:33:46] mask2former INFO: Inference done 116/1093. Dataloading: 0.0073 s/iter. Inference: 0.2790 s/iter. Eval: 0.1596 s/iter. Total: 0.4460 s/iter. ETA=0:07:15
[02/18 00:33:52] mask2former INFO: Inference done 128/1093. Dataloading: 0.0073 s/iter. Inference: 0.2781 s/iter. Eval: 0.1590 s/iter. Total: 0.4445 s/iter. ETA=0:07:08
[02/18 00:33:57] mask2former INFO: Inference done 140/1093. Dataloading: 0.0071 s/iter. Inference: 0.2785 s/iter. Eval: 0.1574 s/iter. Total: 0.4432 s/iter. ETA=0:07:02
[02/18 00:34:02] mask2former INFO: Inference done 152/1093. Dataloading: 0.0072 s/iter. Inference: 0.2777 s/iter. Eval: 0.1567 s/iter. Total: 0.4417 s/iter. ETA=0:06:55
[02/18 00:34:07] mask2former INFO: Inference done 164/1093. Dataloading: 0.0072 s/iter. Inference: 0.2774 s/iter. Eval: 0.1559 s/iter. Total: 0.4406 s/iter. ETA=0:06:49
[02/18 00:34:12] mask2former INFO: Inference done 177/1093. Dataloading: 0.0072 s/iter. Inference: 0.2765 s/iter. Eval: 0.1550 s/iter. Total: 0.4389 s/iter. ETA=0:06:42
[02/18 00:34:18] mask2former INFO: Inference done 190/1093. Dataloading: 0.0072 s/iter. Inference: 0.2771 s/iter. Eval: 0.1534 s/iter. Total: 0.4379 s/iter. ETA=0:06:35
[02/18 00:34:23] mask2former INFO: Inference done 202/1093. Dataloading: 0.0074 s/iter. Inference: 0.2787 s/iter. Eval: 0.1526 s/iter. Total: 0.4388 s/iter. ETA=0:06:30
[02/18 00:34:29] mask2former INFO: Inference done 214/1093. Dataloading: 0.0073 s/iter. Inference: 0.2795 s/iter. Eval: 0.1516 s/iter. Total: 0.4386 s/iter. ETA=0:06:25
[02/18 00:34:34] mask2former INFO: Inference done 227/1093. Dataloading: 0.0073 s/iter. Inference: 0.2786 s/iter. Eval: 0.1514 s/iter. Total: 0.4374 s/iter. ETA=0:06:18
[02/18 00:34:39] mask2former INFO: Inference done 239/1093. Dataloading: 0.0075 s/iter. Inference: 0.2777 s/iter. Eval: 0.1515 s/iter. Total: 0.4368 s/iter. ETA=0:06:13
[02/18 00:34:44] mask2former INFO: Inference done 252/1093. Dataloading: 0.0074 s/iter. Inference: 0.2770 s/iter. Eval: 0.1501 s/iter. Total: 0.4346 s/iter. ETA=0:06:05
[02/18 00:34:50] mask2former INFO: Inference done 265/1093. Dataloading: 0.0075 s/iter. Inference: 0.2762 s/iter. Eval: 0.1497 s/iter. Total: 0.4336 s/iter. ETA=0:05:58
[02/18 00:34:55] mask2former INFO: Inference done 277/1093. Dataloading: 0.0075 s/iter. Inference: 0.2764 s/iter. Eval: 0.1497 s/iter. Total: 0.4337 s/iter. ETA=0:05:53
[02/18 00:35:00] mask2former INFO: Inference done 289/1093. Dataloading: 0.0075 s/iter. Inference: 0.2765 s/iter. Eval: 0.1491 s/iter. Total: 0.4332 s/iter. ETA=0:05:48
[02/18 00:35:05] mask2former INFO: Inference done 301/1093. Dataloading: 0.0075 s/iter. Inference: 0.2773 s/iter. Eval: 0.1486 s/iter. Total: 0.4335 s/iter. ETA=0:05:43
[02/18 00:35:10] mask2former INFO: Inference done 313/1093. Dataloading: 0.0074 s/iter. Inference: 0.2775 s/iter. Eval: 0.1483 s/iter. Total: 0.4334 s/iter. ETA=0:05:38
[02/18 00:35:15] mask2former INFO: Inference done 324/1093. Dataloading: 0.0074 s/iter. Inference: 0.2784 s/iter. Eval: 0.1483 s/iter. Total: 0.4342 s/iter. ETA=0:05:33
[02/18 00:35:21] mask2former INFO: Inference done 336/1093. Dataloading: 0.0073 s/iter. Inference: 0.2781 s/iter. Eval: 0.1486 s/iter. Total: 0.4342 s/iter. ETA=0:05:28
[02/18 00:35:26] mask2former INFO: Inference done 349/1093. Dataloading: 0.0073 s/iter. Inference: 0.2779 s/iter. Eval: 0.1477 s/iter. Total: 0.4330 s/iter. ETA=0:05:22
[02/18 00:35:31] mask2former INFO: Inference done 362/1093. Dataloading: 0.0073 s/iter. Inference: 0.2771 s/iter. Eval: 0.1473 s/iter. Total: 0.4319 s/iter. ETA=0:05:15
[02/18 00:35:36] mask2former INFO: Inference done 375/1093. Dataloading: 0.0073 s/iter. Inference: 0.2766 s/iter. Eval: 0.1471 s/iter. Total: 0.4312 s/iter. ETA=0:05:09
[02/18 00:35:42] mask2former INFO: Inference done 387/1093. Dataloading: 0.0073 s/iter. Inference: 0.2766 s/iter. Eval: 0.1478 s/iter. Total: 0.4318 s/iter. ETA=0:05:04
[02/18 00:35:47] mask2former INFO: Inference done 400/1093. Dataloading: 0.0073 s/iter. Inference: 0.2758 s/iter. Eval: 0.1474 s/iter. Total: 0.4306 s/iter. ETA=0:04:58
[02/18 00:35:52] mask2former INFO: Inference done 412/1093. Dataloading: 0.0073 s/iter. Inference: 0.2760 s/iter. Eval: 0.1469 s/iter. Total: 0.4303 s/iter. ETA=0:04:53
[02/18 00:35:57] mask2former INFO: Inference done 424/1093. Dataloading: 0.0073 s/iter. Inference: 0.2759 s/iter. Eval: 0.1470 s/iter. Total: 0.4303 s/iter. ETA=0:04:47
[02/18 00:36:02] mask2former INFO: Inference done 437/1093. Dataloading: 0.0073 s/iter. Inference: 0.2753 s/iter. Eval: 0.1468 s/iter. Total: 0.4294 s/iter. ETA=0:04:41
[02/18 00:36:08] mask2former INFO: Inference done 449/1093. Dataloading: 0.0073 s/iter. Inference: 0.2754 s/iter. Eval: 0.1472 s/iter. Total: 0.4300 s/iter. ETA=0:04:36
[02/18 00:36:13] mask2former INFO: Inference done 461/1093. Dataloading: 0.0072 s/iter. Inference: 0.2754 s/iter. Eval: 0.1470 s/iter. Total: 0.4297 s/iter. ETA=0:04:31
[02/18 00:36:18] mask2former INFO: Inference done 473/1093. Dataloading: 0.0072 s/iter. Inference: 0.2755 s/iter. Eval: 0.1469 s/iter. Total: 0.4297 s/iter. ETA=0:04:26
[02/18 00:36:23] mask2former INFO: Inference done 485/1093. Dataloading: 0.0072 s/iter. Inference: 0.2759 s/iter. Eval: 0.1467 s/iter. Total: 0.4299 s/iter. ETA=0:04:21
[02/18 00:36:28] mask2former INFO: Inference done 497/1093. Dataloading: 0.0072 s/iter. Inference: 0.2758 s/iter. Eval: 0.1470 s/iter. Total: 0.4301 s/iter. ETA=0:04:16
[02/18 00:36:34] mask2former INFO: Inference done 509/1093. Dataloading: 0.0071 s/iter. Inference: 0.2760 s/iter. Eval: 0.1472 s/iter. Total: 0.4304 s/iter. ETA=0:04:11
[02/18 00:36:39] mask2former INFO: Inference done 521/1093. Dataloading: 0.0071 s/iter. Inference: 0.2762 s/iter. Eval: 0.1474 s/iter. Total: 0.4308 s/iter. ETA=0:04:06
[02/18 00:36:44] mask2former INFO: Inference done 533/1093. Dataloading: 0.0071 s/iter. Inference: 0.2762 s/iter. Eval: 0.1474 s/iter. Total: 0.4308 s/iter. ETA=0:04:01
[02/18 00:36:50] mask2former INFO: Inference done 546/1093. Dataloading: 0.0071 s/iter. Inference: 0.2756 s/iter. Eval: 0.1473 s/iter. Total: 0.4301 s/iter. ETA=0:03:55
[02/18 00:36:55] mask2former INFO: Inference done 558/1093. Dataloading: 0.0071 s/iter. Inference: 0.2752 s/iter. Eval: 0.1476 s/iter. Total: 0.4301 s/iter. ETA=0:03:50
[02/18 00:37:00] mask2former INFO: Inference done 570/1093. Dataloading: 0.0071 s/iter. Inference: 0.2757 s/iter. Eval: 0.1477 s/iter. Total: 0.4305 s/iter. ETA=0:03:45
[02/18 00:37:05] mask2former INFO: Inference done 582/1093. Dataloading: 0.0071 s/iter. Inference: 0.2758 s/iter. Eval: 0.1474 s/iter. Total: 0.4304 s/iter. ETA=0:03:39
[02/18 00:37:10] mask2former INFO: Inference done 594/1093. Dataloading: 0.0071 s/iter. Inference: 0.2759 s/iter. Eval: 0.1471 s/iter. Total: 0.4302 s/iter. ETA=0:03:34
[02/18 00:37:15] mask2former INFO: Inference done 606/1093. Dataloading: 0.0070 s/iter. Inference: 0.2757 s/iter. Eval: 0.1471 s/iter. Total: 0.4300 s/iter. ETA=0:03:29
[02/18 00:37:21] mask2former INFO: Inference done 618/1093. Dataloading: 0.0070 s/iter. Inference: 0.2759 s/iter. Eval: 0.1471 s/iter. Total: 0.4302 s/iter. ETA=0:03:24
[02/18 00:37:26] mask2former INFO: Inference done 631/1093. Dataloading: 0.0071 s/iter. Inference: 0.2758 s/iter. Eval: 0.1470 s/iter. Total: 0.4301 s/iter. ETA=0:03:18
[02/18 00:37:31] mask2former INFO: Inference done 643/1093. Dataloading: 0.0071 s/iter. Inference: 0.2760 s/iter. Eval: 0.1469 s/iter. Total: 0.4302 s/iter. ETA=0:03:13
[02/18 00:37:37] mask2former INFO: Inference done 655/1093. Dataloading: 0.0072 s/iter. Inference: 0.2765 s/iter. Eval: 0.1467 s/iter. Total: 0.4305 s/iter. ETA=0:03:08
[02/18 00:37:42] mask2former INFO: Inference done 667/1093. Dataloading: 0.0072 s/iter. Inference: 0.2767 s/iter. Eval: 0.1464 s/iter. Total: 0.4304 s/iter. ETA=0:03:03
[02/18 00:37:47] mask2former INFO: Inference done 680/1093. Dataloading: 0.0071 s/iter. Inference: 0.2764 s/iter. Eval: 0.1467 s/iter. Total: 0.4303 s/iter. ETA=0:02:57
[02/18 00:37:52] mask2former INFO: Inference done 692/1093. Dataloading: 0.0071 s/iter. Inference: 0.2764 s/iter. Eval: 0.1467 s/iter. Total: 0.4303 s/iter. ETA=0:02:52
[02/18 00:37:58] mask2former INFO: Inference done 704/1093. Dataloading: 0.0071 s/iter. Inference: 0.2767 s/iter. Eval: 0.1464 s/iter. Total: 0.4303 s/iter. ETA=0:02:47
[02/18 00:38:03] mask2former INFO: Inference done 716/1093. Dataloading: 0.0074 s/iter. Inference: 0.2766 s/iter. Eval: 0.1461 s/iter. Total: 0.4302 s/iter. ETA=0:02:42
[02/18 00:38:08] mask2former INFO: Inference done 728/1093. Dataloading: 0.0074 s/iter. Inference: 0.2767 s/iter. Eval: 0.1458 s/iter. Total: 0.4300 s/iter. ETA=0:02:36
[02/18 00:38:13] mask2former INFO: Inference done 740/1093. Dataloading: 0.0074 s/iter. Inference: 0.2766 s/iter. Eval: 0.1459 s/iter. Total: 0.4300 s/iter. ETA=0:02:31
[02/18 00:38:18] mask2former INFO: Inference done 751/1093. Dataloading: 0.0074 s/iter. Inference: 0.2768 s/iter. Eval: 0.1460 s/iter. Total: 0.4303 s/iter. ETA=0:02:27
[02/18 00:38:23] mask2former INFO: Inference done 763/1093. Dataloading: 0.0074 s/iter. Inference: 0.2767 s/iter. Eval: 0.1461 s/iter. Total: 0.4303 s/iter. ETA=0:02:22
[02/18 00:38:28] mask2former INFO: Inference done 776/1093. Dataloading: 0.0074 s/iter. Inference: 0.2765 s/iter. Eval: 0.1458 s/iter. Total: 0.4298 s/iter. ETA=0:02:16
[02/18 00:38:33] mask2former INFO: Inference done 787/1093. Dataloading: 0.0074 s/iter. Inference: 0.2769 s/iter. Eval: 0.1458 s/iter. Total: 0.4303 s/iter. ETA=0:02:11
[02/18 00:38:39] mask2former INFO: Inference done 799/1093. Dataloading: 0.0074 s/iter. Inference: 0.2770 s/iter. Eval: 0.1459 s/iter. Total: 0.4303 s/iter. ETA=0:02:06
[02/18 00:38:44] mask2former INFO: Inference done 812/1093. Dataloading: 0.0074 s/iter. Inference: 0.2768 s/iter. Eval: 0.1459 s/iter. Total: 0.4302 s/iter. ETA=0:02:00
[02/18 00:38:50] mask2former INFO: Inference done 824/1093. Dataloading: 0.0074 s/iter. Inference: 0.2773 s/iter. Eval: 0.1459 s/iter. Total: 0.4306 s/iter. ETA=0:01:55
[02/18 00:38:55] mask2former INFO: Inference done 837/1093. Dataloading: 0.0074 s/iter. Inference: 0.2772 s/iter. Eval: 0.1455 s/iter. Total: 0.4302 s/iter. ETA=0:01:50
[02/18 00:39:00] mask2former INFO: Inference done 849/1093. Dataloading: 0.0074 s/iter. Inference: 0.2776 s/iter. Eval: 0.1455 s/iter. Total: 0.4306 s/iter. ETA=0:01:45
[02/18 00:39:05] mask2former INFO: Inference done 860/1093. Dataloading: 0.0074 s/iter. Inference: 0.2779 s/iter. Eval: 0.1456 s/iter. Total: 0.4310 s/iter. ETA=0:01:40
[02/18 00:39:11] mask2former INFO: Inference done 871/1093. Dataloading: 0.0074 s/iter. Inference: 0.2782 s/iter. Eval: 0.1457 s/iter. Total: 0.4315 s/iter. ETA=0:01:35
[02/18 00:39:16] mask2former INFO: Inference done 884/1093. Dataloading: 0.0074 s/iter. Inference: 0.2781 s/iter. Eval: 0.1455 s/iter. Total: 0.4312 s/iter. ETA=0:01:30
[02/18 00:39:21] mask2former INFO: Inference done 895/1093. Dataloading: 0.0074 s/iter. Inference: 0.2788 s/iter. Eval: 0.1456 s/iter. Total: 0.4319 s/iter. ETA=0:01:25
[02/18 00:39:27] mask2former INFO: Inference done 906/1093. Dataloading: 0.0074 s/iter. Inference: 0.2792 s/iter. Eval: 0.1458 s/iter. Total: 0.4325 s/iter. ETA=0:01:20
[02/18 00:39:32] mask2former INFO: Inference done 917/1093. Dataloading: 0.0074 s/iter. Inference: 0.2793 s/iter. Eval: 0.1460 s/iter. Total: 0.4328 s/iter. ETA=0:01:16
[02/18 00:39:37] mask2former INFO: Inference done 929/1093. Dataloading: 0.0074 s/iter. Inference: 0.2794 s/iter. Eval: 0.1460 s/iter. Total: 0.4329 s/iter. ETA=0:01:10
[02/18 00:39:42] mask2former INFO: Inference done 940/1093. Dataloading: 0.0074 s/iter. Inference: 0.2798 s/iter. Eval: 0.1461 s/iter. Total: 0.4334 s/iter. ETA=0:01:06
[02/18 00:39:47] mask2former INFO: Inference done 952/1093. Dataloading: 0.0074 s/iter. Inference: 0.2799 s/iter. Eval: 0.1461 s/iter. Total: 0.4335 s/iter. ETA=0:01:01
[02/18 00:39:53] mask2former INFO: Inference done 964/1093. Dataloading: 0.0074 s/iter. Inference: 0.2800 s/iter. Eval: 0.1460 s/iter. Total: 0.4335 s/iter. ETA=0:00:55
[02/18 00:39:58] mask2former INFO: Inference done 975/1093. Dataloading: 0.0074 s/iter. Inference: 0.2805 s/iter. Eval: 0.1460 s/iter. Total: 0.4339 s/iter. ETA=0:00:51
[02/18 00:40:03] mask2former INFO: Inference done 986/1093. Dataloading: 0.0074 s/iter. Inference: 0.2808 s/iter. Eval: 0.1461 s/iter. Total: 0.4344 s/iter. ETA=0:00:46
[02/18 00:40:08] mask2former INFO: Inference done 998/1093. Dataloading: 0.0074 s/iter. Inference: 0.2808 s/iter. Eval: 0.1461 s/iter. Total: 0.4344 s/iter. ETA=0:00:41
[02/18 00:40:13] mask2former INFO: Inference done 1009/1093. Dataloading: 0.0074 s/iter. Inference: 0.2809 s/iter. Eval: 0.1465 s/iter. Total: 0.4349 s/iter. ETA=0:00:36
[02/18 00:40:19] mask2former INFO: Inference done 1020/1093. Dataloading: 0.0074 s/iter. Inference: 0.2812 s/iter. Eval: 0.1465 s/iter. Total: 0.4352 s/iter. ETA=0:00:31
[02/18 00:40:24] mask2former INFO: Inference done 1032/1093. Dataloading: 0.0074 s/iter. Inference: 0.2815 s/iter. Eval: 0.1465 s/iter. Total: 0.4355 s/iter. ETA=0:00:26
[02/18 00:40:29] mask2former INFO: Inference done 1043/1093. Dataloading: 0.0074 s/iter. Inference: 0.2816 s/iter. Eval: 0.1467 s/iter. Total: 0.4359 s/iter. ETA=0:00:21
[02/18 00:40:34] mask2former INFO: Inference done 1054/1093. Dataloading: 0.0074 s/iter. Inference: 0.2817 s/iter. Eval: 0.1469 s/iter. Total: 0.4362 s/iter. ETA=0:00:17
[02/18 00:40:40] mask2former INFO: Inference done 1065/1093. Dataloading: 0.0074 s/iter. Inference: 0.2820 s/iter. Eval: 0.1470 s/iter. Total: 0.4366 s/iter. ETA=0:00:12
[02/18 00:40:45] mask2former INFO: Inference done 1077/1093. Dataloading: 0.0074 s/iter. Inference: 0.2821 s/iter. Eval: 0.1468 s/iter. Total: 0.4364 s/iter. ETA=0:00:06
[02/18 00:40:50] mask2former INFO: Inference done 1090/1093. Dataloading: 0.0074 s/iter. Inference: 0.2820 s/iter. Eval: 0.1466 s/iter. Total: 0.4362 s/iter. ETA=0:00:01
[02/18 03:18:44] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 03:18:46] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 03:18:46] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 03:19:06] mask2former INFO: Inference done 11/1093. Dataloading: 0.0051 s/iter. Inference: 0.4369 s/iter. Eval: 0.1533 s/iter. Total: 0.5954 s/iter. ETA=0:10:44
[02/18 03:19:11] mask2former INFO: Inference done 19/1093. Dataloading: 0.0074 s/iter. Inference: 0.4466 s/iter. Eval: 0.1760 s/iter. Total: 0.6302 s/iter. ETA=0:11:16
[02/18 03:19:16] mask2former INFO: Inference done 28/1093. Dataloading: 0.0075 s/iter. Inference: 0.4415 s/iter. Eval: 0.1693 s/iter. Total: 0.6184 s/iter. ETA=0:10:58
[02/18 03:19:21] mask2former INFO: Inference done 36/1093. Dataloading: 0.0077 s/iter. Inference: 0.4466 s/iter. Eval: 0.1692 s/iter. Total: 0.6236 s/iter. ETA=0:10:59
[02/18 03:19:27] mask2former INFO: Inference done 44/1093. Dataloading: 0.0074 s/iter. Inference: 0.4498 s/iter. Eval: 0.1793 s/iter. Total: 0.6365 s/iter. ETA=0:11:07
[02/18 03:19:33] mask2former INFO: Inference done 52/1093. Dataloading: 0.0075 s/iter. Inference: 0.4621 s/iter. Eval: 0.1819 s/iter. Total: 0.6516 s/iter. ETA=0:11:18
[02/18 03:19:38] mask2former INFO: Inference done 60/1093. Dataloading: 0.0079 s/iter. Inference: 0.4625 s/iter. Eval: 0.1873 s/iter. Total: 0.6578 s/iter. ETA=0:11:19
[02/18 03:19:44] mask2former INFO: Inference done 69/1093. Dataloading: 0.0081 s/iter. Inference: 0.4581 s/iter. Eval: 0.1880 s/iter. Total: 0.6543 s/iter. ETA=0:11:10
[02/18 03:19:49] mask2former INFO: Inference done 77/1093. Dataloading: 0.0103 s/iter. Inference: 0.4594 s/iter. Eval: 0.1888 s/iter. Total: 0.6585 s/iter. ETA=0:11:09
[02/18 03:19:55] mask2former INFO: Inference done 86/1093. Dataloading: 0.0100 s/iter. Inference: 0.4567 s/iter. Eval: 0.1881 s/iter. Total: 0.6549 s/iter. ETA=0:10:59
[02/18 03:20:01] mask2former INFO: Inference done 95/1093. Dataloading: 0.0098 s/iter. Inference: 0.4548 s/iter. Eval: 0.1867 s/iter. Total: 0.6514 s/iter. ETA=0:10:50
[02/18 03:20:06] mask2former INFO: Inference done 103/1093. Dataloading: 0.0094 s/iter. Inference: 0.4538 s/iter. Eval: 0.1862 s/iter. Total: 0.6496 s/iter. ETA=0:10:43
[02/18 03:20:11] mask2former INFO: Inference done 112/1093. Dataloading: 0.0101 s/iter. Inference: 0.4505 s/iter. Eval: 0.1856 s/iter. Total: 0.6464 s/iter. ETA=0:10:34
[02/18 03:20:17] mask2former INFO: Inference done 121/1093. Dataloading: 0.0102 s/iter. Inference: 0.4480 s/iter. Eval: 0.1843 s/iter. Total: 0.6427 s/iter. ETA=0:10:24
[02/18 03:20:22] mask2former INFO: Inference done 129/1093. Dataloading: 0.0101 s/iter. Inference: 0.4488 s/iter. Eval: 0.1857 s/iter. Total: 0.6447 s/iter. ETA=0:10:21
[02/18 03:20:27] mask2former INFO: Inference done 136/1093. Dataloading: 0.0103 s/iter. Inference: 0.4500 s/iter. Eval: 0.1883 s/iter. Total: 0.6487 s/iter. ETA=0:10:20
[02/18 03:20:32] mask2former INFO: Inference done 144/1093. Dataloading: 0.0101 s/iter. Inference: 0.4492 s/iter. Eval: 0.1889 s/iter. Total: 0.6484 s/iter. ETA=0:10:15
[02/18 03:20:38] mask2former INFO: Inference done 153/1093. Dataloading: 0.0099 s/iter. Inference: 0.4483 s/iter. Eval: 0.1871 s/iter. Total: 0.6454 s/iter. ETA=0:10:06
[02/18 03:20:43] mask2former INFO: Inference done 161/1093. Dataloading: 0.0101 s/iter. Inference: 0.4487 s/iter. Eval: 0.1874 s/iter. Total: 0.6463 s/iter. ETA=0:10:02
[02/18 03:20:48] mask2former INFO: Inference done 169/1093. Dataloading: 0.0101 s/iter. Inference: 0.4493 s/iter. Eval: 0.1878 s/iter. Total: 0.6473 s/iter. ETA=0:09:58
[02/18 03:20:53] mask2former INFO: Inference done 177/1093. Dataloading: 0.0101 s/iter. Inference: 0.4493 s/iter. Eval: 0.1872 s/iter. Total: 0.6467 s/iter. ETA=0:09:52
[02/18 03:20:59] mask2former INFO: Inference done 185/1093. Dataloading: 0.0102 s/iter. Inference: 0.4493 s/iter. Eval: 0.1896 s/iter. Total: 0.6491 s/iter. ETA=0:09:49
[02/18 03:21:04] mask2former INFO: Inference done 193/1093. Dataloading: 0.0102 s/iter. Inference: 0.4500 s/iter. Eval: 0.1903 s/iter. Total: 0.6508 s/iter. ETA=0:09:45
[02/18 03:21:10] mask2former INFO: Inference done 201/1093. Dataloading: 0.0101 s/iter. Inference: 0.4494 s/iter. Eval: 0.1919 s/iter. Total: 0.6516 s/iter. ETA=0:09:41
[02/18 03:21:15] mask2former INFO: Inference done 209/1093. Dataloading: 0.0101 s/iter. Inference: 0.4495 s/iter. Eval: 0.1917 s/iter. Total: 0.6515 s/iter. ETA=0:09:35
[02/18 03:21:20] mask2former INFO: Inference done 218/1093. Dataloading: 0.0099 s/iter. Inference: 0.4487 s/iter. Eval: 0.1907 s/iter. Total: 0.6495 s/iter. ETA=0:09:28
[02/18 03:21:26] mask2former INFO: Inference done 226/1093. Dataloading: 0.0100 s/iter. Inference: 0.4489 s/iter. Eval: 0.1909 s/iter. Total: 0.6501 s/iter. ETA=0:09:23
[02/18 03:21:31] mask2former INFO: Inference done 234/1093. Dataloading: 0.0101 s/iter. Inference: 0.4489 s/iter. Eval: 0.1904 s/iter. Total: 0.6496 s/iter. ETA=0:09:17
[02/18 03:21:36] mask2former INFO: Inference done 242/1093. Dataloading: 0.0100 s/iter. Inference: 0.4493 s/iter. Eval: 0.1909 s/iter. Total: 0.6504 s/iter. ETA=0:09:13
[02/18 03:21:42] mask2former INFO: Inference done 251/1093. Dataloading: 0.0098 s/iter. Inference: 0.4477 s/iter. Eval: 0.1903 s/iter. Total: 0.6480 s/iter. ETA=0:09:05
[02/18 03:21:47] mask2former INFO: Inference done 259/1093. Dataloading: 0.0098 s/iter. Inference: 0.4479 s/iter. Eval: 0.1909 s/iter. Total: 0.6488 s/iter. ETA=0:09:01
[02/18 03:21:53] mask2former INFO: Inference done 268/1093. Dataloading: 0.0098 s/iter. Inference: 0.4488 s/iter. Eval: 0.1900 s/iter. Total: 0.6488 s/iter. ETA=0:08:55
[02/18 03:21:58] mask2former INFO: Inference done 276/1093. Dataloading: 0.0097 s/iter. Inference: 0.4483 s/iter. Eval: 0.1915 s/iter. Total: 0.6497 s/iter. ETA=0:08:50
[02/18 03:22:04] mask2former INFO: Inference done 284/1093. Dataloading: 0.0098 s/iter. Inference: 0.4491 s/iter. Eval: 0.1917 s/iter. Total: 0.6509 s/iter. ETA=0:08:46
[02/18 03:22:09] mask2former INFO: Inference done 292/1093. Dataloading: 0.0098 s/iter. Inference: 0.4490 s/iter. Eval: 0.1914 s/iter. Total: 0.6504 s/iter. ETA=0:08:40
[02/18 03:22:14] mask2former INFO: Inference done 301/1093. Dataloading: 0.0096 s/iter. Inference: 0.4479 s/iter. Eval: 0.1899 s/iter. Total: 0.6477 s/iter. ETA=0:08:32
[02/18 03:22:19] mask2former INFO: Inference done 309/1093. Dataloading: 0.0096 s/iter. Inference: 0.4473 s/iter. Eval: 0.1901 s/iter. Total: 0.6473 s/iter. ETA=0:08:27
[02/18 03:22:24] mask2former INFO: Inference done 316/1093. Dataloading: 0.0096 s/iter. Inference: 0.4485 s/iter. Eval: 0.1907 s/iter. Total: 0.6491 s/iter. ETA=0:08:24
[02/18 03:22:29] mask2former INFO: Inference done 325/1093. Dataloading: 0.0096 s/iter. Inference: 0.4481 s/iter. Eval: 0.1899 s/iter. Total: 0.6478 s/iter. ETA=0:08:17
[02/18 03:22:35] mask2former INFO: Inference done 333/1093. Dataloading: 0.0095 s/iter. Inference: 0.4491 s/iter. Eval: 0.1897 s/iter. Total: 0.6485 s/iter. ETA=0:08:12
[02/18 03:22:40] mask2former INFO: Inference done 341/1093. Dataloading: 0.0095 s/iter. Inference: 0.4493 s/iter. Eval: 0.1897 s/iter. Total: 0.6487 s/iter. ETA=0:08:07
[02/18 03:22:46] mask2former INFO: Inference done 350/1093. Dataloading: 0.0094 s/iter. Inference: 0.4493 s/iter. Eval: 0.1896 s/iter. Total: 0.6485 s/iter. ETA=0:08:01
[02/18 03:22:51] mask2former INFO: Inference done 358/1093. Dataloading: 0.0094 s/iter. Inference: 0.4496 s/iter. Eval: 0.1898 s/iter. Total: 0.6491 s/iter. ETA=0:07:57
[02/18 03:22:56] mask2former INFO: Inference done 366/1093. Dataloading: 0.0095 s/iter. Inference: 0.4495 s/iter. Eval: 0.1895 s/iter. Total: 0.6488 s/iter. ETA=0:07:51
[02/18 03:23:02] mask2former INFO: Inference done 374/1093. Dataloading: 0.0095 s/iter. Inference: 0.4501 s/iter. Eval: 0.1893 s/iter. Total: 0.6491 s/iter. ETA=0:07:46
[02/18 03:23:07] mask2former INFO: Inference done 382/1093. Dataloading: 0.0094 s/iter. Inference: 0.4505 s/iter. Eval: 0.1892 s/iter. Total: 0.6494 s/iter. ETA=0:07:41
[02/18 03:23:13] mask2former INFO: Inference done 391/1093. Dataloading: 0.0094 s/iter. Inference: 0.4502 s/iter. Eval: 0.1891 s/iter. Total: 0.6489 s/iter. ETA=0:07:35
[02/18 03:23:18] mask2former INFO: Inference done 400/1093. Dataloading: 0.0093 s/iter. Inference: 0.4498 s/iter. Eval: 0.1884 s/iter. Total: 0.6478 s/iter. ETA=0:07:28
[02/18 03:23:23] mask2former INFO: Inference done 408/1093. Dataloading: 0.0095 s/iter. Inference: 0.4500 s/iter. Eval: 0.1885 s/iter. Total: 0.6483 s/iter. ETA=0:07:24
[02/18 03:23:29] mask2former INFO: Inference done 417/1093. Dataloading: 0.0095 s/iter. Inference: 0.4493 s/iter. Eval: 0.1882 s/iter. Total: 0.6471 s/iter. ETA=0:07:17
[02/18 03:23:34] mask2former INFO: Inference done 425/1093. Dataloading: 0.0095 s/iter. Inference: 0.4496 s/iter. Eval: 0.1878 s/iter. Total: 0.6471 s/iter. ETA=0:07:12
[02/18 03:23:39] mask2former INFO: Inference done 433/1093. Dataloading: 0.0094 s/iter. Inference: 0.4497 s/iter. Eval: 0.1875 s/iter. Total: 0.6469 s/iter. ETA=0:07:06
[02/18 03:23:44] mask2former INFO: Inference done 441/1093. Dataloading: 0.0094 s/iter. Inference: 0.4500 s/iter. Eval: 0.1879 s/iter. Total: 0.6475 s/iter. ETA=0:07:02
[02/18 03:23:50] mask2former INFO: Inference done 450/1093. Dataloading: 0.0094 s/iter. Inference: 0.4500 s/iter. Eval: 0.1873 s/iter. Total: 0.6469 s/iter. ETA=0:06:55
[02/18 03:23:55] mask2former INFO: Inference done 458/1093. Dataloading: 0.0093 s/iter. Inference: 0.4499 s/iter. Eval: 0.1875 s/iter. Total: 0.6469 s/iter. ETA=0:06:50
[02/18 03:24:00] mask2former INFO: Inference done 466/1093. Dataloading: 0.0093 s/iter. Inference: 0.4497 s/iter. Eval: 0.1879 s/iter. Total: 0.6471 s/iter. ETA=0:06:45
[02/18 03:24:06] mask2former INFO: Inference done 475/1093. Dataloading: 0.0093 s/iter. Inference: 0.4499 s/iter. Eval: 0.1874 s/iter. Total: 0.6468 s/iter. ETA=0:06:39
[02/18 03:24:12] mask2former INFO: Inference done 484/1093. Dataloading: 0.0094 s/iter. Inference: 0.4497 s/iter. Eval: 0.1869 s/iter. Total: 0.6461 s/iter. ETA=0:06:33
[02/18 03:24:17] mask2former INFO: Inference done 492/1093. Dataloading: 0.0094 s/iter. Inference: 0.4496 s/iter. Eval: 0.1870 s/iter. Total: 0.6463 s/iter. ETA=0:06:28
[02/18 03:24:22] mask2former INFO: Inference done 501/1093. Dataloading: 0.0094 s/iter. Inference: 0.4495 s/iter. Eval: 0.1864 s/iter. Total: 0.6456 s/iter. ETA=0:06:22
[02/18 03:24:28] mask2former INFO: Inference done 509/1093. Dataloading: 0.0095 s/iter. Inference: 0.4504 s/iter. Eval: 0.1864 s/iter. Total: 0.6464 s/iter. ETA=0:06:17
[02/18 03:24:33] mask2former INFO: Inference done 517/1093. Dataloading: 0.0095 s/iter. Inference: 0.4502 s/iter. Eval: 0.1866 s/iter. Total: 0.6465 s/iter. ETA=0:06:12
[02/18 03:24:38] mask2former INFO: Inference done 525/1093. Dataloading: 0.0094 s/iter. Inference: 0.4501 s/iter. Eval: 0.1867 s/iter. Total: 0.6464 s/iter. ETA=0:06:07
[02/18 03:24:44] mask2former INFO: Inference done 534/1093. Dataloading: 0.0094 s/iter. Inference: 0.4497 s/iter. Eval: 0.1865 s/iter. Total: 0.6458 s/iter. ETA=0:06:01
[02/18 03:24:49] mask2former INFO: Inference done 542/1093. Dataloading: 0.0093 s/iter. Inference: 0.4498 s/iter. Eval: 0.1862 s/iter. Total: 0.6455 s/iter. ETA=0:05:55
[02/18 03:24:54] mask2former INFO: Inference done 551/1093. Dataloading: 0.0093 s/iter. Inference: 0.4497 s/iter. Eval: 0.1857 s/iter. Total: 0.6449 s/iter. ETA=0:05:49
[02/18 03:24:59] mask2former INFO: Inference done 559/1093. Dataloading: 0.0093 s/iter. Inference: 0.4499 s/iter. Eval: 0.1855 s/iter. Total: 0.6450 s/iter. ETA=0:05:44
[02/18 03:25:05] mask2former INFO: Inference done 568/1093. Dataloading: 0.0094 s/iter. Inference: 0.4494 s/iter. Eval: 0.1854 s/iter. Total: 0.6443 s/iter. ETA=0:05:38
[02/18 03:25:10] mask2former INFO: Inference done 576/1093. Dataloading: 0.0093 s/iter. Inference: 0.4498 s/iter. Eval: 0.1852 s/iter. Total: 0.6445 s/iter. ETA=0:05:33
[02/18 03:25:15] mask2former INFO: Inference done 585/1093. Dataloading: 0.0094 s/iter. Inference: 0.4496 s/iter. Eval: 0.1844 s/iter. Total: 0.6436 s/iter. ETA=0:05:26
[02/18 03:25:21] mask2former INFO: Inference done 593/1093. Dataloading: 0.0094 s/iter. Inference: 0.4499 s/iter. Eval: 0.1845 s/iter. Total: 0.6439 s/iter. ETA=0:05:21
[02/18 03:25:26] mask2former INFO: Inference done 602/1093. Dataloading: 0.0094 s/iter. Inference: 0.4496 s/iter. Eval: 0.1840 s/iter. Total: 0.6431 s/iter. ETA=0:05:15
[02/18 03:25:31] mask2former INFO: Inference done 609/1093. Dataloading: 0.0095 s/iter. Inference: 0.4497 s/iter. Eval: 0.1846 s/iter. Total: 0.6440 s/iter. ETA=0:05:11
[02/18 03:25:36] mask2former INFO: Inference done 617/1093. Dataloading: 0.0094 s/iter. Inference: 0.4495 s/iter. Eval: 0.1850 s/iter. Total: 0.6441 s/iter. ETA=0:05:06
[02/18 03:25:42] mask2former INFO: Inference done 626/1093. Dataloading: 0.0094 s/iter. Inference: 0.4494 s/iter. Eval: 0.1849 s/iter. Total: 0.6439 s/iter. ETA=0:05:00
[02/18 03:25:48] mask2former INFO: Inference done 634/1093. Dataloading: 0.0095 s/iter. Inference: 0.4499 s/iter. Eval: 0.1851 s/iter. Total: 0.6446 s/iter. ETA=0:04:55
[02/18 03:25:53] mask2former INFO: Inference done 642/1093. Dataloading: 0.0095 s/iter. Inference: 0.4500 s/iter. Eval: 0.1848 s/iter. Total: 0.6445 s/iter. ETA=0:04:50
[02/18 03:25:58] mask2former INFO: Inference done 650/1093. Dataloading: 0.0095 s/iter. Inference: 0.4504 s/iter. Eval: 0.1851 s/iter. Total: 0.6451 s/iter. ETA=0:04:45
[02/18 03:26:03] mask2former INFO: Inference done 658/1093. Dataloading: 0.0095 s/iter. Inference: 0.4505 s/iter. Eval: 0.1848 s/iter. Total: 0.6449 s/iter. ETA=0:04:40
[02/18 03:26:09] mask2former INFO: Inference done 667/1093. Dataloading: 0.0095 s/iter. Inference: 0.4506 s/iter. Eval: 0.1845 s/iter. Total: 0.6448 s/iter. ETA=0:04:34
[02/18 03:26:14] mask2former INFO: Inference done 676/1093. Dataloading: 0.0095 s/iter. Inference: 0.4504 s/iter. Eval: 0.1843 s/iter. Total: 0.6444 s/iter. ETA=0:04:28
[02/18 03:26:20] mask2former INFO: Inference done 683/1093. Dataloading: 0.0095 s/iter. Inference: 0.4507 s/iter. Eval: 0.1848 s/iter. Total: 0.6452 s/iter. ETA=0:04:24
[02/18 03:26:25] mask2former INFO: Inference done 691/1093. Dataloading: 0.0094 s/iter. Inference: 0.4511 s/iter. Eval: 0.1845 s/iter. Total: 0.6453 s/iter. ETA=0:04:19
[02/18 03:26:30] mask2former INFO: Inference done 700/1093. Dataloading: 0.0094 s/iter. Inference: 0.4511 s/iter. Eval: 0.1843 s/iter. Total: 0.6450 s/iter. ETA=0:04:13
[02/18 03:26:36] mask2former INFO: Inference done 708/1093. Dataloading: 0.0094 s/iter. Inference: 0.4515 s/iter. Eval: 0.1848 s/iter. Total: 0.6458 s/iter. ETA=0:04:08
[02/18 03:26:41] mask2former INFO: Inference done 716/1093. Dataloading: 0.0094 s/iter. Inference: 0.4511 s/iter. Eval: 0.1849 s/iter. Total: 0.6456 s/iter. ETA=0:04:03
[02/18 03:26:46] mask2former INFO: Inference done 724/1093. Dataloading: 0.0094 s/iter. Inference: 0.4510 s/iter. Eval: 0.1849 s/iter. Total: 0.6455 s/iter. ETA=0:03:58
[02/18 03:26:51] mask2former INFO: Inference done 732/1093. Dataloading: 0.0094 s/iter. Inference: 0.4509 s/iter. Eval: 0.1848 s/iter. Total: 0.6453 s/iter. ETA=0:03:52
[02/18 03:26:57] mask2former INFO: Inference done 740/1093. Dataloading: 0.0094 s/iter. Inference: 0.4512 s/iter. Eval: 0.1848 s/iter. Total: 0.6456 s/iter. ETA=0:03:47
[02/18 03:27:02] mask2former INFO: Inference done 749/1093. Dataloading: 0.0094 s/iter. Inference: 0.4508 s/iter. Eval: 0.1848 s/iter. Total: 0.6451 s/iter. ETA=0:03:41
[02/18 03:27:08] mask2former INFO: Inference done 757/1093. Dataloading: 0.0094 s/iter. Inference: 0.4511 s/iter. Eval: 0.1849 s/iter. Total: 0.6456 s/iter. ETA=0:03:36
[02/18 03:27:13] mask2former INFO: Inference done 765/1093. Dataloading: 0.0093 s/iter. Inference: 0.4514 s/iter. Eval: 0.1849 s/iter. Total: 0.6459 s/iter. ETA=0:03:31
[02/18 03:27:18] mask2former INFO: Inference done 773/1093. Dataloading: 0.0093 s/iter. Inference: 0.4514 s/iter. Eval: 0.1850 s/iter. Total: 0.6459 s/iter. ETA=0:03:26
[02/18 03:27:24] mask2former INFO: Inference done 782/1093. Dataloading: 0.0094 s/iter. Inference: 0.4512 s/iter. Eval: 0.1849 s/iter. Total: 0.6457 s/iter. ETA=0:03:20
[02/18 03:27:29] mask2former INFO: Inference done 790/1093. Dataloading: 0.0093 s/iter. Inference: 0.4513 s/iter. Eval: 0.1854 s/iter. Total: 0.6463 s/iter. ETA=0:03:15
[02/18 03:27:35] mask2former INFO: Inference done 799/1093. Dataloading: 0.0093 s/iter. Inference: 0.4515 s/iter. Eval: 0.1851 s/iter. Total: 0.6461 s/iter. ETA=0:03:09
[02/18 03:27:40] mask2former INFO: Inference done 807/1093. Dataloading: 0.0093 s/iter. Inference: 0.4514 s/iter. Eval: 0.1851 s/iter. Total: 0.6460 s/iter. ETA=0:03:04
[02/18 03:27:45] mask2former INFO: Inference done 815/1093. Dataloading: 0.0093 s/iter. Inference: 0.4513 s/iter. Eval: 0.1854 s/iter. Total: 0.6461 s/iter. ETA=0:02:59
[02/18 03:27:50] mask2former INFO: Inference done 823/1093. Dataloading: 0.0094 s/iter. Inference: 0.4512 s/iter. Eval: 0.1852 s/iter. Total: 0.6459 s/iter. ETA=0:02:54
[02/18 03:27:56] mask2former INFO: Inference done 831/1093. Dataloading: 0.0093 s/iter. Inference: 0.4512 s/iter. Eval: 0.1854 s/iter. Total: 0.6462 s/iter. ETA=0:02:49
[02/18 03:28:01] mask2former INFO: Inference done 839/1093. Dataloading: 0.0093 s/iter. Inference: 0.4513 s/iter. Eval: 0.1853 s/iter. Total: 0.6461 s/iter. ETA=0:02:44
[02/18 03:28:06] mask2former INFO: Inference done 847/1093. Dataloading: 0.0093 s/iter. Inference: 0.4512 s/iter. Eval: 0.1852 s/iter. Total: 0.6460 s/iter. ETA=0:02:38
[02/18 03:28:11] mask2former INFO: Inference done 856/1093. Dataloading: 0.0093 s/iter. Inference: 0.4511 s/iter. Eval: 0.1849 s/iter. Total: 0.6455 s/iter. ETA=0:02:32
[02/18 03:28:17] mask2former INFO: Inference done 864/1093. Dataloading: 0.0093 s/iter. Inference: 0.4514 s/iter. Eval: 0.1848 s/iter. Total: 0.6457 s/iter. ETA=0:02:27
[02/18 03:28:22] mask2former INFO: Inference done 871/1093. Dataloading: 0.0094 s/iter. Inference: 0.4519 s/iter. Eval: 0.1853 s/iter. Total: 0.6467 s/iter. ETA=0:02:23
[02/18 03:28:28] mask2former INFO: Inference done 880/1093. Dataloading: 0.0094 s/iter. Inference: 0.4516 s/iter. Eval: 0.1850 s/iter. Total: 0.6462 s/iter. ETA=0:02:17
[02/18 03:28:33] mask2former INFO: Inference done 889/1093. Dataloading: 0.0093 s/iter. Inference: 0.4515 s/iter. Eval: 0.1848 s/iter. Total: 0.6459 s/iter. ETA=0:02:11
[02/18 03:28:38] mask2former INFO: Inference done 897/1093. Dataloading: 0.0093 s/iter. Inference: 0.4514 s/iter. Eval: 0.1848 s/iter. Total: 0.6457 s/iter. ETA=0:02:06
[02/18 03:28:43] mask2former INFO: Inference done 906/1093. Dataloading: 0.0093 s/iter. Inference: 0.4513 s/iter. Eval: 0.1844 s/iter. Total: 0.6452 s/iter. ETA=0:02:00
[02/18 03:28:49] mask2former INFO: Inference done 915/1093. Dataloading: 0.0093 s/iter. Inference: 0.4510 s/iter. Eval: 0.1844 s/iter. Total: 0.6449 s/iter. ETA=0:01:54
[02/18 03:28:54] mask2former INFO: Inference done 923/1093. Dataloading: 0.0093 s/iter. Inference: 0.4511 s/iter. Eval: 0.1844 s/iter. Total: 0.6449 s/iter. ETA=0:01:49
[02/18 03:29:00] mask2former INFO: Inference done 932/1093. Dataloading: 0.0093 s/iter. Inference: 0.4509 s/iter. Eval: 0.1842 s/iter. Total: 0.6446 s/iter. ETA=0:01:43
[02/18 03:29:05] mask2former INFO: Inference done 941/1093. Dataloading: 0.0093 s/iter. Inference: 0.4509 s/iter. Eval: 0.1841 s/iter. Total: 0.6445 s/iter. ETA=0:01:37
[02/18 03:29:10] mask2former INFO: Inference done 949/1093. Dataloading: 0.0093 s/iter. Inference: 0.4511 s/iter. Eval: 0.1839 s/iter. Total: 0.6445 s/iter. ETA=0:01:32
[02/18 03:29:16] mask2former INFO: Inference done 957/1093. Dataloading: 0.0093 s/iter. Inference: 0.4512 s/iter. Eval: 0.1839 s/iter. Total: 0.6445 s/iter. ETA=0:01:27
[02/18 03:29:21] mask2former INFO: Inference done 965/1093. Dataloading: 0.0093 s/iter. Inference: 0.4514 s/iter. Eval: 0.1839 s/iter. Total: 0.6449 s/iter. ETA=0:01:22
[02/18 03:29:27] mask2former INFO: Inference done 974/1093. Dataloading: 0.0093 s/iter. Inference: 0.4515 s/iter. Eval: 0.1837 s/iter. Total: 0.6447 s/iter. ETA=0:01:16
[02/18 03:29:32] mask2former INFO: Inference done 982/1093. Dataloading: 0.0093 s/iter. Inference: 0.4516 s/iter. Eval: 0.1839 s/iter. Total: 0.6449 s/iter. ETA=0:01:11
[02/18 03:29:37] mask2former INFO: Inference done 990/1093. Dataloading: 0.0093 s/iter. Inference: 0.4515 s/iter. Eval: 0.1839 s/iter. Total: 0.6449 s/iter. ETA=0:01:06
[02/18 03:29:43] mask2former INFO: Inference done 999/1093. Dataloading: 0.0093 s/iter. Inference: 0.4513 s/iter. Eval: 0.1837 s/iter. Total: 0.6445 s/iter. ETA=0:01:00
[02/18 03:29:48] mask2former INFO: Inference done 1006/1093. Dataloading: 0.0092 s/iter. Inference: 0.4517 s/iter. Eval: 0.1839 s/iter. Total: 0.6450 s/iter. ETA=0:00:56
[02/18 03:29:53] mask2former INFO: Inference done 1014/1093. Dataloading: 0.0092 s/iter. Inference: 0.4517 s/iter. Eval: 0.1841 s/iter. Total: 0.6453 s/iter. ETA=0:00:50
[02/18 03:29:58] mask2former INFO: Inference done 1022/1093. Dataloading: 0.0092 s/iter. Inference: 0.4518 s/iter. Eval: 0.1841 s/iter. Total: 0.6453 s/iter. ETA=0:00:45
[02/18 03:30:04] mask2former INFO: Inference done 1031/1093. Dataloading: 0.0092 s/iter. Inference: 0.4517 s/iter. Eval: 0.1838 s/iter. Total: 0.6448 s/iter. ETA=0:00:39
[02/18 03:30:09] mask2former INFO: Inference done 1039/1093. Dataloading: 0.0092 s/iter. Inference: 0.4516 s/iter. Eval: 0.1838 s/iter. Total: 0.6448 s/iter. ETA=0:00:34
[02/18 03:30:14] mask2former INFO: Inference done 1048/1093. Dataloading: 0.0092 s/iter. Inference: 0.4515 s/iter. Eval: 0.1834 s/iter. Total: 0.6443 s/iter. ETA=0:00:28
[02/18 03:30:19] mask2former INFO: Inference done 1057/1093. Dataloading: 0.0092 s/iter. Inference: 0.4510 s/iter. Eval: 0.1833 s/iter. Total: 0.6437 s/iter. ETA=0:00:23
[02/18 03:30:25] mask2former INFO: Inference done 1065/1093. Dataloading: 0.0092 s/iter. Inference: 0.4513 s/iter. Eval: 0.1833 s/iter. Total: 0.6441 s/iter. ETA=0:00:18
[02/18 03:30:30] mask2former INFO: Inference done 1073/1093. Dataloading: 0.0092 s/iter. Inference: 0.4516 s/iter. Eval: 0.1834 s/iter. Total: 0.6445 s/iter. ETA=0:00:12
[02/18 03:30:36] mask2former INFO: Inference done 1081/1093. Dataloading: 0.0093 s/iter. Inference: 0.4519 s/iter. Eval: 0.1836 s/iter. Total: 0.6449 s/iter. ETA=0:00:07
[02/18 03:30:42] mask2former INFO: Inference done 1087/1093. Dataloading: 0.0092 s/iter. Inference: 0.4533 s/iter. Eval: 0.1842 s/iter. Total: 0.6469 s/iter. ETA=0:00:03
[02/18 03:30:47] mask2former INFO: Inference done 1093/1093. Dataloading: 0.0092 s/iter. Inference: 0.4539 s/iter. Eval: 0.1848 s/iter. Total: 0.6482 s/iter. ETA=0:00:00
[02/18 04:42:56] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 04:42:57] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 04:42:57] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 04:43:11] mask2former INFO: Inference done 11/1093. Dataloading: 0.0036 s/iter. Inference: 0.2247 s/iter. Eval: 0.1181 s/iter. Total: 0.3464 s/iter. ETA=0:06:14
[02/18 04:43:17] mask2former INFO: Inference done 26/1093. Dataloading: 0.0045 s/iter. Inference: 0.2356 s/iter. Eval: 0.1170 s/iter. Total: 0.3572 s/iter. ETA=0:06:21
[02/18 04:43:22] mask2former INFO: Inference done 40/1093. Dataloading: 0.0051 s/iter. Inference: 0.2447 s/iter. Eval: 0.1148 s/iter. Total: 0.3646 s/iter. ETA=0:06:23
[02/18 04:43:27] mask2former INFO: Inference done 54/1093. Dataloading: 0.0052 s/iter. Inference: 0.2450 s/iter. Eval: 0.1148 s/iter. Total: 0.3651 s/iter. ETA=0:06:19
[02/18 04:43:32] mask2former INFO: Inference done 68/1093. Dataloading: 0.0052 s/iter. Inference: 0.2455 s/iter. Eval: 0.1174 s/iter. Total: 0.3682 s/iter. ETA=0:06:17
[02/18 04:43:38] mask2former INFO: Inference done 82/1093. Dataloading: 0.0054 s/iter. Inference: 0.2477 s/iter. Eval: 0.1170 s/iter. Total: 0.3701 s/iter. ETA=0:06:14
[02/18 04:43:43] mask2former INFO: Inference done 96/1093. Dataloading: 0.0054 s/iter. Inference: 0.2454 s/iter. Eval: 0.1191 s/iter. Total: 0.3700 s/iter. ETA=0:06:08
[02/18 04:43:48] mask2former INFO: Inference done 109/1093. Dataloading: 0.0055 s/iter. Inference: 0.2456 s/iter. Eval: 0.1220 s/iter. Total: 0.3732 s/iter. ETA=0:06:07
[02/18 04:43:53] mask2former INFO: Inference done 122/1093. Dataloading: 0.0054 s/iter. Inference: 0.2467 s/iter. Eval: 0.1225 s/iter. Total: 0.3746 s/iter. ETA=0:06:03
[02/18 04:43:58] mask2former INFO: Inference done 136/1093. Dataloading: 0.0055 s/iter. Inference: 0.2479 s/iter. Eval: 0.1214 s/iter. Total: 0.3749 s/iter. ETA=0:05:58
[02/18 04:44:03] mask2former INFO: Inference done 150/1093. Dataloading: 0.0055 s/iter. Inference: 0.2463 s/iter. Eval: 0.1215 s/iter. Total: 0.3733 s/iter. ETA=0:05:52
[02/18 04:44:08] mask2former INFO: Inference done 164/1093. Dataloading: 0.0055 s/iter. Inference: 0.2461 s/iter. Eval: 0.1217 s/iter. Total: 0.3733 s/iter. ETA=0:05:46
[02/18 04:44:14] mask2former INFO: Inference done 178/1093. Dataloading: 0.0055 s/iter. Inference: 0.2453 s/iter. Eval: 0.1224 s/iter. Total: 0.3732 s/iter. ETA=0:05:41
[02/18 04:44:19] mask2former INFO: Inference done 192/1093. Dataloading: 0.0055 s/iter. Inference: 0.2450 s/iter. Eval: 0.1223 s/iter. Total: 0.3729 s/iter. ETA=0:05:35
[02/18 04:44:24] mask2former INFO: Inference done 206/1093. Dataloading: 0.0057 s/iter. Inference: 0.2451 s/iter. Eval: 0.1226 s/iter. Total: 0.3734 s/iter. ETA=0:05:31
[02/18 04:44:29] mask2former INFO: Inference done 219/1093. Dataloading: 0.0056 s/iter. Inference: 0.2459 s/iter. Eval: 0.1229 s/iter. Total: 0.3746 s/iter. ETA=0:05:27
[02/18 04:44:34] mask2former INFO: Inference done 232/1093. Dataloading: 0.0057 s/iter. Inference: 0.2467 s/iter. Eval: 0.1233 s/iter. Total: 0.3758 s/iter. ETA=0:05:23
[02/18 04:44:40] mask2former INFO: Inference done 245/1093. Dataloading: 0.0057 s/iter. Inference: 0.2475 s/iter. Eval: 0.1240 s/iter. Total: 0.3772 s/iter. ETA=0:05:19
[02/18 04:44:45] mask2former INFO: Inference done 259/1093. Dataloading: 0.0057 s/iter. Inference: 0.2471 s/iter. Eval: 0.1235 s/iter. Total: 0.3764 s/iter. ETA=0:05:13
[02/18 04:44:50] mask2former INFO: Inference done 273/1093. Dataloading: 0.0057 s/iter. Inference: 0.2468 s/iter. Eval: 0.1232 s/iter. Total: 0.3758 s/iter. ETA=0:05:08
[02/18 04:44:55] mask2former INFO: Inference done 287/1093. Dataloading: 0.0057 s/iter. Inference: 0.2470 s/iter. Eval: 0.1222 s/iter. Total: 0.3749 s/iter. ETA=0:05:02
[02/18 04:45:00] mask2former INFO: Inference done 300/1093. Dataloading: 0.0057 s/iter. Inference: 0.2475 s/iter. Eval: 0.1222 s/iter. Total: 0.3756 s/iter. ETA=0:04:57
[02/18 04:45:05] mask2former INFO: Inference done 314/1093. Dataloading: 0.0057 s/iter. Inference: 0.2475 s/iter. Eval: 0.1219 s/iter. Total: 0.3752 s/iter. ETA=0:04:52
[02/18 04:45:10] mask2former INFO: Inference done 328/1093. Dataloading: 0.0057 s/iter. Inference: 0.2472 s/iter. Eval: 0.1225 s/iter. Total: 0.3754 s/iter. ETA=0:04:47
[02/18 04:45:16] mask2former INFO: Inference done 343/1093. Dataloading: 0.0057 s/iter. Inference: 0.2469 s/iter. Eval: 0.1218 s/iter. Total: 0.3745 s/iter. ETA=0:04:40
[02/18 04:45:21] mask2former INFO: Inference done 357/1093. Dataloading: 0.0057 s/iter. Inference: 0.2472 s/iter. Eval: 0.1216 s/iter. Total: 0.3746 s/iter. ETA=0:04:35
[02/18 04:45:26] mask2former INFO: Inference done 371/1093. Dataloading: 0.0057 s/iter. Inference: 0.2467 s/iter. Eval: 0.1217 s/iter. Total: 0.3742 s/iter. ETA=0:04:30
[02/18 04:45:31] mask2former INFO: Inference done 385/1093. Dataloading: 0.0057 s/iter. Inference: 0.2473 s/iter. Eval: 0.1213 s/iter. Total: 0.3745 s/iter. ETA=0:04:25
[02/18 04:45:37] mask2former INFO: Inference done 400/1093. Dataloading: 0.0057 s/iter. Inference: 0.2469 s/iter. Eval: 0.1210 s/iter. Total: 0.3737 s/iter. ETA=0:04:18
[02/18 04:45:42] mask2former INFO: Inference done 415/1093. Dataloading: 0.0057 s/iter. Inference: 0.2460 s/iter. Eval: 0.1206 s/iter. Total: 0.3724 s/iter. ETA=0:04:12
[02/18 04:45:47] mask2former INFO: Inference done 429/1093. Dataloading: 0.0057 s/iter. Inference: 0.2462 s/iter. Eval: 0.1206 s/iter. Total: 0.3726 s/iter. ETA=0:04:07
[02/18 04:45:52] mask2former INFO: Inference done 444/1093. Dataloading: 0.0058 s/iter. Inference: 0.2456 s/iter. Eval: 0.1203 s/iter. Total: 0.3718 s/iter. ETA=0:04:01
[02/18 04:45:57] mask2former INFO: Inference done 458/1093. Dataloading: 0.0057 s/iter. Inference: 0.2452 s/iter. Eval: 0.1207 s/iter. Total: 0.3716 s/iter. ETA=0:03:55
[02/18 04:46:03] mask2former INFO: Inference done 472/1093. Dataloading: 0.0057 s/iter. Inference: 0.2451 s/iter. Eval: 0.1207 s/iter. Total: 0.3715 s/iter. ETA=0:03:50
[02/18 04:46:08] mask2former INFO: Inference done 485/1093. Dataloading: 0.0058 s/iter. Inference: 0.2456 s/iter. Eval: 0.1210 s/iter. Total: 0.3725 s/iter. ETA=0:03:46
[02/18 04:46:13] mask2former INFO: Inference done 500/1093. Dataloading: 0.0058 s/iter. Inference: 0.2453 s/iter. Eval: 0.1207 s/iter. Total: 0.3719 s/iter. ETA=0:03:40
[02/18 04:46:18] mask2former INFO: Inference done 514/1093. Dataloading: 0.0057 s/iter. Inference: 0.2449 s/iter. Eval: 0.1208 s/iter. Total: 0.3715 s/iter. ETA=0:03:35
[02/18 04:46:23] mask2former INFO: Inference done 528/1093. Dataloading: 0.0057 s/iter. Inference: 0.2451 s/iter. Eval: 0.1204 s/iter. Total: 0.3713 s/iter. ETA=0:03:29
[02/18 04:46:28] mask2former INFO: Inference done 541/1093. Dataloading: 0.0058 s/iter. Inference: 0.2452 s/iter. Eval: 0.1206 s/iter. Total: 0.3717 s/iter. ETA=0:03:25
[02/18 04:46:34] mask2former INFO: Inference done 555/1093. Dataloading: 0.0058 s/iter. Inference: 0.2451 s/iter. Eval: 0.1208 s/iter. Total: 0.3718 s/iter. ETA=0:03:20
[02/18 04:46:39] mask2former INFO: Inference done 569/1093. Dataloading: 0.0058 s/iter. Inference: 0.2449 s/iter. Eval: 0.1207 s/iter. Total: 0.3715 s/iter. ETA=0:03:14
[02/18 04:46:44] mask2former INFO: Inference done 582/1093. Dataloading: 0.0058 s/iter. Inference: 0.2455 s/iter. Eval: 0.1210 s/iter. Total: 0.3724 s/iter. ETA=0:03:10
[02/18 04:46:49] mask2former INFO: Inference done 596/1093. Dataloading: 0.0058 s/iter. Inference: 0.2457 s/iter. Eval: 0.1211 s/iter. Total: 0.3726 s/iter. ETA=0:03:05
[02/18 04:46:55] mask2former INFO: Inference done 610/1093. Dataloading: 0.0058 s/iter. Inference: 0.2458 s/iter. Eval: 0.1211 s/iter. Total: 0.3727 s/iter. ETA=0:03:00
[02/18 04:47:00] mask2former INFO: Inference done 624/1093. Dataloading: 0.0058 s/iter. Inference: 0.2456 s/iter. Eval: 0.1210 s/iter. Total: 0.3725 s/iter. ETA=0:02:54
[02/18 04:47:05] mask2former INFO: Inference done 638/1093. Dataloading: 0.0058 s/iter. Inference: 0.2456 s/iter. Eval: 0.1210 s/iter. Total: 0.3726 s/iter. ETA=0:02:49
[02/18 04:47:10] mask2former INFO: Inference done 651/1093. Dataloading: 0.0058 s/iter. Inference: 0.2461 s/iter. Eval: 0.1211 s/iter. Total: 0.3731 s/iter. ETA=0:02:44
[02/18 04:47:15] mask2former INFO: Inference done 665/1093. Dataloading: 0.0058 s/iter. Inference: 0.2459 s/iter. Eval: 0.1211 s/iter. Total: 0.3730 s/iter. ETA=0:02:39
[02/18 04:47:20] mask2former INFO: Inference done 679/1093. Dataloading: 0.0058 s/iter. Inference: 0.2458 s/iter. Eval: 0.1211 s/iter. Total: 0.3727 s/iter. ETA=0:02:34
[02/18 04:47:25] mask2former INFO: Inference done 693/1093. Dataloading: 0.0058 s/iter. Inference: 0.2459 s/iter. Eval: 0.1207 s/iter. Total: 0.3726 s/iter. ETA=0:02:29
[02/18 04:47:30] mask2former INFO: Inference done 707/1093. Dataloading: 0.0058 s/iter. Inference: 0.2457 s/iter. Eval: 0.1207 s/iter. Total: 0.3724 s/iter. ETA=0:02:23
[02/18 04:47:36] mask2former INFO: Inference done 721/1093. Dataloading: 0.0058 s/iter. Inference: 0.2457 s/iter. Eval: 0.1205 s/iter. Total: 0.3722 s/iter. ETA=0:02:18
[02/18 04:47:41] mask2former INFO: Inference done 735/1093. Dataloading: 0.0058 s/iter. Inference: 0.2457 s/iter. Eval: 0.1204 s/iter. Total: 0.3720 s/iter. ETA=0:02:13
[02/18 04:47:46] mask2former INFO: Inference done 749/1093. Dataloading: 0.0058 s/iter. Inference: 0.2458 s/iter. Eval: 0.1203 s/iter. Total: 0.3719 s/iter. ETA=0:02:07
[02/18 04:47:51] mask2former INFO: Inference done 764/1093. Dataloading: 0.0060 s/iter. Inference: 0.2459 s/iter. Eval: 0.1198 s/iter. Total: 0.3717 s/iter. ETA=0:02:02
[02/18 04:47:57] mask2former INFO: Inference done 779/1093. Dataloading: 0.0060 s/iter. Inference: 0.2457 s/iter. Eval: 0.1196 s/iter. Total: 0.3714 s/iter. ETA=0:01:56
[02/18 04:48:02] mask2former INFO: Inference done 793/1093. Dataloading: 0.0060 s/iter. Inference: 0.2457 s/iter. Eval: 0.1195 s/iter. Total: 0.3712 s/iter. ETA=0:01:51
[02/18 04:48:07] mask2former INFO: Inference done 806/1093. Dataloading: 0.0060 s/iter. Inference: 0.2461 s/iter. Eval: 0.1194 s/iter. Total: 0.3715 s/iter. ETA=0:01:46
[02/18 04:48:12] mask2former INFO: Inference done 820/1093. Dataloading: 0.0060 s/iter. Inference: 0.2460 s/iter. Eval: 0.1195 s/iter. Total: 0.3715 s/iter. ETA=0:01:41
[02/18 04:48:17] mask2former INFO: Inference done 834/1093. Dataloading: 0.0060 s/iter. Inference: 0.2460 s/iter. Eval: 0.1195 s/iter. Total: 0.3715 s/iter. ETA=0:01:36
[02/18 04:48:22] mask2former INFO: Inference done 848/1093. Dataloading: 0.0060 s/iter. Inference: 0.2460 s/iter. Eval: 0.1196 s/iter. Total: 0.3716 s/iter. ETA=0:01:31
[02/18 04:48:28] mask2former INFO: Inference done 863/1093. Dataloading: 0.0060 s/iter. Inference: 0.2461 s/iter. Eval: 0.1193 s/iter. Total: 0.3714 s/iter. ETA=0:01:25
[02/18 04:48:33] mask2former INFO: Inference done 877/1093. Dataloading: 0.0060 s/iter. Inference: 0.2460 s/iter. Eval: 0.1194 s/iter. Total: 0.3715 s/iter. ETA=0:01:20
[02/18 04:48:38] mask2former INFO: Inference done 891/1093. Dataloading: 0.0060 s/iter. Inference: 0.2460 s/iter. Eval: 0.1194 s/iter. Total: 0.3714 s/iter. ETA=0:01:15
[02/18 04:48:43] mask2former INFO: Inference done 905/1093. Dataloading: 0.0060 s/iter. Inference: 0.2457 s/iter. Eval: 0.1195 s/iter. Total: 0.3712 s/iter. ETA=0:01:09
[02/18 04:48:49] mask2former INFO: Inference done 919/1093. Dataloading: 0.0060 s/iter. Inference: 0.2460 s/iter. Eval: 0.1195 s/iter. Total: 0.3715 s/iter. ETA=0:01:04
[02/18 04:48:54] mask2former INFO: Inference done 934/1093. Dataloading: 0.0060 s/iter. Inference: 0.2459 s/iter. Eval: 0.1192 s/iter. Total: 0.3712 s/iter. ETA=0:00:59
[02/18 04:48:59] mask2former INFO: Inference done 949/1093. Dataloading: 0.0060 s/iter. Inference: 0.2456 s/iter. Eval: 0.1191 s/iter. Total: 0.3708 s/iter. ETA=0:00:53
[02/18 04:49:05] mask2former INFO: Inference done 964/1093. Dataloading: 0.0059 s/iter. Inference: 0.2457 s/iter. Eval: 0.1188 s/iter. Total: 0.3706 s/iter. ETA=0:00:47
[02/18 04:49:10] mask2former INFO: Inference done 973/1093. Dataloading: 0.0060 s/iter. Inference: 0.2464 s/iter. Eval: 0.1204 s/iter. Total: 0.3728 s/iter. ETA=0:00:44
[02/18 04:49:16] mask2former INFO: Inference done 980/1093. Dataloading: 0.0060 s/iter. Inference: 0.2485 s/iter. Eval: 0.1216 s/iter. Total: 0.3762 s/iter. ETA=0:00:42
[02/18 04:49:21] mask2former INFO: Inference done 989/1093. Dataloading: 0.0060 s/iter. Inference: 0.2495 s/iter. Eval: 0.1223 s/iter. Total: 0.3780 s/iter. ETA=0:00:39
[02/18 04:49:26] mask2former INFO: Inference done 1000/1093. Dataloading: 0.0061 s/iter. Inference: 0.2499 s/iter. Eval: 0.1229 s/iter. Total: 0.3789 s/iter. ETA=0:00:35
[02/18 04:49:31] mask2former INFO: Inference done 1010/1093. Dataloading: 0.0061 s/iter. Inference: 0.2511 s/iter. Eval: 0.1231 s/iter. Total: 0.3804 s/iter. ETA=0:00:31
[02/18 04:49:37] mask2former INFO: Inference done 1025/1093. Dataloading: 0.0061 s/iter. Inference: 0.2506 s/iter. Eval: 0.1231 s/iter. Total: 0.3799 s/iter. ETA=0:00:25
[02/18 04:49:42] mask2former INFO: Inference done 1039/1093. Dataloading: 0.0061 s/iter. Inference: 0.2507 s/iter. Eval: 0.1229 s/iter. Total: 0.3797 s/iter. ETA=0:00:20
[02/18 04:49:47] mask2former INFO: Inference done 1054/1093. Dataloading: 0.0061 s/iter. Inference: 0.2506 s/iter. Eval: 0.1227 s/iter. Total: 0.3794 s/iter. ETA=0:00:14
[02/18 04:49:52] mask2former INFO: Inference done 1068/1093. Dataloading: 0.0061 s/iter. Inference: 0.2505 s/iter. Eval: 0.1225 s/iter. Total: 0.3792 s/iter. ETA=0:00:09
[02/18 04:49:57] mask2former INFO: Inference done 1083/1093. Dataloading: 0.0061 s/iter. Inference: 0.2505 s/iter. Eval: 0.1221 s/iter. Total: 0.3788 s/iter. ETA=0:00:03
[02/18 05:59:23] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 05:59:23] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 05:59:23] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 05:59:38] mask2former INFO: Inference done 11/1093. Dataloading: 0.0035 s/iter. Inference: 0.2435 s/iter. Eval: 0.1041 s/iter. Total: 0.3511 s/iter. ETA=0:06:19
[02/18 05:59:44] mask2former INFO: Inference done 26/1093. Dataloading: 0.0046 s/iter. Inference: 0.2395 s/iter. Eval: 0.1086 s/iter. Total: 0.3528 s/iter. ETA=0:06:16
[02/18 05:59:49] mask2former INFO: Inference done 41/1093. Dataloading: 0.0049 s/iter. Inference: 0.2342 s/iter. Eval: 0.1088 s/iter. Total: 0.3480 s/iter. ETA=0:06:06
[02/18 05:59:54] mask2former INFO: Inference done 56/1093. Dataloading: 0.0049 s/iter. Inference: 0.2356 s/iter. Eval: 0.1104 s/iter. Total: 0.3510 s/iter. ETA=0:06:04
[02/18 05:59:59] mask2former INFO: Inference done 70/1093. Dataloading: 0.0049 s/iter. Inference: 0.2361 s/iter. Eval: 0.1122 s/iter. Total: 0.3532 s/iter. ETA=0:06:01
[02/18 06:00:05] mask2former INFO: Inference done 84/1093. Dataloading: 0.0050 s/iter. Inference: 0.2386 s/iter. Eval: 0.1142 s/iter. Total: 0.3579 s/iter. ETA=0:06:01
[02/18 06:00:10] mask2former INFO: Inference done 98/1093. Dataloading: 0.0051 s/iter. Inference: 0.2405 s/iter. Eval: 0.1126 s/iter. Total: 0.3583 s/iter. ETA=0:05:56
[02/18 06:00:15] mask2former INFO: Inference done 112/1093. Dataloading: 0.0052 s/iter. Inference: 0.2402 s/iter. Eval: 0.1130 s/iter. Total: 0.3585 s/iter. ETA=0:05:51
[02/18 06:00:20] mask2former INFO: Inference done 126/1093. Dataloading: 0.0052 s/iter. Inference: 0.2410 s/iter. Eval: 0.1130 s/iter. Total: 0.3592 s/iter. ETA=0:05:47
[02/18 06:00:25] mask2former INFO: Inference done 140/1093. Dataloading: 0.0053 s/iter. Inference: 0.2407 s/iter. Eval: 0.1135 s/iter. Total: 0.3596 s/iter. ETA=0:05:42
[02/18 06:00:30] mask2former INFO: Inference done 155/1093. Dataloading: 0.0052 s/iter. Inference: 0.2403 s/iter. Eval: 0.1135 s/iter. Total: 0.3590 s/iter. ETA=0:05:36
[02/18 06:00:35] mask2former INFO: Inference done 170/1093. Dataloading: 0.0054 s/iter. Inference: 0.2391 s/iter. Eval: 0.1131 s/iter. Total: 0.3577 s/iter. ETA=0:05:30
[02/18 06:00:40] mask2former INFO: Inference done 184/1093. Dataloading: 0.0055 s/iter. Inference: 0.2397 s/iter. Eval: 0.1128 s/iter. Total: 0.3581 s/iter. ETA=0:05:25
[02/18 06:00:46] mask2former INFO: Inference done 199/1093. Dataloading: 0.0055 s/iter. Inference: 0.2402 s/iter. Eval: 0.1112 s/iter. Total: 0.3570 s/iter. ETA=0:05:19
[02/18 06:00:51] mask2former INFO: Inference done 213/1093. Dataloading: 0.0054 s/iter. Inference: 0.2411 s/iter. Eval: 0.1113 s/iter. Total: 0.3579 s/iter. ETA=0:05:14
[02/18 06:00:56] mask2former INFO: Inference done 227/1093. Dataloading: 0.0056 s/iter. Inference: 0.2413 s/iter. Eval: 0.1112 s/iter. Total: 0.3581 s/iter. ETA=0:05:10
[02/18 06:01:01] mask2former INFO: Inference done 241/1093. Dataloading: 0.0056 s/iter. Inference: 0.2412 s/iter. Eval: 0.1124 s/iter. Total: 0.3592 s/iter. ETA=0:05:06
[02/18 06:01:06] mask2former INFO: Inference done 256/1093. Dataloading: 0.0055 s/iter. Inference: 0.2408 s/iter. Eval: 0.1126 s/iter. Total: 0.3590 s/iter. ETA=0:05:00
[02/18 06:01:12] mask2former INFO: Inference done 271/1093. Dataloading: 0.0055 s/iter. Inference: 0.2407 s/iter. Eval: 0.1124 s/iter. Total: 0.3587 s/iter. ETA=0:04:54
[02/18 06:01:17] mask2former INFO: Inference done 286/1093. Dataloading: 0.0055 s/iter. Inference: 0.2409 s/iter. Eval: 0.1120 s/iter. Total: 0.3584 s/iter. ETA=0:04:49
[02/18 06:01:22] mask2former INFO: Inference done 300/1093. Dataloading: 0.0055 s/iter. Inference: 0.2412 s/iter. Eval: 0.1121 s/iter. Total: 0.3588 s/iter. ETA=0:04:44
[02/18 06:01:27] mask2former INFO: Inference done 314/1093. Dataloading: 0.0055 s/iter. Inference: 0.2413 s/iter. Eval: 0.1124 s/iter. Total: 0.3593 s/iter. ETA=0:04:39
[02/18 06:01:33] mask2former INFO: Inference done 329/1093. Dataloading: 0.0055 s/iter. Inference: 0.2408 s/iter. Eval: 0.1126 s/iter. Total: 0.3590 s/iter. ETA=0:04:34
[02/18 06:01:38] mask2former INFO: Inference done 343/1093. Dataloading: 0.0055 s/iter. Inference: 0.2408 s/iter. Eval: 0.1128 s/iter. Total: 0.3592 s/iter. ETA=0:04:29
[02/18 06:01:43] mask2former INFO: Inference done 358/1093. Dataloading: 0.0055 s/iter. Inference: 0.2404 s/iter. Eval: 0.1126 s/iter. Total: 0.3586 s/iter. ETA=0:04:23
[02/18 06:01:48] mask2former INFO: Inference done 372/1093. Dataloading: 0.0055 s/iter. Inference: 0.2410 s/iter. Eval: 0.1127 s/iter. Total: 0.3593 s/iter. ETA=0:04:19
[02/18 06:01:53] mask2former INFO: Inference done 386/1093. Dataloading: 0.0056 s/iter. Inference: 0.2409 s/iter. Eval: 0.1128 s/iter. Total: 0.3594 s/iter. ETA=0:04:14
[02/18 06:01:58] mask2former INFO: Inference done 401/1093. Dataloading: 0.0055 s/iter. Inference: 0.2403 s/iter. Eval: 0.1130 s/iter. Total: 0.3590 s/iter. ETA=0:04:08
[02/18 06:02:04] mask2former INFO: Inference done 417/1093. Dataloading: 0.0055 s/iter. Inference: 0.2395 s/iter. Eval: 0.1128 s/iter. Total: 0.3579 s/iter. ETA=0:04:01
[02/18 06:02:09] mask2former INFO: Inference done 432/1093. Dataloading: 0.0055 s/iter. Inference: 0.2392 s/iter. Eval: 0.1126 s/iter. Total: 0.3574 s/iter. ETA=0:03:56
[02/18 06:02:14] mask2former INFO: Inference done 443/1093. Dataloading: 0.0056 s/iter. Inference: 0.2399 s/iter. Eval: 0.1144 s/iter. Total: 0.3600 s/iter. ETA=0:03:53
[02/18 06:02:19] mask2former INFO: Inference done 450/1093. Dataloading: 0.0057 s/iter. Inference: 0.2430 s/iter. Eval: 0.1174 s/iter. Total: 0.3662 s/iter. ETA=0:03:55
[02/18 06:02:25] mask2former INFO: Inference done 457/1093. Dataloading: 0.0058 s/iter. Inference: 0.2470 s/iter. Eval: 0.1198 s/iter. Total: 0.3727 s/iter. ETA=0:03:57
[02/18 06:02:30] mask2former INFO: Inference done 471/1093. Dataloading: 0.0058 s/iter. Inference: 0.2470 s/iter. Eval: 0.1206 s/iter. Total: 0.3735 s/iter. ETA=0:03:52
[02/18 06:02:35] mask2former INFO: Inference done 480/1093. Dataloading: 0.0059 s/iter. Inference: 0.2495 s/iter. Eval: 0.1216 s/iter. Total: 0.3771 s/iter. ETA=0:03:51
[02/18 06:02:40] mask2former INFO: Inference done 492/1093. Dataloading: 0.0060 s/iter. Inference: 0.2500 s/iter. Eval: 0.1222 s/iter. Total: 0.3783 s/iter. ETA=0:03:47
[02/18 06:02:46] mask2former INFO: Inference done 506/1093. Dataloading: 0.0059 s/iter. Inference: 0.2500 s/iter. Eval: 0.1220 s/iter. Total: 0.3781 s/iter. ETA=0:03:41
[02/18 06:02:51] mask2former INFO: Inference done 521/1093. Dataloading: 0.0059 s/iter. Inference: 0.2497 s/iter. Eval: 0.1217 s/iter. Total: 0.3774 s/iter. ETA=0:03:35
[02/18 06:02:56] mask2former INFO: Inference done 536/1093. Dataloading: 0.0059 s/iter. Inference: 0.2493 s/iter. Eval: 0.1215 s/iter. Total: 0.3768 s/iter. ETA=0:03:29
[02/18 06:03:01] mask2former INFO: Inference done 550/1093. Dataloading: 0.0059 s/iter. Inference: 0.2488 s/iter. Eval: 0.1216 s/iter. Total: 0.3764 s/iter. ETA=0:03:24
[02/18 06:03:06] mask2former INFO: Inference done 563/1093. Dataloading: 0.0059 s/iter. Inference: 0.2490 s/iter. Eval: 0.1216 s/iter. Total: 0.3766 s/iter. ETA=0:03:19
[02/18 06:03:12] mask2former INFO: Inference done 577/1093. Dataloading: 0.0059 s/iter. Inference: 0.2491 s/iter. Eval: 0.1217 s/iter. Total: 0.3768 s/iter. ETA=0:03:14
[02/18 06:03:17] mask2former INFO: Inference done 590/1093. Dataloading: 0.0059 s/iter. Inference: 0.2491 s/iter. Eval: 0.1220 s/iter. Total: 0.3770 s/iter. ETA=0:03:09
[02/18 06:03:22] mask2former INFO: Inference done 604/1093. Dataloading: 0.0059 s/iter. Inference: 0.2489 s/iter. Eval: 0.1222 s/iter. Total: 0.3771 s/iter. ETA=0:03:04
[02/18 06:03:27] mask2former INFO: Inference done 617/1093. Dataloading: 0.0059 s/iter. Inference: 0.2490 s/iter. Eval: 0.1225 s/iter. Total: 0.3775 s/iter. ETA=0:02:59
[02/18 06:03:32] mask2former INFO: Inference done 631/1093. Dataloading: 0.0059 s/iter. Inference: 0.2487 s/iter. Eval: 0.1225 s/iter. Total: 0.3772 s/iter. ETA=0:02:54
[02/18 06:03:38] mask2former INFO: Inference done 645/1093. Dataloading: 0.0059 s/iter. Inference: 0.2485 s/iter. Eval: 0.1225 s/iter. Total: 0.3770 s/iter. ETA=0:02:48
[02/18 06:03:43] mask2former INFO: Inference done 659/1093. Dataloading: 0.0059 s/iter. Inference: 0.2485 s/iter. Eval: 0.1227 s/iter. Total: 0.3771 s/iter. ETA=0:02:43
[02/18 06:03:48] mask2former INFO: Inference done 673/1093. Dataloading: 0.0059 s/iter. Inference: 0.2485 s/iter. Eval: 0.1225 s/iter. Total: 0.3769 s/iter. ETA=0:02:38
[02/18 06:03:53] mask2former INFO: Inference done 688/1093. Dataloading: 0.0059 s/iter. Inference: 0.2481 s/iter. Eval: 0.1224 s/iter. Total: 0.3764 s/iter. ETA=0:02:32
[02/18 06:03:59] mask2former INFO: Inference done 702/1093. Dataloading: 0.0058 s/iter. Inference: 0.2481 s/iter. Eval: 0.1223 s/iter. Total: 0.3763 s/iter. ETA=0:02:27
[02/18 06:04:04] mask2former INFO: Inference done 716/1093. Dataloading: 0.0058 s/iter. Inference: 0.2480 s/iter. Eval: 0.1222 s/iter. Total: 0.3761 s/iter. ETA=0:02:21
[02/18 06:04:09] mask2former INFO: Inference done 730/1093. Dataloading: 0.0059 s/iter. Inference: 0.2481 s/iter. Eval: 0.1220 s/iter. Total: 0.3760 s/iter. ETA=0:02:16
[02/18 06:04:14] mask2former INFO: Inference done 745/1093. Dataloading: 0.0058 s/iter. Inference: 0.2478 s/iter. Eval: 0.1218 s/iter. Total: 0.3756 s/iter. ETA=0:02:10
[02/18 06:04:19] mask2former INFO: Inference done 759/1093. Dataloading: 0.0059 s/iter. Inference: 0.2478 s/iter. Eval: 0.1217 s/iter. Total: 0.3755 s/iter. ETA=0:02:05
[02/18 06:04:25] mask2former INFO: Inference done 773/1093. Dataloading: 0.0059 s/iter. Inference: 0.2478 s/iter. Eval: 0.1216 s/iter. Total: 0.3753 s/iter. ETA=0:02:00
[02/18 06:04:30] mask2former INFO: Inference done 788/1093. Dataloading: 0.0058 s/iter. Inference: 0.2476 s/iter. Eval: 0.1212 s/iter. Total: 0.3747 s/iter. ETA=0:01:54
[02/18 06:04:35] mask2former INFO: Inference done 803/1093. Dataloading: 0.0058 s/iter. Inference: 0.2472 s/iter. Eval: 0.1213 s/iter. Total: 0.3744 s/iter. ETA=0:01:48
[02/18 06:04:40] mask2former INFO: Inference done 817/1093. Dataloading: 0.0058 s/iter. Inference: 0.2471 s/iter. Eval: 0.1214 s/iter. Total: 0.3744 s/iter. ETA=0:01:43
[02/18 06:04:46] mask2former INFO: Inference done 832/1093. Dataloading: 0.0058 s/iter. Inference: 0.2469 s/iter. Eval: 0.1212 s/iter. Total: 0.3740 s/iter. ETA=0:01:37
[02/18 06:04:51] mask2former INFO: Inference done 846/1093. Dataloading: 0.0058 s/iter. Inference: 0.2466 s/iter. Eval: 0.1211 s/iter. Total: 0.3737 s/iter. ETA=0:01:32
[02/18 06:04:56] mask2former INFO: Inference done 860/1093. Dataloading: 0.0058 s/iter. Inference: 0.2466 s/iter. Eval: 0.1210 s/iter. Total: 0.3735 s/iter. ETA=0:01:27
[02/18 06:05:01] mask2former INFO: Inference done 874/1093. Dataloading: 0.0058 s/iter. Inference: 0.2464 s/iter. Eval: 0.1210 s/iter. Total: 0.3733 s/iter. ETA=0:01:21
[02/18 06:05:06] mask2former INFO: Inference done 888/1093. Dataloading: 0.0058 s/iter. Inference: 0.2464 s/iter. Eval: 0.1210 s/iter. Total: 0.3733 s/iter. ETA=0:01:16
[02/18 06:05:11] mask2former INFO: Inference done 902/1093. Dataloading: 0.0058 s/iter. Inference: 0.2464 s/iter. Eval: 0.1210 s/iter. Total: 0.3733 s/iter. ETA=0:01:11
[02/18 06:05:16] mask2former INFO: Inference done 916/1093. Dataloading: 0.0058 s/iter. Inference: 0.2463 s/iter. Eval: 0.1209 s/iter. Total: 0.3731 s/iter. ETA=0:01:06
[02/18 06:05:21] mask2former INFO: Inference done 931/1093. Dataloading: 0.0058 s/iter. Inference: 0.2461 s/iter. Eval: 0.1208 s/iter. Total: 0.3728 s/iter. ETA=0:01:00
[02/18 06:05:27] mask2former INFO: Inference done 946/1093. Dataloading: 0.0059 s/iter. Inference: 0.2458 s/iter. Eval: 0.1205 s/iter. Total: 0.3723 s/iter. ETA=0:00:54
[02/18 06:05:32] mask2former INFO: Inference done 960/1093. Dataloading: 0.0059 s/iter. Inference: 0.2458 s/iter. Eval: 0.1204 s/iter. Total: 0.3721 s/iter. ETA=0:00:49
[02/18 06:05:37] mask2former INFO: Inference done 975/1093. Dataloading: 0.0059 s/iter. Inference: 0.2458 s/iter. Eval: 0.1202 s/iter. Total: 0.3720 s/iter. ETA=0:00:43
[02/18 06:05:42] mask2former INFO: Inference done 989/1093. Dataloading: 0.0059 s/iter. Inference: 0.2457 s/iter. Eval: 0.1201 s/iter. Total: 0.3718 s/iter. ETA=0:00:38
[02/18 06:05:47] mask2former INFO: Inference done 1003/1093. Dataloading: 0.0059 s/iter. Inference: 0.2457 s/iter. Eval: 0.1200 s/iter. Total: 0.3717 s/iter. ETA=0:00:33
[02/18 06:05:52] mask2former INFO: Inference done 1018/1093. Dataloading: 0.0058 s/iter. Inference: 0.2455 s/iter. Eval: 0.1199 s/iter. Total: 0.3714 s/iter. ETA=0:00:27
[02/18 06:05:57] mask2former INFO: Inference done 1032/1093. Dataloading: 0.0058 s/iter. Inference: 0.2455 s/iter. Eval: 0.1198 s/iter. Total: 0.3712 s/iter. ETA=0:00:22
[02/18 06:06:03] mask2former INFO: Inference done 1046/1093. Dataloading: 0.0059 s/iter. Inference: 0.2454 s/iter. Eval: 0.1197 s/iter. Total: 0.3711 s/iter. ETA=0:00:17
[02/18 06:06:08] mask2former INFO: Inference done 1061/1093. Dataloading: 0.0059 s/iter. Inference: 0.2452 s/iter. Eval: 0.1196 s/iter. Total: 0.3707 s/iter. ETA=0:00:11
[02/18 06:06:13] mask2former INFO: Inference done 1077/1093. Dataloading: 0.0059 s/iter. Inference: 0.2451 s/iter. Eval: 0.1191 s/iter. Total: 0.3701 s/iter. ETA=0:00:05
[02/18 06:06:18] mask2former INFO: Inference done 1093/1093. Dataloading: 0.0059 s/iter. Inference: 0.2447 s/iter. Eval: 0.1189 s/iter. Total: 0.3695 s/iter. ETA=0:00:00
[02/18 07:14:46] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 07:14:47] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 07:14:47] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 07:14:59] mask2former INFO: Inference done 11/1093. Dataloading: 0.0032 s/iter. Inference: 0.2252 s/iter. Eval: 0.1031 s/iter. Total: 0.3315 s/iter. ETA=0:05:58
[02/18 07:15:05] mask2former INFO: Inference done 27/1093. Dataloading: 0.0043 s/iter. Inference: 0.2212 s/iter. Eval: 0.1051 s/iter. Total: 0.3306 s/iter. ETA=0:05:52
[02/18 07:15:10] mask2former INFO: Inference done 39/1093. Dataloading: 0.0047 s/iter. Inference: 0.2374 s/iter. Eval: 0.1250 s/iter. Total: 0.3672 s/iter. ETA=0:06:26
[02/18 07:15:15] mask2former INFO: Inference done 46/1093. Dataloading: 0.0072 s/iter. Inference: 0.2801 s/iter. Eval: 0.1508 s/iter. Total: 0.4382 s/iter. ETA=0:07:38
[02/18 07:15:21] mask2former INFO: Inference done 54/1093. Dataloading: 0.0093 s/iter. Inference: 0.2937 s/iter. Eval: 0.1744 s/iter. Total: 0.4774 s/iter. ETA=0:08:16
[02/18 07:15:26] mask2former INFO: Inference done 68/1093. Dataloading: 0.0087 s/iter. Inference: 0.2841 s/iter. Eval: 0.1654 s/iter. Total: 0.4583 s/iter. ETA=0:07:49
[02/18 07:15:31] mask2former INFO: Inference done 78/1093. Dataloading: 0.0087 s/iter. Inference: 0.2917 s/iter. Eval: 0.1653 s/iter. Total: 0.4660 s/iter. ETA=0:07:52
[02/18 07:15:36] mask2former INFO: Inference done 92/1093. Dataloading: 0.0082 s/iter. Inference: 0.2822 s/iter. Eval: 0.1584 s/iter. Total: 0.4490 s/iter. ETA=0:07:29
[02/18 07:15:42] mask2former INFO: Inference done 106/1093. Dataloading: 0.0078 s/iter. Inference: 0.2759 s/iter. Eval: 0.1542 s/iter. Total: 0.4381 s/iter. ETA=0:07:12
[02/18 07:15:47] mask2former INFO: Inference done 120/1093. Dataloading: 0.0074 s/iter. Inference: 0.2708 s/iter. Eval: 0.1511 s/iter. Total: 0.4295 s/iter. ETA=0:06:57
[02/18 07:15:52] mask2former INFO: Inference done 135/1093. Dataloading: 0.0072 s/iter. Inference: 0.2657 s/iter. Eval: 0.1464 s/iter. Total: 0.4194 s/iter. ETA=0:06:41
[02/18 07:15:57] mask2former INFO: Inference done 149/1093. Dataloading: 0.0070 s/iter. Inference: 0.2636 s/iter. Eval: 0.1441 s/iter. Total: 0.4149 s/iter. ETA=0:06:31
[02/18 07:16:02] mask2former INFO: Inference done 163/1093. Dataloading: 0.0068 s/iter. Inference: 0.2612 s/iter. Eval: 0.1418 s/iter. Total: 0.4100 s/iter. ETA=0:06:21
[02/18 07:16:07] mask2former INFO: Inference done 177/1093. Dataloading: 0.0066 s/iter. Inference: 0.2603 s/iter. Eval: 0.1390 s/iter. Total: 0.4061 s/iter. ETA=0:06:12
[02/18 07:16:13] mask2former INFO: Inference done 192/1093. Dataloading: 0.0071 s/iter. Inference: 0.2591 s/iter. Eval: 0.1360 s/iter. Total: 0.4024 s/iter. ETA=0:06:02
[02/18 07:16:18] mask2former INFO: Inference done 206/1093. Dataloading: 0.0070 s/iter. Inference: 0.2579 s/iter. Eval: 0.1343 s/iter. Total: 0.3993 s/iter. ETA=0:05:54
[02/18 07:16:23] mask2former INFO: Inference done 220/1093. Dataloading: 0.0069 s/iter. Inference: 0.2569 s/iter. Eval: 0.1336 s/iter. Total: 0.3976 s/iter. ETA=0:05:47
[02/18 07:16:28] mask2former INFO: Inference done 234/1093. Dataloading: 0.0068 s/iter. Inference: 0.2560 s/iter. Eval: 0.1334 s/iter. Total: 0.3963 s/iter. ETA=0:05:40
[02/18 07:16:33] mask2former INFO: Inference done 248/1093. Dataloading: 0.0066 s/iter. Inference: 0.2552 s/iter. Eval: 0.1324 s/iter. Total: 0.3944 s/iter. ETA=0:05:33
[02/18 07:16:38] mask2former INFO: Inference done 262/1093. Dataloading: 0.0066 s/iter. Inference: 0.2538 s/iter. Eval: 0.1322 s/iter. Total: 0.3927 s/iter. ETA=0:05:26
[02/18 07:16:44] mask2former INFO: Inference done 276/1093. Dataloading: 0.0067 s/iter. Inference: 0.2540 s/iter. Eval: 0.1312 s/iter. Total: 0.3920 s/iter. ETA=0:05:20
[02/18 07:16:49] mask2former INFO: Inference done 291/1093. Dataloading: 0.0066 s/iter. Inference: 0.2538 s/iter. Eval: 0.1296 s/iter. Total: 0.3901 s/iter. ETA=0:05:12
[02/18 07:16:54] mask2former INFO: Inference done 306/1093. Dataloading: 0.0065 s/iter. Inference: 0.2531 s/iter. Eval: 0.1287 s/iter. Total: 0.3884 s/iter. ETA=0:05:05
[02/18 07:16:59] mask2former INFO: Inference done 321/1093. Dataloading: 0.0064 s/iter. Inference: 0.2522 s/iter. Eval: 0.1278 s/iter. Total: 0.3866 s/iter. ETA=0:04:58
[02/18 07:17:05] mask2former INFO: Inference done 336/1093. Dataloading: 0.0063 s/iter. Inference: 0.2513 s/iter. Eval: 0.1271 s/iter. Total: 0.3848 s/iter. ETA=0:04:51
[02/18 07:17:10] mask2former INFO: Inference done 350/1093. Dataloading: 0.0063 s/iter. Inference: 0.2508 s/iter. Eval: 0.1271 s/iter. Total: 0.3843 s/iter. ETA=0:04:45
[02/18 07:17:15] mask2former INFO: Inference done 365/1093. Dataloading: 0.0063 s/iter. Inference: 0.2502 s/iter. Eval: 0.1263 s/iter. Total: 0.3829 s/iter. ETA=0:04:38
[02/18 07:17:20] mask2former INFO: Inference done 379/1093. Dataloading: 0.0063 s/iter. Inference: 0.2499 s/iter. Eval: 0.1259 s/iter. Total: 0.3823 s/iter. ETA=0:04:32
[02/18 07:17:25] mask2former INFO: Inference done 392/1093. Dataloading: 0.0063 s/iter. Inference: 0.2501 s/iter. Eval: 0.1258 s/iter. Total: 0.3824 s/iter. ETA=0:04:28
[02/18 07:17:30] mask2former INFO: Inference done 407/1093. Dataloading: 0.0063 s/iter. Inference: 0.2491 s/iter. Eval: 0.1253 s/iter. Total: 0.3808 s/iter. ETA=0:04:21
[02/18 07:17:36] mask2former INFO: Inference done 421/1093. Dataloading: 0.0062 s/iter. Inference: 0.2494 s/iter. Eval: 0.1246 s/iter. Total: 0.3804 s/iter. ETA=0:04:15
[02/18 07:17:41] mask2former INFO: Inference done 436/1093. Dataloading: 0.0062 s/iter. Inference: 0.2487 s/iter. Eval: 0.1240 s/iter. Total: 0.3790 s/iter. ETA=0:04:09
[02/18 07:17:46] mask2former INFO: Inference done 451/1093. Dataloading: 0.0061 s/iter. Inference: 0.2479 s/iter. Eval: 0.1236 s/iter. Total: 0.3778 s/iter. ETA=0:04:02
[02/18 07:17:51] mask2former INFO: Inference done 465/1093. Dataloading: 0.0061 s/iter. Inference: 0.2477 s/iter. Eval: 0.1234 s/iter. Total: 0.3773 s/iter. ETA=0:03:56
[02/18 07:17:56] mask2former INFO: Inference done 479/1093. Dataloading: 0.0061 s/iter. Inference: 0.2476 s/iter. Eval: 0.1230 s/iter. Total: 0.3768 s/iter. ETA=0:03:51
[02/18 07:18:01] mask2former INFO: Inference done 493/1093. Dataloading: 0.0061 s/iter. Inference: 0.2481 s/iter. Eval: 0.1226 s/iter. Total: 0.3769 s/iter. ETA=0:03:46
[02/18 07:18:06] mask2former INFO: Inference done 507/1093. Dataloading: 0.0060 s/iter. Inference: 0.2479 s/iter. Eval: 0.1223 s/iter. Total: 0.3764 s/iter. ETA=0:03:40
[02/18 07:18:11] mask2former INFO: Inference done 521/1093. Dataloading: 0.0060 s/iter. Inference: 0.2480 s/iter. Eval: 0.1221 s/iter. Total: 0.3763 s/iter. ETA=0:03:35
[02/18 07:18:17] mask2former INFO: Inference done 536/1093. Dataloading: 0.0060 s/iter. Inference: 0.2474 s/iter. Eval: 0.1219 s/iter. Total: 0.3754 s/iter. ETA=0:03:29
[02/18 07:18:22] mask2former INFO: Inference done 550/1093. Dataloading: 0.0060 s/iter. Inference: 0.2475 s/iter. Eval: 0.1216 s/iter. Total: 0.3752 s/iter. ETA=0:03:23
[02/18 07:18:27] mask2former INFO: Inference done 564/1093. Dataloading: 0.0060 s/iter. Inference: 0.2474 s/iter. Eval: 0.1214 s/iter. Total: 0.3749 s/iter. ETA=0:03:18
[02/18 07:18:32] mask2former INFO: Inference done 578/1093. Dataloading: 0.0059 s/iter. Inference: 0.2474 s/iter. Eval: 0.1211 s/iter. Total: 0.3745 s/iter. ETA=0:03:12
[02/18 07:18:37] mask2former INFO: Inference done 593/1093. Dataloading: 0.0059 s/iter. Inference: 0.2469 s/iter. Eval: 0.1209 s/iter. Total: 0.3739 s/iter. ETA=0:03:06
[02/18 07:18:42] mask2former INFO: Inference done 606/1093. Dataloading: 0.0059 s/iter. Inference: 0.2472 s/iter. Eval: 0.1210 s/iter. Total: 0.3742 s/iter. ETA=0:03:02
[02/18 07:18:47] mask2former INFO: Inference done 620/1093. Dataloading: 0.0059 s/iter. Inference: 0.2472 s/iter. Eval: 0.1210 s/iter. Total: 0.3742 s/iter. ETA=0:02:56
[02/18 07:18:53] mask2former INFO: Inference done 635/1093. Dataloading: 0.0058 s/iter. Inference: 0.2469 s/iter. Eval: 0.1208 s/iter. Total: 0.3736 s/iter. ETA=0:02:51
[02/18 07:18:58] mask2former INFO: Inference done 649/1093. Dataloading: 0.0058 s/iter. Inference: 0.2466 s/iter. Eval: 0.1208 s/iter. Total: 0.3734 s/iter. ETA=0:02:45
[02/18 07:19:03] mask2former INFO: Inference done 663/1093. Dataloading: 0.0058 s/iter. Inference: 0.2466 s/iter. Eval: 0.1207 s/iter. Total: 0.3733 s/iter. ETA=0:02:40
[02/18 07:19:08] mask2former INFO: Inference done 677/1093. Dataloading: 0.0058 s/iter. Inference: 0.2465 s/iter. Eval: 0.1205 s/iter. Total: 0.3730 s/iter. ETA=0:02:35
[02/18 07:19:13] mask2former INFO: Inference done 692/1093. Dataloading: 0.0058 s/iter. Inference: 0.2463 s/iter. Eval: 0.1205 s/iter. Total: 0.3726 s/iter. ETA=0:02:29
[02/18 07:19:19] mask2former INFO: Inference done 706/1093. Dataloading: 0.0058 s/iter. Inference: 0.2463 s/iter. Eval: 0.1204 s/iter. Total: 0.3726 s/iter. ETA=0:02:24
[02/18 07:19:24] mask2former INFO: Inference done 721/1093. Dataloading: 0.0058 s/iter. Inference: 0.2461 s/iter. Eval: 0.1204 s/iter. Total: 0.3724 s/iter. ETA=0:02:18
[02/18 07:19:29] mask2former INFO: Inference done 736/1093. Dataloading: 0.0058 s/iter. Inference: 0.2459 s/iter. Eval: 0.1200 s/iter. Total: 0.3718 s/iter. ETA=0:02:12
[02/18 07:19:34] mask2former INFO: Inference done 751/1093. Dataloading: 0.0058 s/iter. Inference: 0.2457 s/iter. Eval: 0.1199 s/iter. Total: 0.3715 s/iter. ETA=0:02:07
[02/18 07:19:40] mask2former INFO: Inference done 766/1093. Dataloading: 0.0058 s/iter. Inference: 0.2454 s/iter. Eval: 0.1198 s/iter. Total: 0.3710 s/iter. ETA=0:02:01
[02/18 07:19:45] mask2former INFO: Inference done 781/1093. Dataloading: 0.0058 s/iter. Inference: 0.2452 s/iter. Eval: 0.1196 s/iter. Total: 0.3707 s/iter. ETA=0:01:55
[02/18 07:19:50] mask2former INFO: Inference done 796/1093. Dataloading: 0.0057 s/iter. Inference: 0.2448 s/iter. Eval: 0.1196 s/iter. Total: 0.3702 s/iter. ETA=0:01:49
[02/18 07:19:56] mask2former INFO: Inference done 811/1093. Dataloading: 0.0057 s/iter. Inference: 0.2446 s/iter. Eval: 0.1196 s/iter. Total: 0.3700 s/iter. ETA=0:01:44
[02/18 07:20:01] mask2former INFO: Inference done 825/1093. Dataloading: 0.0057 s/iter. Inference: 0.2446 s/iter. Eval: 0.1194 s/iter. Total: 0.3699 s/iter. ETA=0:01:39
[02/18 07:20:06] mask2former INFO: Inference done 839/1093. Dataloading: 0.0057 s/iter. Inference: 0.2445 s/iter. Eval: 0.1196 s/iter. Total: 0.3699 s/iter. ETA=0:01:33
[02/18 07:20:11] mask2former INFO: Inference done 853/1093. Dataloading: 0.0057 s/iter. Inference: 0.2445 s/iter. Eval: 0.1194 s/iter. Total: 0.3698 s/iter. ETA=0:01:28
[02/18 07:20:16] mask2former INFO: Inference done 868/1093. Dataloading: 0.0057 s/iter. Inference: 0.2443 s/iter. Eval: 0.1191 s/iter. Total: 0.3692 s/iter. ETA=0:01:23
[02/18 07:20:21] mask2former INFO: Inference done 882/1093. Dataloading: 0.0057 s/iter. Inference: 0.2442 s/iter. Eval: 0.1191 s/iter. Total: 0.3691 s/iter. ETA=0:01:17
[02/18 07:20:26] mask2former INFO: Inference done 896/1093. Dataloading: 0.0057 s/iter. Inference: 0.2441 s/iter. Eval: 0.1191 s/iter. Total: 0.3690 s/iter. ETA=0:01:12
[02/18 07:20:32] mask2former INFO: Inference done 911/1093. Dataloading: 0.0057 s/iter. Inference: 0.2442 s/iter. Eval: 0.1189 s/iter. Total: 0.3689 s/iter. ETA=0:01:07
[02/18 07:20:37] mask2former INFO: Inference done 926/1093. Dataloading: 0.0057 s/iter. Inference: 0.2439 s/iter. Eval: 0.1187 s/iter. Total: 0.3685 s/iter. ETA=0:01:01
[02/18 07:20:42] mask2former INFO: Inference done 940/1093. Dataloading: 0.0058 s/iter. Inference: 0.2439 s/iter. Eval: 0.1186 s/iter. Total: 0.3684 s/iter. ETA=0:00:56
[02/18 07:20:47] mask2former INFO: Inference done 955/1093. Dataloading: 0.0057 s/iter. Inference: 0.2438 s/iter. Eval: 0.1182 s/iter. Total: 0.3679 s/iter. ETA=0:00:50
[02/18 07:20:52] mask2former INFO: Inference done 969/1093. Dataloading: 0.0058 s/iter. Inference: 0.2438 s/iter. Eval: 0.1182 s/iter. Total: 0.3678 s/iter. ETA=0:00:45
[02/18 07:20:57] mask2former INFO: Inference done 983/1093. Dataloading: 0.0057 s/iter. Inference: 0.2437 s/iter. Eval: 0.1181 s/iter. Total: 0.3677 s/iter. ETA=0:00:40
[02/18 07:21:02] mask2former INFO: Inference done 998/1093. Dataloading: 0.0057 s/iter. Inference: 0.2437 s/iter. Eval: 0.1181 s/iter. Total: 0.3676 s/iter. ETA=0:00:34
[02/18 07:21:08] mask2former INFO: Inference done 1013/1093. Dataloading: 0.0057 s/iter. Inference: 0.2436 s/iter. Eval: 0.1179 s/iter. Total: 0.3674 s/iter. ETA=0:00:29
[02/18 07:21:13] mask2former INFO: Inference done 1027/1093. Dataloading: 0.0057 s/iter. Inference: 0.2436 s/iter. Eval: 0.1179 s/iter. Total: 0.3673 s/iter. ETA=0:00:24
[02/18 07:21:18] mask2former INFO: Inference done 1041/1093. Dataloading: 0.0057 s/iter. Inference: 0.2435 s/iter. Eval: 0.1179 s/iter. Total: 0.3672 s/iter. ETA=0:00:19
[02/18 07:21:23] mask2former INFO: Inference done 1055/1093. Dataloading: 0.0057 s/iter. Inference: 0.2436 s/iter. Eval: 0.1177 s/iter. Total: 0.3672 s/iter. ETA=0:00:13
[02/18 07:21:28] mask2former INFO: Inference done 1070/1093. Dataloading: 0.0057 s/iter. Inference: 0.2435 s/iter. Eval: 0.1176 s/iter. Total: 0.3669 s/iter. ETA=0:00:08
[02/18 07:21:33] mask2former INFO: Inference done 1085/1093. Dataloading: 0.0057 s/iter. Inference: 0.2435 s/iter. Eval: 0.1175 s/iter. Total: 0.3668 s/iter. ETA=0:00:02
[02/18 08:30:07] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 08:30:08] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 08:30:08] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 08:30:23] mask2former INFO: Inference done 11/1093. Dataloading: 0.0034 s/iter. Inference: 0.2623 s/iter. Eval: 0.1134 s/iter. Total: 0.3792 s/iter. ETA=0:06:50
[02/18 08:30:28] mask2former INFO: Inference done 25/1093. Dataloading: 0.0049 s/iter. Inference: 0.2457 s/iter. Eval: 0.1207 s/iter. Total: 0.3714 s/iter. ETA=0:06:36
[02/18 08:30:33] mask2former INFO: Inference done 40/1093. Dataloading: 0.0052 s/iter. Inference: 0.2426 s/iter. Eval: 0.1156 s/iter. Total: 0.3636 s/iter. ETA=0:06:22
[02/18 08:30:38] mask2former INFO: Inference done 54/1093. Dataloading: 0.0053 s/iter. Inference: 0.2453 s/iter. Eval: 0.1153 s/iter. Total: 0.3659 s/iter. ETA=0:06:20
[02/18 08:30:43] mask2former INFO: Inference done 68/1093. Dataloading: 0.0052 s/iter. Inference: 0.2442 s/iter. Eval: 0.1157 s/iter. Total: 0.3651 s/iter. ETA=0:06:14
[02/18 08:30:49] mask2former INFO: Inference done 82/1093. Dataloading: 0.0051 s/iter. Inference: 0.2455 s/iter. Eval: 0.1162 s/iter. Total: 0.3670 s/iter. ETA=0:06:10
[02/18 08:30:54] mask2former INFO: Inference done 97/1093. Dataloading: 0.0052 s/iter. Inference: 0.2430 s/iter. Eval: 0.1148 s/iter. Total: 0.3631 s/iter. ETA=0:06:01
[02/18 08:30:59] mask2former INFO: Inference done 111/1093. Dataloading: 0.0053 s/iter. Inference: 0.2427 s/iter. Eval: 0.1169 s/iter. Total: 0.3650 s/iter. ETA=0:05:58
[02/18 08:31:04] mask2former INFO: Inference done 126/1093. Dataloading: 0.0053 s/iter. Inference: 0.2412 s/iter. Eval: 0.1162 s/iter. Total: 0.3627 s/iter. ETA=0:05:50
[02/18 08:31:10] mask2former INFO: Inference done 140/1093. Dataloading: 0.0053 s/iter. Inference: 0.2419 s/iter. Eval: 0.1173 s/iter. Total: 0.3646 s/iter. ETA=0:05:47
[02/18 08:31:15] mask2former INFO: Inference done 153/1093. Dataloading: 0.0053 s/iter. Inference: 0.2450 s/iter. Eval: 0.1172 s/iter. Total: 0.3676 s/iter. ETA=0:05:45
[02/18 08:31:20] mask2former INFO: Inference done 166/1093. Dataloading: 0.0054 s/iter. Inference: 0.2455 s/iter. Eval: 0.1181 s/iter. Total: 0.3691 s/iter. ETA=0:05:42
[02/18 08:31:25] mask2former INFO: Inference done 180/1093. Dataloading: 0.0054 s/iter. Inference: 0.2454 s/iter. Eval: 0.1189 s/iter. Total: 0.3698 s/iter. ETA=0:05:37
[02/18 08:31:30] mask2former INFO: Inference done 194/1093. Dataloading: 0.0054 s/iter. Inference: 0.2456 s/iter. Eval: 0.1187 s/iter. Total: 0.3698 s/iter. ETA=0:05:32
[02/18 08:31:35] mask2former INFO: Inference done 208/1093. Dataloading: 0.0054 s/iter. Inference: 0.2449 s/iter. Eval: 0.1186 s/iter. Total: 0.3690 s/iter. ETA=0:05:26
[02/18 08:31:40] mask2former INFO: Inference done 221/1093. Dataloading: 0.0054 s/iter. Inference: 0.2456 s/iter. Eval: 0.1188 s/iter. Total: 0.3699 s/iter. ETA=0:05:22
[02/18 08:31:45] mask2former INFO: Inference done 235/1093. Dataloading: 0.0057 s/iter. Inference: 0.2455 s/iter. Eval: 0.1183 s/iter. Total: 0.3696 s/iter. ETA=0:05:17
[02/18 08:31:50] mask2former INFO: Inference done 249/1093. Dataloading: 0.0056 s/iter. Inference: 0.2450 s/iter. Eval: 0.1187 s/iter. Total: 0.3695 s/iter. ETA=0:05:11
[02/18 08:31:56] mask2former INFO: Inference done 263/1093. Dataloading: 0.0056 s/iter. Inference: 0.2444 s/iter. Eval: 0.1197 s/iter. Total: 0.3698 s/iter. ETA=0:05:06
[02/18 08:32:01] mask2former INFO: Inference done 277/1093. Dataloading: 0.0057 s/iter. Inference: 0.2435 s/iter. Eval: 0.1204 s/iter. Total: 0.3697 s/iter. ETA=0:05:01
[02/18 08:32:06] mask2former INFO: Inference done 292/1093. Dataloading: 0.0057 s/iter. Inference: 0.2431 s/iter. Eval: 0.1198 s/iter. Total: 0.3686 s/iter. ETA=0:04:55
[02/18 08:32:11] mask2former INFO: Inference done 306/1093. Dataloading: 0.0056 s/iter. Inference: 0.2429 s/iter. Eval: 0.1198 s/iter. Total: 0.3685 s/iter. ETA=0:04:49
[02/18 08:32:16] mask2former INFO: Inference done 320/1093. Dataloading: 0.0056 s/iter. Inference: 0.2427 s/iter. Eval: 0.1203 s/iter. Total: 0.3688 s/iter. ETA=0:04:45
[02/18 08:32:22] mask2former INFO: Inference done 335/1093. Dataloading: 0.0056 s/iter. Inference: 0.2421 s/iter. Eval: 0.1201 s/iter. Total: 0.3679 s/iter. ETA=0:04:38
[02/18 08:32:27] mask2former INFO: Inference done 350/1093. Dataloading: 0.0056 s/iter. Inference: 0.2410 s/iter. Eval: 0.1201 s/iter. Total: 0.3668 s/iter. ETA=0:04:32
[02/18 08:32:32] mask2former INFO: Inference done 365/1093. Dataloading: 0.0056 s/iter. Inference: 0.2404 s/iter. Eval: 0.1199 s/iter. Total: 0.3660 s/iter. ETA=0:04:26
[02/18 08:32:37] mask2former INFO: Inference done 380/1093. Dataloading: 0.0055 s/iter. Inference: 0.2400 s/iter. Eval: 0.1194 s/iter. Total: 0.3650 s/iter. ETA=0:04:20
[02/18 08:32:42] mask2former INFO: Inference done 394/1093. Dataloading: 0.0055 s/iter. Inference: 0.2401 s/iter. Eval: 0.1193 s/iter. Total: 0.3649 s/iter. ETA=0:04:15
[02/18 08:32:47] mask2former INFO: Inference done 408/1093. Dataloading: 0.0055 s/iter. Inference: 0.2400 s/iter. Eval: 0.1193 s/iter. Total: 0.3649 s/iter. ETA=0:04:09
[02/18 08:32:53] mask2former INFO: Inference done 423/1093. Dataloading: 0.0055 s/iter. Inference: 0.2399 s/iter. Eval: 0.1191 s/iter. Total: 0.3646 s/iter. ETA=0:04:04
[02/18 08:32:58] mask2former INFO: Inference done 437/1093. Dataloading: 0.0056 s/iter. Inference: 0.2397 s/iter. Eval: 0.1192 s/iter. Total: 0.3646 s/iter. ETA=0:03:59
[02/18 08:33:03] mask2former INFO: Inference done 451/1093. Dataloading: 0.0055 s/iter. Inference: 0.2398 s/iter. Eval: 0.1190 s/iter. Total: 0.3644 s/iter. ETA=0:03:53
[02/18 08:33:08] mask2former INFO: Inference done 466/1093. Dataloading: 0.0055 s/iter. Inference: 0.2395 s/iter. Eval: 0.1190 s/iter. Total: 0.3642 s/iter. ETA=0:03:48
[02/18 08:33:13] mask2former INFO: Inference done 480/1093. Dataloading: 0.0055 s/iter. Inference: 0.2397 s/iter. Eval: 0.1192 s/iter. Total: 0.3645 s/iter. ETA=0:03:43
[02/18 08:33:19] mask2former INFO: Inference done 494/1093. Dataloading: 0.0055 s/iter. Inference: 0.2395 s/iter. Eval: 0.1193 s/iter. Total: 0.3645 s/iter. ETA=0:03:38
[02/18 08:33:24] mask2former INFO: Inference done 509/1093. Dataloading: 0.0055 s/iter. Inference: 0.2397 s/iter. Eval: 0.1191 s/iter. Total: 0.3644 s/iter. ETA=0:03:32
[02/18 08:33:29] mask2former INFO: Inference done 523/1093. Dataloading: 0.0055 s/iter. Inference: 0.2398 s/iter. Eval: 0.1191 s/iter. Total: 0.3644 s/iter. ETA=0:03:27
[02/18 08:33:34] mask2former INFO: Inference done 537/1093. Dataloading: 0.0055 s/iter. Inference: 0.2398 s/iter. Eval: 0.1189 s/iter. Total: 0.3643 s/iter. ETA=0:03:22
[02/18 08:33:39] mask2former INFO: Inference done 551/1093. Dataloading: 0.0055 s/iter. Inference: 0.2396 s/iter. Eval: 0.1190 s/iter. Total: 0.3642 s/iter. ETA=0:03:17
[02/18 08:33:45] mask2former INFO: Inference done 566/1093. Dataloading: 0.0055 s/iter. Inference: 0.2397 s/iter. Eval: 0.1187 s/iter. Total: 0.3640 s/iter. ETA=0:03:11
[02/18 08:33:50] mask2former INFO: Inference done 580/1093. Dataloading: 0.0055 s/iter. Inference: 0.2395 s/iter. Eval: 0.1189 s/iter. Total: 0.3639 s/iter. ETA=0:03:06
[02/18 08:33:55] mask2former INFO: Inference done 594/1093. Dataloading: 0.0055 s/iter. Inference: 0.2395 s/iter. Eval: 0.1192 s/iter. Total: 0.3643 s/iter. ETA=0:03:01
[02/18 08:34:00] mask2former INFO: Inference done 607/1093. Dataloading: 0.0055 s/iter. Inference: 0.2397 s/iter. Eval: 0.1197 s/iter. Total: 0.3651 s/iter. ETA=0:02:57
[02/18 08:34:05] mask2former INFO: Inference done 621/1093. Dataloading: 0.0056 s/iter. Inference: 0.2398 s/iter. Eval: 0.1199 s/iter. Total: 0.3653 s/iter. ETA=0:02:52
[02/18 08:34:11] mask2former INFO: Inference done 636/1093. Dataloading: 0.0056 s/iter. Inference: 0.2394 s/iter. Eval: 0.1197 s/iter. Total: 0.3648 s/iter. ETA=0:02:46
[02/18 08:34:16] mask2former INFO: Inference done 651/1093. Dataloading: 0.0056 s/iter. Inference: 0.2393 s/iter. Eval: 0.1194 s/iter. Total: 0.3644 s/iter. ETA=0:02:41
[02/18 08:34:21] mask2former INFO: Inference done 665/1093. Dataloading: 0.0056 s/iter. Inference: 0.2393 s/iter. Eval: 0.1194 s/iter. Total: 0.3644 s/iter. ETA=0:02:35
[02/18 08:34:26] mask2former INFO: Inference done 680/1093. Dataloading: 0.0056 s/iter. Inference: 0.2392 s/iter. Eval: 0.1192 s/iter. Total: 0.3640 s/iter. ETA=0:02:30
[02/18 08:34:31] mask2former INFO: Inference done 694/1093. Dataloading: 0.0056 s/iter. Inference: 0.2394 s/iter. Eval: 0.1192 s/iter. Total: 0.3642 s/iter. ETA=0:02:25
[02/18 08:34:36] mask2former INFO: Inference done 709/1093. Dataloading: 0.0056 s/iter. Inference: 0.2390 s/iter. Eval: 0.1191 s/iter. Total: 0.3638 s/iter. ETA=0:02:19
[02/18 08:34:42] mask2former INFO: Inference done 723/1093. Dataloading: 0.0056 s/iter. Inference: 0.2395 s/iter. Eval: 0.1188 s/iter. Total: 0.3640 s/iter. ETA=0:02:14
[02/18 08:34:47] mask2former INFO: Inference done 738/1093. Dataloading: 0.0057 s/iter. Inference: 0.2392 s/iter. Eval: 0.1184 s/iter. Total: 0.3634 s/iter. ETA=0:02:09
[02/18 08:34:52] mask2former INFO: Inference done 753/1093. Dataloading: 0.0057 s/iter. Inference: 0.2392 s/iter. Eval: 0.1183 s/iter. Total: 0.3632 s/iter. ETA=0:02:03
[02/18 08:34:57] mask2former INFO: Inference done 767/1093. Dataloading: 0.0057 s/iter. Inference: 0.2392 s/iter. Eval: 0.1183 s/iter. Total: 0.3632 s/iter. ETA=0:01:58
[02/18 08:35:02] mask2former INFO: Inference done 781/1093. Dataloading: 0.0057 s/iter. Inference: 0.2391 s/iter. Eval: 0.1186 s/iter. Total: 0.3635 s/iter. ETA=0:01:53
[02/18 08:35:08] mask2former INFO: Inference done 795/1093. Dataloading: 0.0057 s/iter. Inference: 0.2391 s/iter. Eval: 0.1186 s/iter. Total: 0.3635 s/iter. ETA=0:01:48
[02/18 08:35:13] mask2former INFO: Inference done 810/1093. Dataloading: 0.0057 s/iter. Inference: 0.2390 s/iter. Eval: 0.1184 s/iter. Total: 0.3632 s/iter. ETA=0:01:42
[02/18 08:35:18] mask2former INFO: Inference done 825/1093. Dataloading: 0.0057 s/iter. Inference: 0.2388 s/iter. Eval: 0.1183 s/iter. Total: 0.3629 s/iter. ETA=0:01:37
[02/18 08:35:23] mask2former INFO: Inference done 839/1093. Dataloading: 0.0057 s/iter. Inference: 0.2390 s/iter. Eval: 0.1181 s/iter. Total: 0.3629 s/iter. ETA=0:01:32
[02/18 08:35:28] mask2former INFO: Inference done 853/1093. Dataloading: 0.0057 s/iter. Inference: 0.2389 s/iter. Eval: 0.1181 s/iter. Total: 0.3628 s/iter. ETA=0:01:27
[02/18 08:35:33] mask2former INFO: Inference done 868/1093. Dataloading: 0.0057 s/iter. Inference: 0.2390 s/iter. Eval: 0.1178 s/iter. Total: 0.3626 s/iter. ETA=0:01:21
[02/18 08:35:38] mask2former INFO: Inference done 883/1093. Dataloading: 0.0057 s/iter. Inference: 0.2388 s/iter. Eval: 0.1177 s/iter. Total: 0.3623 s/iter. ETA=0:01:16
[02/18 08:35:43] mask2former INFO: Inference done 898/1093. Dataloading: 0.0057 s/iter. Inference: 0.2386 s/iter. Eval: 0.1175 s/iter. Total: 0.3619 s/iter. ETA=0:01:10
[02/18 08:35:49] mask2former INFO: Inference done 912/1093. Dataloading: 0.0057 s/iter. Inference: 0.2388 s/iter. Eval: 0.1174 s/iter. Total: 0.3619 s/iter. ETA=0:01:05
[02/18 08:35:54] mask2former INFO: Inference done 926/1093. Dataloading: 0.0057 s/iter. Inference: 0.2387 s/iter. Eval: 0.1175 s/iter. Total: 0.3621 s/iter. ETA=0:01:00
[02/18 08:35:59] mask2former INFO: Inference done 940/1093. Dataloading: 0.0057 s/iter. Inference: 0.2388 s/iter. Eval: 0.1175 s/iter. Total: 0.3621 s/iter. ETA=0:00:55
[02/18 08:36:04] mask2former INFO: Inference done 955/1093. Dataloading: 0.0057 s/iter. Inference: 0.2386 s/iter. Eval: 0.1175 s/iter. Total: 0.3619 s/iter. ETA=0:00:49
[02/18 08:36:09] mask2former INFO: Inference done 970/1093. Dataloading: 0.0057 s/iter. Inference: 0.2386 s/iter. Eval: 0.1174 s/iter. Total: 0.3618 s/iter. ETA=0:00:44
[02/18 08:36:15] mask2former INFO: Inference done 984/1093. Dataloading: 0.0058 s/iter. Inference: 0.2388 s/iter. Eval: 0.1174 s/iter. Total: 0.3620 s/iter. ETA=0:00:39
[02/18 08:36:20] mask2former INFO: Inference done 998/1093. Dataloading: 0.0057 s/iter. Inference: 0.2388 s/iter. Eval: 0.1173 s/iter. Total: 0.3620 s/iter. ETA=0:00:34
[02/18 08:36:25] mask2former INFO: Inference done 1012/1093. Dataloading: 0.0057 s/iter. Inference: 0.2391 s/iter. Eval: 0.1173 s/iter. Total: 0.3622 s/iter. ETA=0:00:29
[02/18 08:36:30] mask2former INFO: Inference done 1026/1093. Dataloading: 0.0058 s/iter. Inference: 0.2392 s/iter. Eval: 0.1174 s/iter. Total: 0.3624 s/iter. ETA=0:00:24
[02/18 08:36:35] mask2former INFO: Inference done 1040/1093. Dataloading: 0.0058 s/iter. Inference: 0.2393 s/iter. Eval: 0.1172 s/iter. Total: 0.3623 s/iter. ETA=0:00:19
[02/18 08:36:40] mask2former INFO: Inference done 1054/1093. Dataloading: 0.0058 s/iter. Inference: 0.2393 s/iter. Eval: 0.1172 s/iter. Total: 0.3623 s/iter. ETA=0:00:14
[02/18 08:36:46] mask2former INFO: Inference done 1069/1093. Dataloading: 0.0058 s/iter. Inference: 0.2392 s/iter. Eval: 0.1173 s/iter. Total: 0.3623 s/iter. ETA=0:00:08
[02/18 08:36:51] mask2former INFO: Inference done 1084/1093. Dataloading: 0.0058 s/iter. Inference: 0.2392 s/iter. Eval: 0.1170 s/iter. Total: 0.3620 s/iter. ETA=0:00:03
[02/18 09:45:59] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 09:45:59] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 09:45:59] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 09:46:13] mask2former INFO: Inference done 11/1093. Dataloading: 0.0045 s/iter. Inference: 0.2503 s/iter. Eval: 0.1313 s/iter. Total: 0.3861 s/iter. ETA=0:06:57
[02/18 09:46:19] mask2former INFO: Inference done 26/1093. Dataloading: 0.0048 s/iter. Inference: 0.2416 s/iter. Eval: 0.1181 s/iter. Total: 0.3647 s/iter. ETA=0:06:29
[02/18 09:46:24] mask2former INFO: Inference done 40/1093. Dataloading: 0.0051 s/iter. Inference: 0.2419 s/iter. Eval: 0.1161 s/iter. Total: 0.3632 s/iter. ETA=0:06:22
[02/18 09:46:29] mask2former INFO: Inference done 54/1093. Dataloading: 0.0050 s/iter. Inference: 0.2417 s/iter. Eval: 0.1186 s/iter. Total: 0.3654 s/iter. ETA=0:06:19
[02/18 09:46:34] mask2former INFO: Inference done 68/1093. Dataloading: 0.0052 s/iter. Inference: 0.2407 s/iter. Eval: 0.1202 s/iter. Total: 0.3662 s/iter. ETA=0:06:15
[02/18 09:46:39] mask2former INFO: Inference done 82/1093. Dataloading: 0.0052 s/iter. Inference: 0.2417 s/iter. Eval: 0.1188 s/iter. Total: 0.3658 s/iter. ETA=0:06:09
[02/18 09:46:44] mask2former INFO: Inference done 96/1093. Dataloading: 0.0056 s/iter. Inference: 0.2438 s/iter. Eval: 0.1178 s/iter. Total: 0.3672 s/iter. ETA=0:06:06
[02/18 09:46:50] mask2former INFO: Inference done 111/1093. Dataloading: 0.0055 s/iter. Inference: 0.2404 s/iter. Eval: 0.1183 s/iter. Total: 0.3643 s/iter. ETA=0:05:57
[02/18 09:46:55] mask2former INFO: Inference done 126/1093. Dataloading: 0.0055 s/iter. Inference: 0.2398 s/iter. Eval: 0.1176 s/iter. Total: 0.3630 s/iter. ETA=0:05:51
[02/18 09:47:00] mask2former INFO: Inference done 141/1093. Dataloading: 0.0055 s/iter. Inference: 0.2393 s/iter. Eval: 0.1169 s/iter. Total: 0.3618 s/iter. ETA=0:05:44
[02/18 09:47:05] mask2former INFO: Inference done 156/1093. Dataloading: 0.0054 s/iter. Inference: 0.2386 s/iter. Eval: 0.1166 s/iter. Total: 0.3607 s/iter. ETA=0:05:37
[02/18 09:47:11] mask2former INFO: Inference done 170/1093. Dataloading: 0.0054 s/iter. Inference: 0.2395 s/iter. Eval: 0.1166 s/iter. Total: 0.3616 s/iter. ETA=0:05:33
[02/18 09:47:16] mask2former INFO: Inference done 184/1093. Dataloading: 0.0054 s/iter. Inference: 0.2395 s/iter. Eval: 0.1167 s/iter. Total: 0.3617 s/iter. ETA=0:05:28
[02/18 09:47:21] mask2former INFO: Inference done 198/1093. Dataloading: 0.0055 s/iter. Inference: 0.2400 s/iter. Eval: 0.1171 s/iter. Total: 0.3626 s/iter. ETA=0:05:24
[02/18 09:47:26] mask2former INFO: Inference done 213/1093. Dataloading: 0.0054 s/iter. Inference: 0.2395 s/iter. Eval: 0.1167 s/iter. Total: 0.3617 s/iter. ETA=0:05:18
[02/18 09:47:31] mask2former INFO: Inference done 228/1093. Dataloading: 0.0054 s/iter. Inference: 0.2393 s/iter. Eval: 0.1166 s/iter. Total: 0.3614 s/iter. ETA=0:05:12
[02/18 09:47:37] mask2former INFO: Inference done 243/1093. Dataloading: 0.0054 s/iter. Inference: 0.2384 s/iter. Eval: 0.1167 s/iter. Total: 0.3605 s/iter. ETA=0:05:06
[02/18 09:47:42] mask2former INFO: Inference done 257/1093. Dataloading: 0.0053 s/iter. Inference: 0.2389 s/iter. Eval: 0.1165 s/iter. Total: 0.3608 s/iter. ETA=0:05:01
[02/18 09:47:47] mask2former INFO: Inference done 271/1093. Dataloading: 0.0054 s/iter. Inference: 0.2394 s/iter. Eval: 0.1161 s/iter. Total: 0.3610 s/iter. ETA=0:04:56
[02/18 09:47:52] mask2former INFO: Inference done 286/1093. Dataloading: 0.0053 s/iter. Inference: 0.2388 s/iter. Eval: 0.1160 s/iter. Total: 0.3603 s/iter. ETA=0:04:50
[02/18 09:47:57] mask2former INFO: Inference done 301/1093. Dataloading: 0.0053 s/iter. Inference: 0.2386 s/iter. Eval: 0.1157 s/iter. Total: 0.3597 s/iter. ETA=0:04:44
[02/18 09:48:03] mask2former INFO: Inference done 316/1093. Dataloading: 0.0053 s/iter. Inference: 0.2386 s/iter. Eval: 0.1153 s/iter. Total: 0.3593 s/iter. ETA=0:04:39
[02/18 09:48:08] mask2former INFO: Inference done 330/1093. Dataloading: 0.0053 s/iter. Inference: 0.2384 s/iter. Eval: 0.1157 s/iter. Total: 0.3594 s/iter. ETA=0:04:34
[02/18 09:48:13] mask2former INFO: Inference done 344/1093. Dataloading: 0.0053 s/iter. Inference: 0.2387 s/iter. Eval: 0.1155 s/iter. Total: 0.3597 s/iter. ETA=0:04:29
[02/18 09:48:18] mask2former INFO: Inference done 359/1093. Dataloading: 0.0053 s/iter. Inference: 0.2388 s/iter. Eval: 0.1152 s/iter. Total: 0.3594 s/iter. ETA=0:04:23
[02/18 09:48:23] mask2former INFO: Inference done 372/1093. Dataloading: 0.0054 s/iter. Inference: 0.2397 s/iter. Eval: 0.1157 s/iter. Total: 0.3608 s/iter. ETA=0:04:20
[02/18 09:48:28] mask2former INFO: Inference done 386/1093. Dataloading: 0.0054 s/iter. Inference: 0.2398 s/iter. Eval: 0.1158 s/iter. Total: 0.3611 s/iter. ETA=0:04:15
[02/18 09:48:34] mask2former INFO: Inference done 400/1093. Dataloading: 0.0054 s/iter. Inference: 0.2403 s/iter. Eval: 0.1153 s/iter. Total: 0.3611 s/iter. ETA=0:04:10
[02/18 09:48:39] mask2former INFO: Inference done 415/1093. Dataloading: 0.0054 s/iter. Inference: 0.2403 s/iter. Eval: 0.1150 s/iter. Total: 0.3607 s/iter. ETA=0:04:04
[02/18 09:48:44] mask2former INFO: Inference done 430/1093. Dataloading: 0.0054 s/iter. Inference: 0.2399 s/iter. Eval: 0.1147 s/iter. Total: 0.3600 s/iter. ETA=0:03:58
[02/18 09:48:49] mask2former INFO: Inference done 444/1093. Dataloading: 0.0054 s/iter. Inference: 0.2401 s/iter. Eval: 0.1148 s/iter. Total: 0.3604 s/iter. ETA=0:03:53
[02/18 09:48:54] mask2former INFO: Inference done 459/1093. Dataloading: 0.0053 s/iter. Inference: 0.2402 s/iter. Eval: 0.1146 s/iter. Total: 0.3602 s/iter. ETA=0:03:48
[02/18 09:49:00] mask2former INFO: Inference done 474/1093. Dataloading: 0.0053 s/iter. Inference: 0.2398 s/iter. Eval: 0.1146 s/iter. Total: 0.3598 s/iter. ETA=0:03:42
[02/18 09:49:05] mask2former INFO: Inference done 488/1093. Dataloading: 0.0053 s/iter. Inference: 0.2397 s/iter. Eval: 0.1151 s/iter. Total: 0.3602 s/iter. ETA=0:03:37
[02/18 09:49:10] mask2former INFO: Inference done 502/1093. Dataloading: 0.0053 s/iter. Inference: 0.2397 s/iter. Eval: 0.1155 s/iter. Total: 0.3607 s/iter. ETA=0:03:33
[02/18 09:49:15] mask2former INFO: Inference done 517/1093. Dataloading: 0.0056 s/iter. Inference: 0.2396 s/iter. Eval: 0.1150 s/iter. Total: 0.3603 s/iter. ETA=0:03:27
[02/18 09:49:20] mask2former INFO: Inference done 531/1093. Dataloading: 0.0056 s/iter. Inference: 0.2395 s/iter. Eval: 0.1152 s/iter. Total: 0.3604 s/iter. ETA=0:03:22
[02/18 09:49:26] mask2former INFO: Inference done 545/1093. Dataloading: 0.0056 s/iter. Inference: 0.2397 s/iter. Eval: 0.1150 s/iter. Total: 0.3605 s/iter. ETA=0:03:17
[02/18 09:49:31] mask2former INFO: Inference done 558/1093. Dataloading: 0.0056 s/iter. Inference: 0.2403 s/iter. Eval: 0.1152 s/iter. Total: 0.3613 s/iter. ETA=0:03:13
[02/18 09:49:36] mask2former INFO: Inference done 572/1093. Dataloading: 0.0056 s/iter. Inference: 0.2406 s/iter. Eval: 0.1154 s/iter. Total: 0.3617 s/iter. ETA=0:03:08
[02/18 09:49:41] mask2former INFO: Inference done 586/1093. Dataloading: 0.0056 s/iter. Inference: 0.2403 s/iter. Eval: 0.1160 s/iter. Total: 0.3621 s/iter. ETA=0:03:03
[02/18 09:49:46] mask2former INFO: Inference done 600/1093. Dataloading: 0.0056 s/iter. Inference: 0.2405 s/iter. Eval: 0.1159 s/iter. Total: 0.3622 s/iter. ETA=0:02:58
[02/18 09:49:52] mask2former INFO: Inference done 615/1093. Dataloading: 0.0056 s/iter. Inference: 0.2404 s/iter. Eval: 0.1159 s/iter. Total: 0.3620 s/iter. ETA=0:02:53
[02/18 09:49:57] mask2former INFO: Inference done 630/1093. Dataloading: 0.0056 s/iter. Inference: 0.2401 s/iter. Eval: 0.1160 s/iter. Total: 0.3618 s/iter. ETA=0:02:47
[02/18 09:50:02] mask2former INFO: Inference done 644/1093. Dataloading: 0.0056 s/iter. Inference: 0.2402 s/iter. Eval: 0.1160 s/iter. Total: 0.3619 s/iter. ETA=0:02:42
[02/18 09:50:07] mask2former INFO: Inference done 658/1093. Dataloading: 0.0056 s/iter. Inference: 0.2402 s/iter. Eval: 0.1162 s/iter. Total: 0.3620 s/iter. ETA=0:02:37
[02/18 09:50:12] mask2former INFO: Inference done 672/1093. Dataloading: 0.0056 s/iter. Inference: 0.2403 s/iter. Eval: 0.1162 s/iter. Total: 0.3621 s/iter. ETA=0:02:32
[02/18 09:50:17] mask2former INFO: Inference done 686/1093. Dataloading: 0.0056 s/iter. Inference: 0.2404 s/iter. Eval: 0.1160 s/iter. Total: 0.3621 s/iter. ETA=0:02:27
[02/18 09:50:23] mask2former INFO: Inference done 700/1093. Dataloading: 0.0055 s/iter. Inference: 0.2408 s/iter. Eval: 0.1159 s/iter. Total: 0.3624 s/iter. ETA=0:02:22
[02/18 09:50:28] mask2former INFO: Inference done 714/1093. Dataloading: 0.0056 s/iter. Inference: 0.2410 s/iter. Eval: 0.1160 s/iter. Total: 0.3626 s/iter. ETA=0:02:17
[02/18 09:50:33] mask2former INFO: Inference done 729/1093. Dataloading: 0.0056 s/iter. Inference: 0.2409 s/iter. Eval: 0.1158 s/iter. Total: 0.3624 s/iter. ETA=0:02:11
[02/18 09:50:39] mask2former INFO: Inference done 744/1093. Dataloading: 0.0056 s/iter. Inference: 0.2408 s/iter. Eval: 0.1159 s/iter. Total: 0.3624 s/iter. ETA=0:02:06
[02/18 09:50:44] mask2former INFO: Inference done 759/1093. Dataloading: 0.0056 s/iter. Inference: 0.2407 s/iter. Eval: 0.1158 s/iter. Total: 0.3622 s/iter. ETA=0:02:00
[02/18 09:50:49] mask2former INFO: Inference done 773/1093. Dataloading: 0.0056 s/iter. Inference: 0.2406 s/iter. Eval: 0.1158 s/iter. Total: 0.3622 s/iter. ETA=0:01:55
[02/18 09:50:54] mask2former INFO: Inference done 788/1093. Dataloading: 0.0056 s/iter. Inference: 0.2405 s/iter. Eval: 0.1158 s/iter. Total: 0.3620 s/iter. ETA=0:01:50
[02/18 09:50:59] mask2former INFO: Inference done 802/1093. Dataloading: 0.0056 s/iter. Inference: 0.2405 s/iter. Eval: 0.1159 s/iter. Total: 0.3621 s/iter. ETA=0:01:45
[02/18 09:51:05] mask2former INFO: Inference done 816/1093. Dataloading: 0.0056 s/iter. Inference: 0.2403 s/iter. Eval: 0.1162 s/iter. Total: 0.3622 s/iter. ETA=0:01:40
[02/18 09:51:10] mask2former INFO: Inference done 831/1093. Dataloading: 0.0056 s/iter. Inference: 0.2401 s/iter. Eval: 0.1160 s/iter. Total: 0.3619 s/iter. ETA=0:01:34
[02/18 09:51:15] mask2former INFO: Inference done 846/1093. Dataloading: 0.0056 s/iter. Inference: 0.2401 s/iter. Eval: 0.1160 s/iter. Total: 0.3618 s/iter. ETA=0:01:29
[02/18 09:51:20] mask2former INFO: Inference done 860/1093. Dataloading: 0.0056 s/iter. Inference: 0.2402 s/iter. Eval: 0.1160 s/iter. Total: 0.3620 s/iter. ETA=0:01:24
[02/18 09:51:26] mask2former INFO: Inference done 875/1093. Dataloading: 0.0056 s/iter. Inference: 0.2403 s/iter. Eval: 0.1158 s/iter. Total: 0.3618 s/iter. ETA=0:01:18
[02/18 09:51:31] mask2former INFO: Inference done 889/1093. Dataloading: 0.0056 s/iter. Inference: 0.2403 s/iter. Eval: 0.1160 s/iter. Total: 0.3619 s/iter. ETA=0:01:13
[02/18 09:51:36] mask2former INFO: Inference done 903/1093. Dataloading: 0.0056 s/iter. Inference: 0.2404 s/iter. Eval: 0.1159 s/iter. Total: 0.3620 s/iter. ETA=0:01:08
[02/18 09:51:41] mask2former INFO: Inference done 917/1093. Dataloading: 0.0056 s/iter. Inference: 0.2404 s/iter. Eval: 0.1159 s/iter. Total: 0.3620 s/iter. ETA=0:01:03
[02/18 09:51:46] mask2former INFO: Inference done 931/1093. Dataloading: 0.0056 s/iter. Inference: 0.2406 s/iter. Eval: 0.1158 s/iter. Total: 0.3622 s/iter. ETA=0:00:58
[02/18 09:51:51] mask2former INFO: Inference done 946/1093. Dataloading: 0.0056 s/iter. Inference: 0.2406 s/iter. Eval: 0.1157 s/iter. Total: 0.3619 s/iter. ETA=0:00:53
[02/18 09:51:57] mask2former INFO: Inference done 961/1093. Dataloading: 0.0056 s/iter. Inference: 0.2406 s/iter. Eval: 0.1156 s/iter. Total: 0.3619 s/iter. ETA=0:00:47
[02/18 09:52:02] mask2former INFO: Inference done 976/1093. Dataloading: 0.0056 s/iter. Inference: 0.2403 s/iter. Eval: 0.1156 s/iter. Total: 0.3616 s/iter. ETA=0:00:42
[02/18 09:52:07] mask2former INFO: Inference done 989/1093. Dataloading: 0.0056 s/iter. Inference: 0.2405 s/iter. Eval: 0.1158 s/iter. Total: 0.3619 s/iter. ETA=0:00:37
[02/18 09:52:12] mask2former INFO: Inference done 1003/1093. Dataloading: 0.0056 s/iter. Inference: 0.2404 s/iter. Eval: 0.1158 s/iter. Total: 0.3619 s/iter. ETA=0:00:32
[02/18 09:52:17] mask2former INFO: Inference done 1017/1093. Dataloading: 0.0056 s/iter. Inference: 0.2406 s/iter. Eval: 0.1157 s/iter. Total: 0.3619 s/iter. ETA=0:00:27
[02/18 09:52:22] mask2former INFO: Inference done 1031/1093. Dataloading: 0.0056 s/iter. Inference: 0.2406 s/iter. Eval: 0.1156 s/iter. Total: 0.3619 s/iter. ETA=0:00:22
[02/18 09:52:27] mask2former INFO: Inference done 1046/1093. Dataloading: 0.0056 s/iter. Inference: 0.2406 s/iter. Eval: 0.1154 s/iter. Total: 0.3618 s/iter. ETA=0:00:17
[02/18 09:52:33] mask2former INFO: Inference done 1060/1093. Dataloading: 0.0056 s/iter. Inference: 0.2407 s/iter. Eval: 0.1154 s/iter. Total: 0.3618 s/iter. ETA=0:00:11
[02/18 09:52:38] mask2former INFO: Inference done 1074/1093. Dataloading: 0.0056 s/iter. Inference: 0.2408 s/iter. Eval: 0.1154 s/iter. Total: 0.3619 s/iter. ETA=0:00:06
[02/18 09:52:43] mask2former INFO: Inference done 1089/1093. Dataloading: 0.0056 s/iter. Inference: 0.2405 s/iter. Eval: 0.1153 s/iter. Total: 0.3615 s/iter. ETA=0:00:01
[02/18 11:01:55] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 11:01:55] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 11:01:55] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 11:02:09] mask2former INFO: Inference done 11/1093. Dataloading: 0.0038 s/iter. Inference: 0.2510 s/iter. Eval: 0.1380 s/iter. Total: 0.3928 s/iter. ETA=0:07:05
[02/18 11:02:15] mask2former INFO: Inference done 26/1093. Dataloading: 0.0049 s/iter. Inference: 0.2462 s/iter. Eval: 0.1142 s/iter. Total: 0.3653 s/iter. ETA=0:06:29
[02/18 11:02:20] mask2former INFO: Inference done 41/1093. Dataloading: 0.0050 s/iter. Inference: 0.2434 s/iter. Eval: 0.1109 s/iter. Total: 0.3594 s/iter. ETA=0:06:18
[02/18 11:02:25] mask2former INFO: Inference done 54/1093. Dataloading: 0.0061 s/iter. Inference: 0.2452 s/iter. Eval: 0.1163 s/iter. Total: 0.3676 s/iter. ETA=0:06:21
[02/18 11:02:30] mask2former INFO: Inference done 69/1093. Dataloading: 0.0057 s/iter. Inference: 0.2411 s/iter. Eval: 0.1172 s/iter. Total: 0.3642 s/iter. ETA=0:06:12
[02/18 11:02:35] mask2former INFO: Inference done 84/1093. Dataloading: 0.0055 s/iter. Inference: 0.2380 s/iter. Eval: 0.1161 s/iter. Total: 0.3596 s/iter. ETA=0:06:02
[02/18 11:02:40] mask2former INFO: Inference done 99/1093. Dataloading: 0.0054 s/iter. Inference: 0.2356 s/iter. Eval: 0.1152 s/iter. Total: 0.3563 s/iter. ETA=0:05:54
[02/18 11:02:46] mask2former INFO: Inference done 113/1093. Dataloading: 0.0053 s/iter. Inference: 0.2368 s/iter. Eval: 0.1166 s/iter. Total: 0.3588 s/iter. ETA=0:05:51
[02/18 11:02:51] mask2former INFO: Inference done 127/1093. Dataloading: 0.0058 s/iter. Inference: 0.2393 s/iter. Eval: 0.1151 s/iter. Total: 0.3604 s/iter. ETA=0:05:48
[02/18 11:02:56] mask2former INFO: Inference done 141/1093. Dataloading: 0.0058 s/iter. Inference: 0.2384 s/iter. Eval: 0.1158 s/iter. Total: 0.3601 s/iter. ETA=0:05:42
[02/18 11:03:01] mask2former INFO: Inference done 155/1093. Dataloading: 0.0057 s/iter. Inference: 0.2394 s/iter. Eval: 0.1165 s/iter. Total: 0.3617 s/iter. ETA=0:05:39
[02/18 11:03:06] mask2former INFO: Inference done 169/1093. Dataloading: 0.0057 s/iter. Inference: 0.2398 s/iter. Eval: 0.1172 s/iter. Total: 0.3628 s/iter. ETA=0:05:35
[02/18 11:03:11] mask2former INFO: Inference done 183/1093. Dataloading: 0.0057 s/iter. Inference: 0.2401 s/iter. Eval: 0.1168 s/iter. Total: 0.3627 s/iter. ETA=0:05:30
[02/18 11:03:17] mask2former INFO: Inference done 198/1093. Dataloading: 0.0057 s/iter. Inference: 0.2394 s/iter. Eval: 0.1168 s/iter. Total: 0.3620 s/iter. ETA=0:05:23
[02/18 11:03:22] mask2former INFO: Inference done 211/1093. Dataloading: 0.0058 s/iter. Inference: 0.2411 s/iter. Eval: 0.1182 s/iter. Total: 0.3651 s/iter. ETA=0:05:22
[02/18 11:03:27] mask2former INFO: Inference done 226/1093. Dataloading: 0.0058 s/iter. Inference: 0.2401 s/iter. Eval: 0.1184 s/iter. Total: 0.3644 s/iter. ETA=0:05:15
[02/18 11:03:33] mask2former INFO: Inference done 241/1093. Dataloading: 0.0057 s/iter. Inference: 0.2395 s/iter. Eval: 0.1183 s/iter. Total: 0.3635 s/iter. ETA=0:05:09
[02/18 11:03:38] mask2former INFO: Inference done 255/1093. Dataloading: 0.0057 s/iter. Inference: 0.2394 s/iter. Eval: 0.1191 s/iter. Total: 0.3642 s/iter. ETA=0:05:05
[02/18 11:03:43] mask2former INFO: Inference done 270/1093. Dataloading: 0.0056 s/iter. Inference: 0.2386 s/iter. Eval: 0.1186 s/iter. Total: 0.3628 s/iter. ETA=0:04:58
[02/18 11:03:48] mask2former INFO: Inference done 285/1093. Dataloading: 0.0055 s/iter. Inference: 0.2386 s/iter. Eval: 0.1178 s/iter. Total: 0.3620 s/iter. ETA=0:04:52
[02/18 11:03:53] mask2former INFO: Inference done 299/1093. Dataloading: 0.0055 s/iter. Inference: 0.2386 s/iter. Eval: 0.1182 s/iter. Total: 0.3624 s/iter. ETA=0:04:47
[02/18 11:03:59] mask2former INFO: Inference done 314/1093. Dataloading: 0.0055 s/iter. Inference: 0.2383 s/iter. Eval: 0.1182 s/iter. Total: 0.3621 s/iter. ETA=0:04:42
[02/18 11:04:04] mask2former INFO: Inference done 328/1093. Dataloading: 0.0054 s/iter. Inference: 0.2384 s/iter. Eval: 0.1183 s/iter. Total: 0.3622 s/iter. ETA=0:04:37
[02/18 11:04:09] mask2former INFO: Inference done 342/1093. Dataloading: 0.0054 s/iter. Inference: 0.2385 s/iter. Eval: 0.1182 s/iter. Total: 0.3622 s/iter. ETA=0:04:31
[02/18 11:04:14] mask2former INFO: Inference done 356/1093. Dataloading: 0.0054 s/iter. Inference: 0.2384 s/iter. Eval: 0.1182 s/iter. Total: 0.3621 s/iter. ETA=0:04:26
[02/18 11:04:19] mask2former INFO: Inference done 371/1093. Dataloading: 0.0054 s/iter. Inference: 0.2384 s/iter. Eval: 0.1179 s/iter. Total: 0.3618 s/iter. ETA=0:04:21
[02/18 11:04:24] mask2former INFO: Inference done 385/1093. Dataloading: 0.0054 s/iter. Inference: 0.2387 s/iter. Eval: 0.1175 s/iter. Total: 0.3617 s/iter. ETA=0:04:16
[02/18 11:04:29] mask2former INFO: Inference done 399/1093. Dataloading: 0.0054 s/iter. Inference: 0.2390 s/iter. Eval: 0.1172 s/iter. Total: 0.3616 s/iter. ETA=0:04:10
[02/18 11:04:35] mask2former INFO: Inference done 414/1093. Dataloading: 0.0054 s/iter. Inference: 0.2389 s/iter. Eval: 0.1168 s/iter. Total: 0.3612 s/iter. ETA=0:04:05
[02/18 11:04:40] mask2former INFO: Inference done 429/1093. Dataloading: 0.0054 s/iter. Inference: 0.2388 s/iter. Eval: 0.1161 s/iter. Total: 0.3604 s/iter. ETA=0:03:59
[02/18 11:04:45] mask2former INFO: Inference done 443/1093. Dataloading: 0.0054 s/iter. Inference: 0.2386 s/iter. Eval: 0.1166 s/iter. Total: 0.3607 s/iter. ETA=0:03:54
[02/18 11:04:50] mask2former INFO: Inference done 457/1093. Dataloading: 0.0054 s/iter. Inference: 0.2384 s/iter. Eval: 0.1168 s/iter. Total: 0.3607 s/iter. ETA=0:03:49
[02/18 11:04:55] mask2former INFO: Inference done 471/1093. Dataloading: 0.0054 s/iter. Inference: 0.2384 s/iter. Eval: 0.1168 s/iter. Total: 0.3606 s/iter. ETA=0:03:44
[02/18 11:05:00] mask2former INFO: Inference done 485/1093. Dataloading: 0.0054 s/iter. Inference: 0.2384 s/iter. Eval: 0.1169 s/iter. Total: 0.3608 s/iter. ETA=0:03:39
[02/18 11:05:05] mask2former INFO: Inference done 499/1093. Dataloading: 0.0054 s/iter. Inference: 0.2387 s/iter. Eval: 0.1167 s/iter. Total: 0.3608 s/iter. ETA=0:03:34
[02/18 11:05:10] mask2former INFO: Inference done 514/1093. Dataloading: 0.0053 s/iter. Inference: 0.2385 s/iter. Eval: 0.1166 s/iter. Total: 0.3605 s/iter. ETA=0:03:28
[02/18 11:05:15] mask2former INFO: Inference done 528/1093. Dataloading: 0.0053 s/iter. Inference: 0.2389 s/iter. Eval: 0.1163 s/iter. Total: 0.3606 s/iter. ETA=0:03:23
[02/18 11:05:21] mask2former INFO: Inference done 543/1093. Dataloading: 0.0053 s/iter. Inference: 0.2387 s/iter. Eval: 0.1164 s/iter. Total: 0.3605 s/iter. ETA=0:03:18
[02/18 11:05:26] mask2former INFO: Inference done 558/1093. Dataloading: 0.0053 s/iter. Inference: 0.2383 s/iter. Eval: 0.1162 s/iter. Total: 0.3599 s/iter. ETA=0:03:12
[02/18 11:05:31] mask2former INFO: Inference done 572/1093. Dataloading: 0.0053 s/iter. Inference: 0.2384 s/iter. Eval: 0.1165 s/iter. Total: 0.3602 s/iter. ETA=0:03:07
[02/18 11:05:36] mask2former INFO: Inference done 586/1093. Dataloading: 0.0053 s/iter. Inference: 0.2383 s/iter. Eval: 0.1168 s/iter. Total: 0.3606 s/iter. ETA=0:03:02
[02/18 11:05:42] mask2former INFO: Inference done 601/1093. Dataloading: 0.0053 s/iter. Inference: 0.2382 s/iter. Eval: 0.1166 s/iter. Total: 0.3603 s/iter. ETA=0:02:57
[02/18 11:05:47] mask2former INFO: Inference done 615/1093. Dataloading: 0.0053 s/iter. Inference: 0.2385 s/iter. Eval: 0.1167 s/iter. Total: 0.3606 s/iter. ETA=0:02:52
[02/18 11:05:52] mask2former INFO: Inference done 629/1093. Dataloading: 0.0053 s/iter. Inference: 0.2385 s/iter. Eval: 0.1166 s/iter. Total: 0.3605 s/iter. ETA=0:02:47
[02/18 11:05:57] mask2former INFO: Inference done 644/1093. Dataloading: 0.0053 s/iter. Inference: 0.2384 s/iter. Eval: 0.1165 s/iter. Total: 0.3604 s/iter. ETA=0:02:41
[02/18 11:06:02] mask2former INFO: Inference done 658/1093. Dataloading: 0.0053 s/iter. Inference: 0.2384 s/iter. Eval: 0.1166 s/iter. Total: 0.3605 s/iter. ETA=0:02:36
[02/18 11:06:07] mask2former INFO: Inference done 672/1093. Dataloading: 0.0054 s/iter. Inference: 0.2385 s/iter. Eval: 0.1166 s/iter. Total: 0.3605 s/iter. ETA=0:02:31
[02/18 11:06:13] mask2former INFO: Inference done 687/1093. Dataloading: 0.0053 s/iter. Inference: 0.2385 s/iter. Eval: 0.1165 s/iter. Total: 0.3604 s/iter. ETA=0:02:26
[02/18 11:06:18] mask2former INFO: Inference done 701/1093. Dataloading: 0.0053 s/iter. Inference: 0.2387 s/iter. Eval: 0.1165 s/iter. Total: 0.3606 s/iter. ETA=0:02:21
[02/18 11:06:23] mask2former INFO: Inference done 716/1093. Dataloading: 0.0054 s/iter. Inference: 0.2386 s/iter. Eval: 0.1166 s/iter. Total: 0.3606 s/iter. ETA=0:02:15
[02/18 11:06:29] mask2former INFO: Inference done 731/1093. Dataloading: 0.0054 s/iter. Inference: 0.2388 s/iter. Eval: 0.1161 s/iter. Total: 0.3604 s/iter. ETA=0:02:10
[02/18 11:06:34] mask2former INFO: Inference done 745/1093. Dataloading: 0.0054 s/iter. Inference: 0.2390 s/iter. Eval: 0.1160 s/iter. Total: 0.3604 s/iter. ETA=0:02:05
[02/18 11:06:39] mask2former INFO: Inference done 760/1093. Dataloading: 0.0054 s/iter. Inference: 0.2390 s/iter. Eval: 0.1159 s/iter. Total: 0.3604 s/iter. ETA=0:02:00
[02/18 11:06:44] mask2former INFO: Inference done 775/1093. Dataloading: 0.0054 s/iter. Inference: 0.2391 s/iter. Eval: 0.1157 s/iter. Total: 0.3602 s/iter. ETA=0:01:54
[02/18 11:06:49] mask2former INFO: Inference done 790/1093. Dataloading: 0.0054 s/iter. Inference: 0.2388 s/iter. Eval: 0.1156 s/iter. Total: 0.3599 s/iter. ETA=0:01:49
[02/18 11:06:54] mask2former INFO: Inference done 803/1093. Dataloading: 0.0054 s/iter. Inference: 0.2390 s/iter. Eval: 0.1158 s/iter. Total: 0.3603 s/iter. ETA=0:01:44
[02/18 11:07:00] mask2former INFO: Inference done 818/1093. Dataloading: 0.0054 s/iter. Inference: 0.2389 s/iter. Eval: 0.1156 s/iter. Total: 0.3600 s/iter. ETA=0:01:39
[02/18 11:07:05] mask2former INFO: Inference done 833/1093. Dataloading: 0.0054 s/iter. Inference: 0.2388 s/iter. Eval: 0.1155 s/iter. Total: 0.3598 s/iter. ETA=0:01:33
[02/18 11:07:10] mask2former INFO: Inference done 848/1093. Dataloading: 0.0054 s/iter. Inference: 0.2389 s/iter. Eval: 0.1153 s/iter. Total: 0.3597 s/iter. ETA=0:01:28
[02/18 11:07:15] mask2former INFO: Inference done 862/1093. Dataloading: 0.0054 s/iter. Inference: 0.2389 s/iter. Eval: 0.1153 s/iter. Total: 0.3597 s/iter. ETA=0:01:23
[02/18 11:07:20] mask2former INFO: Inference done 876/1093. Dataloading: 0.0054 s/iter. Inference: 0.2390 s/iter. Eval: 0.1152 s/iter. Total: 0.3597 s/iter. ETA=0:01:18
[02/18 11:07:26] mask2former INFO: Inference done 891/1093. Dataloading: 0.0054 s/iter. Inference: 0.2391 s/iter. Eval: 0.1150 s/iter. Total: 0.3596 s/iter. ETA=0:01:12
[02/18 11:07:31] mask2former INFO: Inference done 906/1093. Dataloading: 0.0055 s/iter. Inference: 0.2390 s/iter. Eval: 0.1148 s/iter. Total: 0.3594 s/iter. ETA=0:01:07
[02/18 11:07:36] mask2former INFO: Inference done 921/1093. Dataloading: 0.0055 s/iter. Inference: 0.2387 s/iter. Eval: 0.1147 s/iter. Total: 0.3590 s/iter. ETA=0:01:01
[02/18 11:07:41] mask2former INFO: Inference done 936/1093. Dataloading: 0.0055 s/iter. Inference: 0.2387 s/iter. Eval: 0.1147 s/iter. Total: 0.3590 s/iter. ETA=0:00:56
[02/18 11:07:46] mask2former INFO: Inference done 950/1093. Dataloading: 0.0056 s/iter. Inference: 0.2387 s/iter. Eval: 0.1147 s/iter. Total: 0.3591 s/iter. ETA=0:00:51
[02/18 11:07:51] mask2former INFO: Inference done 964/1093. Dataloading: 0.0056 s/iter. Inference: 0.2387 s/iter. Eval: 0.1147 s/iter. Total: 0.3591 s/iter. ETA=0:00:46
[02/18 11:07:56] mask2former INFO: Inference done 978/1093. Dataloading: 0.0056 s/iter. Inference: 0.2388 s/iter. Eval: 0.1147 s/iter. Total: 0.3592 s/iter. ETA=0:00:41
[02/18 11:08:01] mask2former INFO: Inference done 992/1093. Dataloading: 0.0056 s/iter. Inference: 0.2388 s/iter. Eval: 0.1147 s/iter. Total: 0.3592 s/iter. ETA=0:00:36
[02/18 11:08:07] mask2former INFO: Inference done 1007/1093. Dataloading: 0.0055 s/iter. Inference: 0.2387 s/iter. Eval: 0.1147 s/iter. Total: 0.3591 s/iter. ETA=0:00:30
[02/18 11:08:12] mask2former INFO: Inference done 1021/1093. Dataloading: 0.0056 s/iter. Inference: 0.2388 s/iter. Eval: 0.1149 s/iter. Total: 0.3593 s/iter. ETA=0:00:25
[02/18 11:08:17] mask2former INFO: Inference done 1036/1093. Dataloading: 0.0056 s/iter. Inference: 0.2388 s/iter. Eval: 0.1147 s/iter. Total: 0.3592 s/iter. ETA=0:00:20
[02/18 11:08:22] mask2former INFO: Inference done 1051/1093. Dataloading: 0.0056 s/iter. Inference: 0.2388 s/iter. Eval: 0.1146 s/iter. Total: 0.3590 s/iter. ETA=0:00:15
[02/18 11:08:27] mask2former INFO: Inference done 1065/1093. Dataloading: 0.0055 s/iter. Inference: 0.2387 s/iter. Eval: 0.1147 s/iter. Total: 0.3590 s/iter. ETA=0:00:10
[02/18 11:08:33] mask2former INFO: Inference done 1080/1093. Dataloading: 0.0055 s/iter. Inference: 0.2387 s/iter. Eval: 0.1147 s/iter. Total: 0.3590 s/iter. ETA=0:00:04
[02/18 12:11:35] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 12:11:35] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 12:11:35] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 12:11:51] mask2former INFO: Inference done 11/1093. Dataloading: 0.0042 s/iter. Inference: 0.2538 s/iter. Eval: 0.1155 s/iter. Total: 0.3734 s/iter. ETA=0:06:44
[02/18 12:11:56] mask2former INFO: Inference done 25/1093. Dataloading: 0.0048 s/iter. Inference: 0.2477 s/iter. Eval: 0.1169 s/iter. Total: 0.3694 s/iter. ETA=0:06:34
[02/18 12:12:01] mask2former INFO: Inference done 40/1093. Dataloading: 0.0051 s/iter. Inference: 0.2427 s/iter. Eval: 0.1145 s/iter. Total: 0.3624 s/iter. ETA=0:06:21
[02/18 12:12:07] mask2former INFO: Inference done 54/1093. Dataloading: 0.0053 s/iter. Inference: 0.2438 s/iter. Eval: 0.1173 s/iter. Total: 0.3664 s/iter. ETA=0:06:20
[02/18 12:12:12] mask2former INFO: Inference done 68/1093. Dataloading: 0.0053 s/iter. Inference: 0.2460 s/iter. Eval: 0.1167 s/iter. Total: 0.3680 s/iter. ETA=0:06:17
[02/18 12:12:17] mask2former INFO: Inference done 83/1093. Dataloading: 0.0053 s/iter. Inference: 0.2434 s/iter. Eval: 0.1140 s/iter. Total: 0.3628 s/iter. ETA=0:06:06
[02/18 12:12:22] mask2former INFO: Inference done 97/1093. Dataloading: 0.0053 s/iter. Inference: 0.2420 s/iter. Eval: 0.1149 s/iter. Total: 0.3623 s/iter. ETA=0:06:00
[02/18 12:12:27] mask2former INFO: Inference done 112/1093. Dataloading: 0.0053 s/iter. Inference: 0.2399 s/iter. Eval: 0.1158 s/iter. Total: 0.3611 s/iter. ETA=0:05:54
[02/18 12:12:33] mask2former INFO: Inference done 127/1093. Dataloading: 0.0054 s/iter. Inference: 0.2389 s/iter. Eval: 0.1155 s/iter. Total: 0.3599 s/iter. ETA=0:05:47
[02/18 12:12:38] mask2former INFO: Inference done 141/1093. Dataloading: 0.0054 s/iter. Inference: 0.2385 s/iter. Eval: 0.1162 s/iter. Total: 0.3602 s/iter. ETA=0:05:42
[02/18 12:12:43] mask2former INFO: Inference done 155/1093. Dataloading: 0.0053 s/iter. Inference: 0.2393 s/iter. Eval: 0.1163 s/iter. Total: 0.3610 s/iter. ETA=0:05:38
[02/18 12:12:48] mask2former INFO: Inference done 170/1093. Dataloading: 0.0053 s/iter. Inference: 0.2386 s/iter. Eval: 0.1155 s/iter. Total: 0.3594 s/iter. ETA=0:05:31
[02/18 12:12:53] mask2former INFO: Inference done 184/1093. Dataloading: 0.0053 s/iter. Inference: 0.2394 s/iter. Eval: 0.1158 s/iter. Total: 0.3606 s/iter. ETA=0:05:27
[02/18 12:12:58] mask2former INFO: Inference done 198/1093. Dataloading: 0.0055 s/iter. Inference: 0.2396 s/iter. Eval: 0.1160 s/iter. Total: 0.3611 s/iter. ETA=0:05:23
[02/18 12:13:03] mask2former INFO: Inference done 212/1093. Dataloading: 0.0055 s/iter. Inference: 0.2396 s/iter. Eval: 0.1162 s/iter. Total: 0.3613 s/iter. ETA=0:05:18
[02/18 12:13:09] mask2former INFO: Inference done 227/1093. Dataloading: 0.0055 s/iter. Inference: 0.2395 s/iter. Eval: 0.1157 s/iter. Total: 0.3607 s/iter. ETA=0:05:12
[02/18 12:13:14] mask2former INFO: Inference done 241/1093. Dataloading: 0.0054 s/iter. Inference: 0.2401 s/iter. Eval: 0.1157 s/iter. Total: 0.3613 s/iter. ETA=0:05:07
[02/18 12:13:19] mask2former INFO: Inference done 255/1093. Dataloading: 0.0054 s/iter. Inference: 0.2401 s/iter. Eval: 0.1169 s/iter. Total: 0.3625 s/iter. ETA=0:05:03
[02/18 12:13:25] mask2former INFO: Inference done 270/1093. Dataloading: 0.0053 s/iter. Inference: 0.2398 s/iter. Eval: 0.1164 s/iter. Total: 0.3616 s/iter. ETA=0:04:57
[02/18 12:13:30] mask2former INFO: Inference done 284/1093. Dataloading: 0.0053 s/iter. Inference: 0.2402 s/iter. Eval: 0.1165 s/iter. Total: 0.3622 s/iter. ETA=0:04:53
[02/18 12:13:35] mask2former INFO: Inference done 298/1093. Dataloading: 0.0053 s/iter. Inference: 0.2399 s/iter. Eval: 0.1167 s/iter. Total: 0.3620 s/iter. ETA=0:04:47
[02/18 12:13:40] mask2former INFO: Inference done 312/1093. Dataloading: 0.0053 s/iter. Inference: 0.2404 s/iter. Eval: 0.1166 s/iter. Total: 0.3624 s/iter. ETA=0:04:43
[02/18 12:13:45] mask2former INFO: Inference done 327/1093. Dataloading: 0.0053 s/iter. Inference: 0.2403 s/iter. Eval: 0.1163 s/iter. Total: 0.3619 s/iter. ETA=0:04:37
[02/18 12:13:50] mask2former INFO: Inference done 341/1093. Dataloading: 0.0052 s/iter. Inference: 0.2406 s/iter. Eval: 0.1160 s/iter. Total: 0.3619 s/iter. ETA=0:04:32
[02/18 12:13:56] mask2former INFO: Inference done 355/1093. Dataloading: 0.0056 s/iter. Inference: 0.2409 s/iter. Eval: 0.1161 s/iter. Total: 0.3627 s/iter. ETA=0:04:27
[02/18 12:14:01] mask2former INFO: Inference done 370/1093. Dataloading: 0.0056 s/iter. Inference: 0.2406 s/iter. Eval: 0.1161 s/iter. Total: 0.3623 s/iter. ETA=0:04:21
[02/18 12:14:06] mask2former INFO: Inference done 384/1093. Dataloading: 0.0055 s/iter. Inference: 0.2412 s/iter. Eval: 0.1158 s/iter. Total: 0.3626 s/iter. ETA=0:04:17
[02/18 12:14:11] mask2former INFO: Inference done 398/1093. Dataloading: 0.0055 s/iter. Inference: 0.2410 s/iter. Eval: 0.1161 s/iter. Total: 0.3627 s/iter. ETA=0:04:12
[02/18 12:14:16] mask2former INFO: Inference done 412/1093. Dataloading: 0.0055 s/iter. Inference: 0.2410 s/iter. Eval: 0.1162 s/iter. Total: 0.3629 s/iter. ETA=0:04:07
[02/18 12:14:22] mask2former INFO: Inference done 426/1093. Dataloading: 0.0056 s/iter. Inference: 0.2417 s/iter. Eval: 0.1163 s/iter. Total: 0.3637 s/iter. ETA=0:04:02
[02/18 12:14:27] mask2former INFO: Inference done 440/1093. Dataloading: 0.0056 s/iter. Inference: 0.2423 s/iter. Eval: 0.1164 s/iter. Total: 0.3644 s/iter. ETA=0:03:57
[02/18 12:14:32] mask2former INFO: Inference done 453/1093. Dataloading: 0.0057 s/iter. Inference: 0.2428 s/iter. Eval: 0.1168 s/iter. Total: 0.3654 s/iter. ETA=0:03:53
[02/18 12:14:37] mask2former INFO: Inference done 467/1093. Dataloading: 0.0057 s/iter. Inference: 0.2427 s/iter. Eval: 0.1168 s/iter. Total: 0.3652 s/iter. ETA=0:03:48
[02/18 12:14:43] mask2former INFO: Inference done 481/1093. Dataloading: 0.0056 s/iter. Inference: 0.2426 s/iter. Eval: 0.1172 s/iter. Total: 0.3655 s/iter. ETA=0:03:43
[02/18 12:14:48] mask2former INFO: Inference done 496/1093. Dataloading: 0.0056 s/iter. Inference: 0.2422 s/iter. Eval: 0.1169 s/iter. Total: 0.3648 s/iter. ETA=0:03:37
[02/18 12:14:53] mask2former INFO: Inference done 510/1093. Dataloading: 0.0056 s/iter. Inference: 0.2424 s/iter. Eval: 0.1169 s/iter. Total: 0.3650 s/iter. ETA=0:03:32
[02/18 12:14:58] mask2former INFO: Inference done 525/1093. Dataloading: 0.0056 s/iter. Inference: 0.2423 s/iter. Eval: 0.1165 s/iter. Total: 0.3645 s/iter. ETA=0:03:27
[02/18 12:15:03] mask2former INFO: Inference done 539/1093. Dataloading: 0.0057 s/iter. Inference: 0.2423 s/iter. Eval: 0.1166 s/iter. Total: 0.3646 s/iter. ETA=0:03:21
[02/18 12:15:09] mask2former INFO: Inference done 554/1093. Dataloading: 0.0057 s/iter. Inference: 0.2419 s/iter. Eval: 0.1166 s/iter. Total: 0.3642 s/iter. ETA=0:03:16
[02/18 12:15:14] mask2former INFO: Inference done 567/1093. Dataloading: 0.0057 s/iter. Inference: 0.2425 s/iter. Eval: 0.1166 s/iter. Total: 0.3648 s/iter. ETA=0:03:11
[02/18 12:15:19] mask2former INFO: Inference done 581/1093. Dataloading: 0.0057 s/iter. Inference: 0.2423 s/iter. Eval: 0.1167 s/iter. Total: 0.3648 s/iter. ETA=0:03:06
[02/18 12:15:24] mask2former INFO: Inference done 596/1093. Dataloading: 0.0057 s/iter. Inference: 0.2417 s/iter. Eval: 0.1169 s/iter. Total: 0.3644 s/iter. ETA=0:03:01
[02/18 12:15:29] mask2former INFO: Inference done 611/1093. Dataloading: 0.0057 s/iter. Inference: 0.2415 s/iter. Eval: 0.1170 s/iter. Total: 0.3642 s/iter. ETA=0:02:55
[02/18 12:15:35] mask2former INFO: Inference done 625/1093. Dataloading: 0.0057 s/iter. Inference: 0.2417 s/iter. Eval: 0.1170 s/iter. Total: 0.3644 s/iter. ETA=0:02:50
[02/18 12:15:40] mask2former INFO: Inference done 639/1093. Dataloading: 0.0057 s/iter. Inference: 0.2416 s/iter. Eval: 0.1170 s/iter. Total: 0.3644 s/iter. ETA=0:02:45
[02/18 12:15:45] mask2former INFO: Inference done 654/1093. Dataloading: 0.0056 s/iter. Inference: 0.2416 s/iter. Eval: 0.1167 s/iter. Total: 0.3641 s/iter. ETA=0:02:39
[02/18 12:15:50] mask2former INFO: Inference done 668/1093. Dataloading: 0.0057 s/iter. Inference: 0.2414 s/iter. Eval: 0.1168 s/iter. Total: 0.3640 s/iter. ETA=0:02:34
[02/18 12:15:55] mask2former INFO: Inference done 683/1093. Dataloading: 0.0056 s/iter. Inference: 0.2415 s/iter. Eval: 0.1167 s/iter. Total: 0.3639 s/iter. ETA=0:02:29
[02/18 12:16:01] mask2former INFO: Inference done 697/1093. Dataloading: 0.0056 s/iter. Inference: 0.2419 s/iter. Eval: 0.1166 s/iter. Total: 0.3642 s/iter. ETA=0:02:24
[02/18 12:16:06] mask2former INFO: Inference done 712/1093. Dataloading: 0.0056 s/iter. Inference: 0.2416 s/iter. Eval: 0.1165 s/iter. Total: 0.3638 s/iter. ETA=0:02:18
[02/18 12:16:11] mask2former INFO: Inference done 726/1093. Dataloading: 0.0056 s/iter. Inference: 0.2417 s/iter. Eval: 0.1163 s/iter. Total: 0.3637 s/iter. ETA=0:02:13
[02/18 12:16:16] mask2former INFO: Inference done 741/1093. Dataloading: 0.0056 s/iter. Inference: 0.2416 s/iter. Eval: 0.1161 s/iter. Total: 0.3633 s/iter. ETA=0:02:07
[02/18 12:16:21] mask2former INFO: Inference done 756/1093. Dataloading: 0.0056 s/iter. Inference: 0.2414 s/iter. Eval: 0.1158 s/iter. Total: 0.3629 s/iter. ETA=0:02:02
[02/18 12:16:26] mask2former INFO: Inference done 770/1093. Dataloading: 0.0056 s/iter. Inference: 0.2414 s/iter. Eval: 0.1158 s/iter. Total: 0.3629 s/iter. ETA=0:01:57
[02/18 12:16:31] mask2former INFO: Inference done 783/1093. Dataloading: 0.0056 s/iter. Inference: 0.2418 s/iter. Eval: 0.1159 s/iter. Total: 0.3633 s/iter. ETA=0:01:52
[02/18 12:16:37] mask2former INFO: Inference done 798/1093. Dataloading: 0.0055 s/iter. Inference: 0.2415 s/iter. Eval: 0.1159 s/iter. Total: 0.3631 s/iter. ETA=0:01:47
[02/18 12:16:42] mask2former INFO: Inference done 812/1093. Dataloading: 0.0056 s/iter. Inference: 0.2417 s/iter. Eval: 0.1159 s/iter. Total: 0.3633 s/iter. ETA=0:01:42
[02/18 12:16:47] mask2former INFO: Inference done 827/1093. Dataloading: 0.0056 s/iter. Inference: 0.2416 s/iter. Eval: 0.1157 s/iter. Total: 0.3630 s/iter. ETA=0:01:36
[02/18 12:16:52] mask2former INFO: Inference done 842/1093. Dataloading: 0.0056 s/iter. Inference: 0.2414 s/iter. Eval: 0.1157 s/iter. Total: 0.3628 s/iter. ETA=0:01:31
[02/18 12:16:58] mask2former INFO: Inference done 857/1093. Dataloading: 0.0056 s/iter. Inference: 0.2412 s/iter. Eval: 0.1156 s/iter. Total: 0.3625 s/iter. ETA=0:01:25
[02/18 12:17:03] mask2former INFO: Inference done 872/1093. Dataloading: 0.0056 s/iter. Inference: 0.2413 s/iter. Eval: 0.1155 s/iter. Total: 0.3624 s/iter. ETA=0:01:20
[02/18 12:17:08] mask2former INFO: Inference done 887/1093. Dataloading: 0.0056 s/iter. Inference: 0.2411 s/iter. Eval: 0.1155 s/iter. Total: 0.3622 s/iter. ETA=0:01:14
[02/18 12:17:13] mask2former INFO: Inference done 902/1093. Dataloading: 0.0055 s/iter. Inference: 0.2411 s/iter. Eval: 0.1153 s/iter. Total: 0.3621 s/iter. ETA=0:01:09
[02/18 12:17:19] mask2former INFO: Inference done 916/1093. Dataloading: 0.0055 s/iter. Inference: 0.2411 s/iter. Eval: 0.1153 s/iter. Total: 0.3621 s/iter. ETA=0:01:04
[02/18 12:17:24] mask2former INFO: Inference done 930/1093. Dataloading: 0.0056 s/iter. Inference: 0.2411 s/iter. Eval: 0.1154 s/iter. Total: 0.3622 s/iter. ETA=0:00:59
[02/18 12:17:29] mask2former INFO: Inference done 944/1093. Dataloading: 0.0055 s/iter. Inference: 0.2412 s/iter. Eval: 0.1155 s/iter. Total: 0.3624 s/iter. ETA=0:00:53
[02/18 12:17:34] mask2former INFO: Inference done 958/1093. Dataloading: 0.0055 s/iter. Inference: 0.2411 s/iter. Eval: 0.1156 s/iter. Total: 0.3623 s/iter. ETA=0:00:48
[02/18 12:17:39] mask2former INFO: Inference done 972/1093. Dataloading: 0.0055 s/iter. Inference: 0.2412 s/iter. Eval: 0.1155 s/iter. Total: 0.3623 s/iter. ETA=0:00:43
[02/18 12:17:44] mask2former INFO: Inference done 986/1093. Dataloading: 0.0055 s/iter. Inference: 0.2413 s/iter. Eval: 0.1156 s/iter. Total: 0.3625 s/iter. ETA=0:00:38
[02/18 12:17:49] mask2former INFO: Inference done 1000/1093. Dataloading: 0.0056 s/iter. Inference: 0.2412 s/iter. Eval: 0.1156 s/iter. Total: 0.3624 s/iter. ETA=0:00:33
[02/18 12:17:55] mask2former INFO: Inference done 1015/1093. Dataloading: 0.0055 s/iter. Inference: 0.2410 s/iter. Eval: 0.1156 s/iter. Total: 0.3622 s/iter. ETA=0:00:28
[02/18 12:18:00] mask2former INFO: Inference done 1030/1093. Dataloading: 0.0055 s/iter. Inference: 0.2408 s/iter. Eval: 0.1155 s/iter. Total: 0.3619 s/iter. ETA=0:00:22
[02/18 12:18:05] mask2former INFO: Inference done 1044/1093. Dataloading: 0.0055 s/iter. Inference: 0.2408 s/iter. Eval: 0.1156 s/iter. Total: 0.3620 s/iter. ETA=0:00:17
[02/18 12:18:10] mask2former INFO: Inference done 1058/1093. Dataloading: 0.0055 s/iter. Inference: 0.2409 s/iter. Eval: 0.1156 s/iter. Total: 0.3621 s/iter. ETA=0:00:12
[02/18 12:18:15] mask2former INFO: Inference done 1073/1093. Dataloading: 0.0055 s/iter. Inference: 0.2409 s/iter. Eval: 0.1154 s/iter. Total: 0.3620 s/iter. ETA=0:00:07
[02/18 12:18:21] mask2former INFO: Inference done 1088/1093. Dataloading: 0.0055 s/iter. Inference: 0.2410 s/iter. Eval: 0.1152 s/iter. Total: 0.3618 s/iter. ETA=0:00:01
[02/18 13:26:12] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 13:26:13] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 13:26:13] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 13:26:28] mask2former INFO: Inference done 11/1093. Dataloading: 0.0039 s/iter. Inference: 0.2396 s/iter. Eval: 0.1289 s/iter. Total: 0.3725 s/iter. ETA=0:06:43
[02/18 13:26:33] mask2former INFO: Inference done 25/1093. Dataloading: 0.0049 s/iter. Inference: 0.2372 s/iter. Eval: 0.1230 s/iter. Total: 0.3652 s/iter. ETA=0:06:30
[02/18 13:26:38] mask2former INFO: Inference done 39/1093. Dataloading: 0.0050 s/iter. Inference: 0.2361 s/iter. Eval: 0.1280 s/iter. Total: 0.3693 s/iter. ETA=0:06:29
[02/18 13:26:43] mask2former INFO: Inference done 54/1093. Dataloading: 0.0049 s/iter. Inference: 0.2353 s/iter. Eval: 0.1233 s/iter. Total: 0.3636 s/iter. ETA=0:06:17
[02/18 13:26:49] mask2former INFO: Inference done 69/1093. Dataloading: 0.0048 s/iter. Inference: 0.2337 s/iter. Eval: 0.1218 s/iter. Total: 0.3604 s/iter. ETA=0:06:09
[02/18 13:26:54] mask2former INFO: Inference done 82/1093. Dataloading: 0.0049 s/iter. Inference: 0.2388 s/iter. Eval: 0.1214 s/iter. Total: 0.3652 s/iter. ETA=0:06:09
[02/18 13:26:59] mask2former INFO: Inference done 96/1093. Dataloading: 0.0049 s/iter. Inference: 0.2385 s/iter. Eval: 0.1206 s/iter. Total: 0.3641 s/iter. ETA=0:06:03
[02/18 13:27:04] mask2former INFO: Inference done 111/1093. Dataloading: 0.0049 s/iter. Inference: 0.2392 s/iter. Eval: 0.1188 s/iter. Total: 0.3631 s/iter. ETA=0:05:56
[02/18 13:27:09] mask2former INFO: Inference done 126/1093. Dataloading: 0.0049 s/iter. Inference: 0.2383 s/iter. Eval: 0.1179 s/iter. Total: 0.3611 s/iter. ETA=0:05:49
[02/18 13:27:14] mask2former INFO: Inference done 140/1093. Dataloading: 0.0049 s/iter. Inference: 0.2376 s/iter. Eval: 0.1182 s/iter. Total: 0.3608 s/iter. ETA=0:05:43
[02/18 13:27:19] mask2former INFO: Inference done 154/1093. Dataloading: 0.0048 s/iter. Inference: 0.2375 s/iter. Eval: 0.1184 s/iter. Total: 0.3608 s/iter. ETA=0:05:38
[02/18 13:27:24] mask2former INFO: Inference done 169/1093. Dataloading: 0.0048 s/iter. Inference: 0.2375 s/iter. Eval: 0.1169 s/iter. Total: 0.3593 s/iter. ETA=0:05:32
[02/18 13:27:30] mask2former INFO: Inference done 184/1093. Dataloading: 0.0048 s/iter. Inference: 0.2372 s/iter. Eval: 0.1166 s/iter. Total: 0.3587 s/iter. ETA=0:05:26
[02/18 13:27:35] mask2former INFO: Inference done 198/1093. Dataloading: 0.0048 s/iter. Inference: 0.2379 s/iter. Eval: 0.1166 s/iter. Total: 0.3594 s/iter. ETA=0:05:21
[02/18 13:27:40] mask2former INFO: Inference done 212/1093. Dataloading: 0.0048 s/iter. Inference: 0.2386 s/iter. Eval: 0.1172 s/iter. Total: 0.3607 s/iter. ETA=0:05:17
[02/18 13:27:45] mask2former INFO: Inference done 226/1093. Dataloading: 0.0049 s/iter. Inference: 0.2387 s/iter. Eval: 0.1169 s/iter. Total: 0.3605 s/iter. ETA=0:05:12
[02/18 13:27:50] mask2former INFO: Inference done 240/1093. Dataloading: 0.0048 s/iter. Inference: 0.2385 s/iter. Eval: 0.1171 s/iter. Total: 0.3606 s/iter. ETA=0:05:07
[02/18 13:27:56] mask2former INFO: Inference done 255/1093. Dataloading: 0.0048 s/iter. Inference: 0.2384 s/iter. Eval: 0.1166 s/iter. Total: 0.3599 s/iter. ETA=0:05:01
[02/18 13:28:01] mask2former INFO: Inference done 270/1093. Dataloading: 0.0048 s/iter. Inference: 0.2385 s/iter. Eval: 0.1161 s/iter. Total: 0.3595 s/iter. ETA=0:04:55
[02/18 13:28:06] mask2former INFO: Inference done 285/1093. Dataloading: 0.0048 s/iter. Inference: 0.2375 s/iter. Eval: 0.1169 s/iter. Total: 0.3594 s/iter. ETA=0:04:50
[02/18 13:28:11] mask2former INFO: Inference done 298/1093. Dataloading: 0.0049 s/iter. Inference: 0.2385 s/iter. Eval: 0.1175 s/iter. Total: 0.3610 s/iter. ETA=0:04:46
[02/18 13:28:16] mask2former INFO: Inference done 312/1093. Dataloading: 0.0049 s/iter. Inference: 0.2390 s/iter. Eval: 0.1172 s/iter. Total: 0.3611 s/iter. ETA=0:04:42
[02/18 13:28:22] mask2former INFO: Inference done 327/1093. Dataloading: 0.0048 s/iter. Inference: 0.2382 s/iter. Eval: 0.1172 s/iter. Total: 0.3604 s/iter. ETA=0:04:36
[02/18 13:28:27] mask2former INFO: Inference done 342/1093. Dataloading: 0.0048 s/iter. Inference: 0.2382 s/iter. Eval: 0.1169 s/iter. Total: 0.3600 s/iter. ETA=0:04:30
[02/18 13:28:32] mask2former INFO: Inference done 356/1093. Dataloading: 0.0049 s/iter. Inference: 0.2380 s/iter. Eval: 0.1170 s/iter. Total: 0.3599 s/iter. ETA=0:04:25
[02/18 13:28:37] mask2former INFO: Inference done 370/1093. Dataloading: 0.0050 s/iter. Inference: 0.2380 s/iter. Eval: 0.1171 s/iter. Total: 0.3601 s/iter. ETA=0:04:20
[02/18 13:28:42] mask2former INFO: Inference done 385/1093. Dataloading: 0.0050 s/iter. Inference: 0.2382 s/iter. Eval: 0.1166 s/iter. Total: 0.3599 s/iter. ETA=0:04:14
[02/18 13:28:48] mask2former INFO: Inference done 400/1093. Dataloading: 0.0050 s/iter. Inference: 0.2381 s/iter. Eval: 0.1164 s/iter. Total: 0.3596 s/iter. ETA=0:04:09
[02/18 13:28:53] mask2former INFO: Inference done 415/1093. Dataloading: 0.0050 s/iter. Inference: 0.2378 s/iter. Eval: 0.1163 s/iter. Total: 0.3592 s/iter. ETA=0:04:03
[02/18 13:28:58] mask2former INFO: Inference done 429/1093. Dataloading: 0.0051 s/iter. Inference: 0.2379 s/iter. Eval: 0.1163 s/iter. Total: 0.3593 s/iter. ETA=0:03:58
[02/18 13:29:03] mask2former INFO: Inference done 443/1093. Dataloading: 0.0051 s/iter. Inference: 0.2384 s/iter. Eval: 0.1162 s/iter. Total: 0.3598 s/iter. ETA=0:03:53
[02/18 13:29:08] mask2former INFO: Inference done 457/1093. Dataloading: 0.0051 s/iter. Inference: 0.2383 s/iter. Eval: 0.1164 s/iter. Total: 0.3598 s/iter. ETA=0:03:48
[02/18 13:29:13] mask2former INFO: Inference done 471/1093. Dataloading: 0.0051 s/iter. Inference: 0.2385 s/iter. Eval: 0.1164 s/iter. Total: 0.3600 s/iter. ETA=0:03:43
[02/18 13:29:19] mask2former INFO: Inference done 486/1093. Dataloading: 0.0051 s/iter. Inference: 0.2380 s/iter. Eval: 0.1165 s/iter. Total: 0.3596 s/iter. ETA=0:03:38
[02/18 13:29:24] mask2former INFO: Inference done 501/1093. Dataloading: 0.0051 s/iter. Inference: 0.2379 s/iter. Eval: 0.1164 s/iter. Total: 0.3594 s/iter. ETA=0:03:32
[02/18 13:29:29] mask2former INFO: Inference done 515/1093. Dataloading: 0.0050 s/iter. Inference: 0.2380 s/iter. Eval: 0.1164 s/iter. Total: 0.3595 s/iter. ETA=0:03:27
[02/18 13:29:34] mask2former INFO: Inference done 530/1093. Dataloading: 0.0050 s/iter. Inference: 0.2379 s/iter. Eval: 0.1160 s/iter. Total: 0.3591 s/iter. ETA=0:03:22
[02/18 13:29:39] mask2former INFO: Inference done 545/1093. Dataloading: 0.0050 s/iter. Inference: 0.2377 s/iter. Eval: 0.1162 s/iter. Total: 0.3590 s/iter. ETA=0:03:16
[02/18 13:29:45] mask2former INFO: Inference done 560/1093. Dataloading: 0.0050 s/iter. Inference: 0.2376 s/iter. Eval: 0.1161 s/iter. Total: 0.3589 s/iter. ETA=0:03:11
[02/18 13:29:50] mask2former INFO: Inference done 574/1093. Dataloading: 0.0050 s/iter. Inference: 0.2378 s/iter. Eval: 0.1161 s/iter. Total: 0.3590 s/iter. ETA=0:03:06
[02/18 13:29:55] mask2former INFO: Inference done 588/1093. Dataloading: 0.0051 s/iter. Inference: 0.2380 s/iter. Eval: 0.1160 s/iter. Total: 0.3591 s/iter. ETA=0:03:01
[02/18 13:30:00] mask2former INFO: Inference done 602/1093. Dataloading: 0.0051 s/iter. Inference: 0.2383 s/iter. Eval: 0.1159 s/iter. Total: 0.3593 s/iter. ETA=0:02:56
[02/18 13:30:05] mask2former INFO: Inference done 616/1093. Dataloading: 0.0051 s/iter. Inference: 0.2383 s/iter. Eval: 0.1161 s/iter. Total: 0.3595 s/iter. ETA=0:02:51
[02/18 13:30:10] mask2former INFO: Inference done 631/1093. Dataloading: 0.0051 s/iter. Inference: 0.2382 s/iter. Eval: 0.1158 s/iter. Total: 0.3592 s/iter. ETA=0:02:45
[02/18 13:30:16] mask2former INFO: Inference done 646/1093. Dataloading: 0.0051 s/iter. Inference: 0.2380 s/iter. Eval: 0.1157 s/iter. Total: 0.3588 s/iter. ETA=0:02:40
[02/18 13:30:21] mask2former INFO: Inference done 660/1093. Dataloading: 0.0051 s/iter. Inference: 0.2381 s/iter. Eval: 0.1159 s/iter. Total: 0.3592 s/iter. ETA=0:02:35
[02/18 13:30:26] mask2former INFO: Inference done 675/1093. Dataloading: 0.0051 s/iter. Inference: 0.2383 s/iter. Eval: 0.1157 s/iter. Total: 0.3591 s/iter. ETA=0:02:30
[02/18 13:30:31] mask2former INFO: Inference done 690/1093. Dataloading: 0.0051 s/iter. Inference: 0.2382 s/iter. Eval: 0.1155 s/iter. Total: 0.3588 s/iter. ETA=0:02:24
[02/18 13:30:36] mask2former INFO: Inference done 704/1093. Dataloading: 0.0051 s/iter. Inference: 0.2382 s/iter. Eval: 0.1156 s/iter. Total: 0.3590 s/iter. ETA=0:02:19
[02/18 13:30:42] mask2former INFO: Inference done 719/1093. Dataloading: 0.0051 s/iter. Inference: 0.2379 s/iter. Eval: 0.1157 s/iter. Total: 0.3588 s/iter. ETA=0:02:14
[02/18 13:30:47] mask2former INFO: Inference done 733/1093. Dataloading: 0.0051 s/iter. Inference: 0.2382 s/iter. Eval: 0.1157 s/iter. Total: 0.3591 s/iter. ETA=0:02:09
[02/18 13:30:52] mask2former INFO: Inference done 747/1093. Dataloading: 0.0052 s/iter. Inference: 0.2383 s/iter. Eval: 0.1159 s/iter. Total: 0.3595 s/iter. ETA=0:02:04
[02/18 13:30:58] mask2former INFO: Inference done 762/1093. Dataloading: 0.0052 s/iter. Inference: 0.2382 s/iter. Eval: 0.1159 s/iter. Total: 0.3593 s/iter. ETA=0:01:58
[02/18 13:31:03] mask2former INFO: Inference done 776/1093. Dataloading: 0.0052 s/iter. Inference: 0.2382 s/iter. Eval: 0.1161 s/iter. Total: 0.3595 s/iter. ETA=0:01:53
[02/18 13:31:08] mask2former INFO: Inference done 790/1093. Dataloading: 0.0052 s/iter. Inference: 0.2383 s/iter. Eval: 0.1160 s/iter. Total: 0.3596 s/iter. ETA=0:01:48
[02/18 13:31:13] mask2former INFO: Inference done 804/1093. Dataloading: 0.0051 s/iter. Inference: 0.2383 s/iter. Eval: 0.1161 s/iter. Total: 0.3597 s/iter. ETA=0:01:43
[02/18 13:31:18] mask2former INFO: Inference done 819/1093. Dataloading: 0.0051 s/iter. Inference: 0.2382 s/iter. Eval: 0.1161 s/iter. Total: 0.3596 s/iter. ETA=0:01:38
[02/18 13:31:23] mask2former INFO: Inference done 833/1093. Dataloading: 0.0052 s/iter. Inference: 0.2384 s/iter. Eval: 0.1159 s/iter. Total: 0.3596 s/iter. ETA=0:01:33
[02/18 13:31:28] mask2former INFO: Inference done 847/1093. Dataloading: 0.0052 s/iter. Inference: 0.2384 s/iter. Eval: 0.1160 s/iter. Total: 0.3596 s/iter. ETA=0:01:28
[02/18 13:31:34] mask2former INFO: Inference done 861/1093. Dataloading: 0.0052 s/iter. Inference: 0.2388 s/iter. Eval: 0.1157 s/iter. Total: 0.3598 s/iter. ETA=0:01:23
[02/18 13:31:39] mask2former INFO: Inference done 876/1093. Dataloading: 0.0052 s/iter. Inference: 0.2388 s/iter. Eval: 0.1157 s/iter. Total: 0.3597 s/iter. ETA=0:01:18
[02/18 13:31:44] mask2former INFO: Inference done 890/1093. Dataloading: 0.0052 s/iter. Inference: 0.2390 s/iter. Eval: 0.1155 s/iter. Total: 0.3598 s/iter. ETA=0:01:13
[02/18 13:31:49] mask2former INFO: Inference done 905/1093. Dataloading: 0.0052 s/iter. Inference: 0.2389 s/iter. Eval: 0.1152 s/iter. Total: 0.3594 s/iter. ETA=0:01:07
[02/18 13:31:54] mask2former INFO: Inference done 920/1093. Dataloading: 0.0052 s/iter. Inference: 0.2386 s/iter. Eval: 0.1154 s/iter. Total: 0.3593 s/iter. ETA=0:01:02
[02/18 13:32:00] mask2former INFO: Inference done 935/1093. Dataloading: 0.0052 s/iter. Inference: 0.2386 s/iter. Eval: 0.1153 s/iter. Total: 0.3592 s/iter. ETA=0:00:56
[02/18 13:32:05] mask2former INFO: Inference done 950/1093. Dataloading: 0.0052 s/iter. Inference: 0.2384 s/iter. Eval: 0.1152 s/iter. Total: 0.3588 s/iter. ETA=0:00:51
[02/18 13:32:10] mask2former INFO: Inference done 965/1093. Dataloading: 0.0052 s/iter. Inference: 0.2382 s/iter. Eval: 0.1152 s/iter. Total: 0.3587 s/iter. ETA=0:00:45
[02/18 13:32:15] mask2former INFO: Inference done 979/1093. Dataloading: 0.0052 s/iter. Inference: 0.2382 s/iter. Eval: 0.1151 s/iter. Total: 0.3587 s/iter. ETA=0:00:40
[02/18 13:32:20] mask2former INFO: Inference done 993/1093. Dataloading: 0.0052 s/iter. Inference: 0.2384 s/iter. Eval: 0.1151 s/iter. Total: 0.3588 s/iter. ETA=0:00:35
[02/18 13:32:25] mask2former INFO: Inference done 1007/1093. Dataloading: 0.0052 s/iter. Inference: 0.2385 s/iter. Eval: 0.1151 s/iter. Total: 0.3588 s/iter. ETA=0:00:30
[02/18 13:32:30] mask2former INFO: Inference done 1021/1093. Dataloading: 0.0052 s/iter. Inference: 0.2385 s/iter. Eval: 0.1151 s/iter. Total: 0.3589 s/iter. ETA=0:00:25
[02/18 13:32:35] mask2former INFO: Inference done 1036/1093. Dataloading: 0.0052 s/iter. Inference: 0.2383 s/iter. Eval: 0.1151 s/iter. Total: 0.3587 s/iter. ETA=0:00:20
[02/18 13:32:40] mask2former INFO: Inference done 1050/1093. Dataloading: 0.0052 s/iter. Inference: 0.2384 s/iter. Eval: 0.1151 s/iter. Total: 0.3588 s/iter. ETA=0:00:15
[02/18 13:32:46] mask2former INFO: Inference done 1065/1093. Dataloading: 0.0052 s/iter. Inference: 0.2383 s/iter. Eval: 0.1151 s/iter. Total: 0.3586 s/iter. ETA=0:00:10
[02/18 13:32:51] mask2former INFO: Inference done 1080/1093. Dataloading: 0.0052 s/iter. Inference: 0.2384 s/iter. Eval: 0.1148 s/iter. Total: 0.3586 s/iter. ETA=0:00:04
[02/18 15:06:28] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 15:06:29] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 15:06:29] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 15:06:44] mask2former INFO: Inference done 11/1093. Dataloading: 0.0036 s/iter. Inference: 0.3845 s/iter. Eval: 0.1180 s/iter. Total: 0.5061 s/iter. ETA=0:09:07
[02/18 15:06:49] mask2former INFO: Inference done 22/1093. Dataloading: 0.0048 s/iter. Inference: 0.3679 s/iter. Eval: 0.1270 s/iter. Total: 0.4999 s/iter. ETA=0:08:55
[02/18 15:06:54] mask2former INFO: Inference done 33/1093. Dataloading: 0.0048 s/iter. Inference: 0.3604 s/iter. Eval: 0.1198 s/iter. Total: 0.4851 s/iter. ETA=0:08:34
[02/18 15:07:00] mask2former INFO: Inference done 44/1093. Dataloading: 0.0048 s/iter. Inference: 0.3616 s/iter. Eval: 0.1153 s/iter. Total: 0.4817 s/iter. ETA=0:08:25
[02/18 15:07:05] mask2former INFO: Inference done 54/1093. Dataloading: 0.0050 s/iter. Inference: 0.3654 s/iter. Eval: 0.1205 s/iter. Total: 0.4910 s/iter. ETA=0:08:30
[02/18 15:07:10] mask2former INFO: Inference done 65/1093. Dataloading: 0.0050 s/iter. Inference: 0.3633 s/iter. Eval: 0.1195 s/iter. Total: 0.4878 s/iter. ETA=0:08:21
[02/18 15:07:16] mask2former INFO: Inference done 76/1093. Dataloading: 0.0049 s/iter. Inference: 0.3644 s/iter. Eval: 0.1196 s/iter. Total: 0.4889 s/iter. ETA=0:08:17
[02/18 15:07:21] mask2former INFO: Inference done 87/1093. Dataloading: 0.0050 s/iter. Inference: 0.3654 s/iter. Eval: 0.1184 s/iter. Total: 0.4889 s/iter. ETA=0:08:11
[02/18 15:07:26] mask2former INFO: Inference done 98/1093. Dataloading: 0.0052 s/iter. Inference: 0.3659 s/iter. Eval: 0.1166 s/iter. Total: 0.4878 s/iter. ETA=0:08:05
[02/18 15:07:31] mask2former INFO: Inference done 109/1093. Dataloading: 0.0051 s/iter. Inference: 0.3644 s/iter. Eval: 0.1178 s/iter. Total: 0.4874 s/iter. ETA=0:07:59
[02/18 15:07:37] mask2former INFO: Inference done 119/1093. Dataloading: 0.0051 s/iter. Inference: 0.3657 s/iter. Eval: 0.1184 s/iter. Total: 0.4894 s/iter. ETA=0:07:56
[02/18 15:07:42] mask2former INFO: Inference done 130/1093. Dataloading: 0.0051 s/iter. Inference: 0.3659 s/iter. Eval: 0.1175 s/iter. Total: 0.4886 s/iter. ETA=0:07:50
[02/18 15:07:47] mask2former INFO: Inference done 140/1093. Dataloading: 0.0051 s/iter. Inference: 0.3675 s/iter. Eval: 0.1186 s/iter. Total: 0.4914 s/iter. ETA=0:07:48
[02/18 15:07:52] mask2former INFO: Inference done 151/1093. Dataloading: 0.0051 s/iter. Inference: 0.3661 s/iter. Eval: 0.1181 s/iter. Total: 0.4895 s/iter. ETA=0:07:41
[02/18 15:07:57] mask2former INFO: Inference done 162/1093. Dataloading: 0.0051 s/iter. Inference: 0.3647 s/iter. Eval: 0.1175 s/iter. Total: 0.4873 s/iter. ETA=0:07:33
[02/18 15:08:03] mask2former INFO: Inference done 173/1093. Dataloading: 0.0051 s/iter. Inference: 0.3642 s/iter. Eval: 0.1173 s/iter. Total: 0.4867 s/iter. ETA=0:07:27
[02/18 15:08:08] mask2former INFO: Inference done 184/1093. Dataloading: 0.0050 s/iter. Inference: 0.3639 s/iter. Eval: 0.1165 s/iter. Total: 0.4854 s/iter. ETA=0:07:21
[02/18 15:08:13] mask2former INFO: Inference done 195/1093. Dataloading: 0.0050 s/iter. Inference: 0.3635 s/iter. Eval: 0.1165 s/iter. Total: 0.4852 s/iter. ETA=0:07:15
[02/18 15:08:18] mask2former INFO: Inference done 206/1093. Dataloading: 0.0050 s/iter. Inference: 0.3624 s/iter. Eval: 0.1170 s/iter. Total: 0.4845 s/iter. ETA=0:07:09
[02/18 15:08:24] mask2former INFO: Inference done 217/1093. Dataloading: 0.0050 s/iter. Inference: 0.3624 s/iter. Eval: 0.1174 s/iter. Total: 0.4850 s/iter. ETA=0:07:04
[02/18 15:08:29] mask2former INFO: Inference done 228/1093. Dataloading: 0.0050 s/iter. Inference: 0.3623 s/iter. Eval: 0.1175 s/iter. Total: 0.4850 s/iter. ETA=0:06:59
[02/18 15:08:34] mask2former INFO: Inference done 239/1093. Dataloading: 0.0051 s/iter. Inference: 0.3632 s/iter. Eval: 0.1170 s/iter. Total: 0.4853 s/iter. ETA=0:06:54
[02/18 15:08:40] mask2former INFO: Inference done 250/1093. Dataloading: 0.0051 s/iter. Inference: 0.3625 s/iter. Eval: 0.1171 s/iter. Total: 0.4848 s/iter. ETA=0:06:48
[02/18 15:08:45] mask2former INFO: Inference done 261/1093. Dataloading: 0.0050 s/iter. Inference: 0.3629 s/iter. Eval: 0.1170 s/iter. Total: 0.4850 s/iter. ETA=0:06:43
[02/18 15:08:50] mask2former INFO: Inference done 272/1093. Dataloading: 0.0052 s/iter. Inference: 0.3626 s/iter. Eval: 0.1172 s/iter. Total: 0.4850 s/iter. ETA=0:06:38
[02/18 15:08:55] mask2former INFO: Inference done 283/1093. Dataloading: 0.0051 s/iter. Inference: 0.3621 s/iter. Eval: 0.1171 s/iter. Total: 0.4844 s/iter. ETA=0:06:32
[02/18 15:09:01] mask2former INFO: Inference done 294/1093. Dataloading: 0.0055 s/iter. Inference: 0.3620 s/iter. Eval: 0.1167 s/iter. Total: 0.4842 s/iter. ETA=0:06:26
[02/18 15:09:06] mask2former INFO: Inference done 305/1093. Dataloading: 0.0055 s/iter. Inference: 0.3616 s/iter. Eval: 0.1171 s/iter. Total: 0.4843 s/iter. ETA=0:06:21
[02/18 15:09:11] mask2former INFO: Inference done 316/1093. Dataloading: 0.0055 s/iter. Inference: 0.3610 s/iter. Eval: 0.1172 s/iter. Total: 0.4837 s/iter. ETA=0:06:15
[02/18 15:09:16] mask2former INFO: Inference done 326/1093. Dataloading: 0.0055 s/iter. Inference: 0.3610 s/iter. Eval: 0.1178 s/iter. Total: 0.4844 s/iter. ETA=0:06:11
[02/18 15:09:21] mask2former INFO: Inference done 337/1093. Dataloading: 0.0055 s/iter. Inference: 0.3608 s/iter. Eval: 0.1175 s/iter. Total: 0.4839 s/iter. ETA=0:06:05
[02/18 15:09:27] mask2former INFO: Inference done 348/1093. Dataloading: 0.0054 s/iter. Inference: 0.3610 s/iter. Eval: 0.1171 s/iter. Total: 0.4836 s/iter. ETA=0:06:00
[02/18 15:09:32] mask2former INFO: Inference done 358/1093. Dataloading: 0.0054 s/iter. Inference: 0.3616 s/iter. Eval: 0.1171 s/iter. Total: 0.4843 s/iter. ETA=0:05:55
[02/18 15:09:37] mask2former INFO: Inference done 369/1093. Dataloading: 0.0054 s/iter. Inference: 0.3618 s/iter. Eval: 0.1167 s/iter. Total: 0.4840 s/iter. ETA=0:05:50
[02/18 15:09:42] mask2former INFO: Inference done 380/1093. Dataloading: 0.0054 s/iter. Inference: 0.3616 s/iter. Eval: 0.1166 s/iter. Total: 0.4837 s/iter. ETA=0:05:44
[02/18 15:09:47] mask2former INFO: Inference done 391/1093. Dataloading: 0.0054 s/iter. Inference: 0.3616 s/iter. Eval: 0.1166 s/iter. Total: 0.4837 s/iter. ETA=0:05:39
[02/18 15:09:53] mask2former INFO: Inference done 402/1093. Dataloading: 0.0054 s/iter. Inference: 0.3613 s/iter. Eval: 0.1166 s/iter. Total: 0.4834 s/iter. ETA=0:05:34
[02/18 15:09:58] mask2former INFO: Inference done 413/1093. Dataloading: 0.0054 s/iter. Inference: 0.3612 s/iter. Eval: 0.1166 s/iter. Total: 0.4833 s/iter. ETA=0:05:28
[02/18 15:10:03] mask2former INFO: Inference done 424/1093. Dataloading: 0.0056 s/iter. Inference: 0.3612 s/iter. Eval: 0.1164 s/iter. Total: 0.4832 s/iter. ETA=0:05:23
[02/18 15:10:09] mask2former INFO: Inference done 435/1093. Dataloading: 0.0056 s/iter. Inference: 0.3614 s/iter. Eval: 0.1161 s/iter. Total: 0.4832 s/iter. ETA=0:05:17
[02/18 15:10:14] mask2former INFO: Inference done 446/1093. Dataloading: 0.0055 s/iter. Inference: 0.3618 s/iter. Eval: 0.1163 s/iter. Total: 0.4837 s/iter. ETA=0:05:12
[02/18 15:10:19] mask2former INFO: Inference done 457/1093. Dataloading: 0.0055 s/iter. Inference: 0.3611 s/iter. Eval: 0.1163 s/iter. Total: 0.4830 s/iter. ETA=0:05:07
[02/18 15:10:24] mask2former INFO: Inference done 468/1093. Dataloading: 0.0055 s/iter. Inference: 0.3609 s/iter. Eval: 0.1162 s/iter. Total: 0.4826 s/iter. ETA=0:05:01
[02/18 15:10:30] mask2former INFO: Inference done 479/1093. Dataloading: 0.0055 s/iter. Inference: 0.3607 s/iter. Eval: 0.1163 s/iter. Total: 0.4826 s/iter. ETA=0:04:56
[02/18 15:10:35] mask2former INFO: Inference done 490/1093. Dataloading: 0.0054 s/iter. Inference: 0.3607 s/iter. Eval: 0.1165 s/iter. Total: 0.4827 s/iter. ETA=0:04:51
[02/18 15:10:40] mask2former INFO: Inference done 501/1093. Dataloading: 0.0054 s/iter. Inference: 0.3605 s/iter. Eval: 0.1164 s/iter. Total: 0.4824 s/iter. ETA=0:04:45
[02/18 15:10:45] mask2former INFO: Inference done 512/1093. Dataloading: 0.0054 s/iter. Inference: 0.3605 s/iter. Eval: 0.1165 s/iter. Total: 0.4825 s/iter. ETA=0:04:40
[02/18 15:10:51] mask2former INFO: Inference done 523/1093. Dataloading: 0.0054 s/iter. Inference: 0.3608 s/iter. Eval: 0.1164 s/iter. Total: 0.4827 s/iter. ETA=0:04:35
[02/18 15:10:56] mask2former INFO: Inference done 534/1093. Dataloading: 0.0054 s/iter. Inference: 0.3608 s/iter. Eval: 0.1163 s/iter. Total: 0.4825 s/iter. ETA=0:04:29
[02/18 15:11:01] mask2former INFO: Inference done 545/1093. Dataloading: 0.0054 s/iter. Inference: 0.3610 s/iter. Eval: 0.1163 s/iter. Total: 0.4827 s/iter. ETA=0:04:24
[02/18 15:11:07] mask2former INFO: Inference done 556/1093. Dataloading: 0.0054 s/iter. Inference: 0.3608 s/iter. Eval: 0.1160 s/iter. Total: 0.4823 s/iter. ETA=0:04:18
[02/18 15:11:12] mask2former INFO: Inference done 567/1093. Dataloading: 0.0054 s/iter. Inference: 0.3605 s/iter. Eval: 0.1161 s/iter. Total: 0.4821 s/iter. ETA=0:04:13
[02/18 15:11:17] mask2former INFO: Inference done 578/1093. Dataloading: 0.0054 s/iter. Inference: 0.3608 s/iter. Eval: 0.1159 s/iter. Total: 0.4822 s/iter. ETA=0:04:08
[02/18 15:11:22] mask2former INFO: Inference done 589/1093. Dataloading: 0.0054 s/iter. Inference: 0.3605 s/iter. Eval: 0.1161 s/iter. Total: 0.4821 s/iter. ETA=0:04:02
[02/18 15:11:28] mask2former INFO: Inference done 600/1093. Dataloading: 0.0054 s/iter. Inference: 0.3604 s/iter. Eval: 0.1162 s/iter. Total: 0.4820 s/iter. ETA=0:03:57
[02/18 15:11:33] mask2former INFO: Inference done 611/1093. Dataloading: 0.0053 s/iter. Inference: 0.3608 s/iter. Eval: 0.1159 s/iter. Total: 0.4821 s/iter. ETA=0:03:52
[02/18 15:11:38] mask2former INFO: Inference done 622/1093. Dataloading: 0.0053 s/iter. Inference: 0.3610 s/iter. Eval: 0.1158 s/iter. Total: 0.4822 s/iter. ETA=0:03:47
[02/18 15:11:44] mask2former INFO: Inference done 633/1093. Dataloading: 0.0054 s/iter. Inference: 0.3610 s/iter. Eval: 0.1158 s/iter. Total: 0.4823 s/iter. ETA=0:03:41
[02/18 15:11:49] mask2former INFO: Inference done 644/1093. Dataloading: 0.0054 s/iter. Inference: 0.3612 s/iter. Eval: 0.1160 s/iter. Total: 0.4826 s/iter. ETA=0:03:36
[02/18 15:11:54] mask2former INFO: Inference done 655/1093. Dataloading: 0.0054 s/iter. Inference: 0.3609 s/iter. Eval: 0.1159 s/iter. Total: 0.4822 s/iter. ETA=0:03:31
[02/18 15:11:59] mask2former INFO: Inference done 666/1093. Dataloading: 0.0054 s/iter. Inference: 0.3608 s/iter. Eval: 0.1158 s/iter. Total: 0.4820 s/iter. ETA=0:03:25
[02/18 15:12:05] mask2former INFO: Inference done 677/1093. Dataloading: 0.0054 s/iter. Inference: 0.3606 s/iter. Eval: 0.1160 s/iter. Total: 0.4821 s/iter. ETA=0:03:20
[02/18 15:12:10] mask2former INFO: Inference done 688/1093. Dataloading: 0.0054 s/iter. Inference: 0.3608 s/iter. Eval: 0.1158 s/iter. Total: 0.4821 s/iter. ETA=0:03:15
[02/18 15:12:15] mask2former INFO: Inference done 699/1093. Dataloading: 0.0054 s/iter. Inference: 0.3609 s/iter. Eval: 0.1158 s/iter. Total: 0.4822 s/iter. ETA=0:03:10
[02/18 15:12:21] mask2former INFO: Inference done 710/1093. Dataloading: 0.0054 s/iter. Inference: 0.3608 s/iter. Eval: 0.1159 s/iter. Total: 0.4822 s/iter. ETA=0:03:04
[02/18 15:12:26] mask2former INFO: Inference done 721/1093. Dataloading: 0.0054 s/iter. Inference: 0.3610 s/iter. Eval: 0.1158 s/iter. Total: 0.4823 s/iter. ETA=0:02:59
[02/18 15:12:31] mask2former INFO: Inference done 731/1093. Dataloading: 0.0054 s/iter. Inference: 0.3613 s/iter. Eval: 0.1159 s/iter. Total: 0.4827 s/iter. ETA=0:02:54
[02/18 15:12:37] mask2former INFO: Inference done 743/1093. Dataloading: 0.0054 s/iter. Inference: 0.3608 s/iter. Eval: 0.1160 s/iter. Total: 0.4823 s/iter. ETA=0:02:48
[02/18 15:12:42] mask2former INFO: Inference done 754/1093. Dataloading: 0.0054 s/iter. Inference: 0.3605 s/iter. Eval: 0.1159 s/iter. Total: 0.4819 s/iter. ETA=0:02:43
[02/18 15:12:47] mask2former INFO: Inference done 765/1093. Dataloading: 0.0053 s/iter. Inference: 0.3604 s/iter. Eval: 0.1157 s/iter. Total: 0.4815 s/iter. ETA=0:02:37
[02/18 15:12:52] mask2former INFO: Inference done 776/1093. Dataloading: 0.0054 s/iter. Inference: 0.3603 s/iter. Eval: 0.1158 s/iter. Total: 0.4815 s/iter. ETA=0:02:32
[02/18 15:12:57] mask2former INFO: Inference done 787/1093. Dataloading: 0.0054 s/iter. Inference: 0.3602 s/iter. Eval: 0.1157 s/iter. Total: 0.4814 s/iter. ETA=0:02:27
[02/18 15:13:02] mask2former INFO: Inference done 798/1093. Dataloading: 0.0054 s/iter. Inference: 0.3602 s/iter. Eval: 0.1156 s/iter. Total: 0.4813 s/iter. ETA=0:02:21
[02/18 15:13:08] mask2former INFO: Inference done 809/1093. Dataloading: 0.0054 s/iter. Inference: 0.3602 s/iter. Eval: 0.1157 s/iter. Total: 0.4814 s/iter. ETA=0:02:16
[02/18 15:13:13] mask2former INFO: Inference done 819/1093. Dataloading: 0.0054 s/iter. Inference: 0.3606 s/iter. Eval: 0.1156 s/iter. Total: 0.4817 s/iter. ETA=0:02:11
[02/18 15:13:18] mask2former INFO: Inference done 830/1093. Dataloading: 0.0054 s/iter. Inference: 0.3604 s/iter. Eval: 0.1158 s/iter. Total: 0.4818 s/iter. ETA=0:02:06
[02/18 15:13:23] mask2former INFO: Inference done 841/1093. Dataloading: 0.0054 s/iter. Inference: 0.3603 s/iter. Eval: 0.1158 s/iter. Total: 0.4816 s/iter. ETA=0:02:01
[02/18 15:13:28] mask2former INFO: Inference done 852/1093. Dataloading: 0.0054 s/iter. Inference: 0.3600 s/iter. Eval: 0.1157 s/iter. Total: 0.4812 s/iter. ETA=0:01:55
[02/18 15:13:33] mask2former INFO: Inference done 863/1093. Dataloading: 0.0054 s/iter. Inference: 0.3599 s/iter. Eval: 0.1156 s/iter. Total: 0.4810 s/iter. ETA=0:01:50
[02/18 15:13:39] mask2former INFO: Inference done 874/1093. Dataloading: 0.0054 s/iter. Inference: 0.3599 s/iter. Eval: 0.1155 s/iter. Total: 0.4809 s/iter. ETA=0:01:45
[02/18 15:13:44] mask2former INFO: Inference done 885/1093. Dataloading: 0.0054 s/iter. Inference: 0.3599 s/iter. Eval: 0.1154 s/iter. Total: 0.4809 s/iter. ETA=0:01:40
[02/18 15:13:49] mask2former INFO: Inference done 896/1093. Dataloading: 0.0054 s/iter. Inference: 0.3603 s/iter. Eval: 0.1152 s/iter. Total: 0.4810 s/iter. ETA=0:01:34
[02/18 15:13:55] mask2former INFO: Inference done 907/1093. Dataloading: 0.0055 s/iter. Inference: 0.3607 s/iter. Eval: 0.1150 s/iter. Total: 0.4813 s/iter. ETA=0:01:29
[02/18 15:14:00] mask2former INFO: Inference done 918/1093. Dataloading: 0.0055 s/iter. Inference: 0.3605 s/iter. Eval: 0.1150 s/iter. Total: 0.4812 s/iter. ETA=0:01:24
[02/18 15:14:06] mask2former INFO: Inference done 929/1093. Dataloading: 0.0055 s/iter. Inference: 0.3606 s/iter. Eval: 0.1151 s/iter. Total: 0.4813 s/iter. ETA=0:01:18
[02/18 15:14:11] mask2former INFO: Inference done 939/1093. Dataloading: 0.0055 s/iter. Inference: 0.3608 s/iter. Eval: 0.1152 s/iter. Total: 0.4815 s/iter. ETA=0:01:14
[02/18 15:14:16] mask2former INFO: Inference done 950/1093. Dataloading: 0.0056 s/iter. Inference: 0.3608 s/iter. Eval: 0.1150 s/iter. Total: 0.4816 s/iter. ETA=0:01:08
[02/18 15:14:21] mask2former INFO: Inference done 961/1093. Dataloading: 0.0056 s/iter. Inference: 0.3607 s/iter. Eval: 0.1149 s/iter. Total: 0.4813 s/iter. ETA=0:01:03
[02/18 15:14:26] mask2former INFO: Inference done 973/1093. Dataloading: 0.0056 s/iter. Inference: 0.3601 s/iter. Eval: 0.1148 s/iter. Total: 0.4806 s/iter. ETA=0:00:57
[02/18 15:14:31] mask2former INFO: Inference done 988/1093. Dataloading: 0.0056 s/iter. Inference: 0.3581 s/iter. Eval: 0.1148 s/iter. Total: 0.4786 s/iter. ETA=0:00:50
[02/18 15:14:37] mask2former INFO: Inference done 1002/1093. Dataloading: 0.0056 s/iter. Inference: 0.3566 s/iter. Eval: 0.1149 s/iter. Total: 0.4772 s/iter. ETA=0:00:43
[02/18 15:14:42] mask2former INFO: Inference done 1016/1093. Dataloading: 0.0056 s/iter. Inference: 0.3549 s/iter. Eval: 0.1151 s/iter. Total: 0.4757 s/iter. ETA=0:00:36
[02/18 15:14:47] mask2former INFO: Inference done 1030/1093. Dataloading: 0.0056 s/iter. Inference: 0.3534 s/iter. Eval: 0.1150 s/iter. Total: 0.4741 s/iter. ETA=0:00:29
[02/18 15:14:52] mask2former INFO: Inference done 1045/1093. Dataloading: 0.0056 s/iter. Inference: 0.3517 s/iter. Eval: 0.1149 s/iter. Total: 0.4723 s/iter. ETA=0:00:22
[02/18 15:14:57] mask2former INFO: Inference done 1060/1093. Dataloading: 0.0056 s/iter. Inference: 0.3500 s/iter. Eval: 0.1149 s/iter. Total: 0.4705 s/iter. ETA=0:00:15
[02/18 15:15:02] mask2former INFO: Inference done 1075/1093. Dataloading: 0.0056 s/iter. Inference: 0.3482 s/iter. Eval: 0.1148 s/iter. Total: 0.4687 s/iter. ETA=0:00:08
[02/18 15:15:07] mask2former INFO: Inference done 1090/1093. Dataloading: 0.0056 s/iter. Inference: 0.3466 s/iter. Eval: 0.1146 s/iter. Total: 0.4669 s/iter. ETA=0:00:01
[02/18 17:22:57] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 17:22:58] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 17:22:58] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 17:23:13] mask2former INFO: Inference done 11/1093. Dataloading: 0.0040 s/iter. Inference: 0.3637 s/iter. Eval: 0.1252 s/iter. Total: 0.4928 s/iter. ETA=0:08:53
[02/18 17:23:18] mask2former INFO: Inference done 22/1093. Dataloading: 0.0052 s/iter. Inference: 0.3552 s/iter. Eval: 0.1312 s/iter. Total: 0.4916 s/iter. ETA=0:08:46
[02/18 17:23:23] mask2former INFO: Inference done 32/1093. Dataloading: 0.0061 s/iter. Inference: 0.3712 s/iter. Eval: 0.1236 s/iter. Total: 0.5010 s/iter. ETA=0:08:51
[02/18 17:23:29] mask2former INFO: Inference done 43/1093. Dataloading: 0.0057 s/iter. Inference: 0.3659 s/iter. Eval: 0.1223 s/iter. Total: 0.4939 s/iter. ETA=0:08:38
[02/18 17:23:34] mask2former INFO: Inference done 54/1093. Dataloading: 0.0054 s/iter. Inference: 0.3628 s/iter. Eval: 0.1216 s/iter. Total: 0.4899 s/iter. ETA=0:08:28
[02/18 17:23:39] mask2former INFO: Inference done 65/1093. Dataloading: 0.0053 s/iter. Inference: 0.3592 s/iter. Eval: 0.1225 s/iter. Total: 0.4872 s/iter. ETA=0:08:20
[02/18 17:23:44] mask2former INFO: Inference done 76/1093. Dataloading: 0.0051 s/iter. Inference: 0.3600 s/iter. Eval: 0.1194 s/iter. Total: 0.4846 s/iter. ETA=0:08:12
[02/18 17:23:49] mask2former INFO: Inference done 87/1093. Dataloading: 0.0061 s/iter. Inference: 0.3587 s/iter. Eval: 0.1177 s/iter. Total: 0.4826 s/iter. ETA=0:08:05
[02/18 17:23:55] mask2former INFO: Inference done 98/1093. Dataloading: 0.0060 s/iter. Inference: 0.3587 s/iter. Eval: 0.1177 s/iter. Total: 0.4825 s/iter. ETA=0:08:00
[02/18 17:24:00] mask2former INFO: Inference done 109/1093. Dataloading: 0.0059 s/iter. Inference: 0.3586 s/iter. Eval: 0.1190 s/iter. Total: 0.4836 s/iter. ETA=0:07:55
[02/18 17:24:05] mask2former INFO: Inference done 120/1093. Dataloading: 0.0060 s/iter. Inference: 0.3592 s/iter. Eval: 0.1188 s/iter. Total: 0.4841 s/iter. ETA=0:07:50
[02/18 17:24:11] mask2former INFO: Inference done 131/1093. Dataloading: 0.0059 s/iter. Inference: 0.3590 s/iter. Eval: 0.1182 s/iter. Total: 0.4832 s/iter. ETA=0:07:44
[02/18 17:24:16] mask2former INFO: Inference done 141/1093. Dataloading: 0.0058 s/iter. Inference: 0.3605 s/iter. Eval: 0.1195 s/iter. Total: 0.4859 s/iter. ETA=0:07:42
[02/18 17:24:21] mask2former INFO: Inference done 151/1093. Dataloading: 0.0059 s/iter. Inference: 0.3617 s/iter. Eval: 0.1217 s/iter. Total: 0.4894 s/iter. ETA=0:07:41
[02/18 17:24:27] mask2former INFO: Inference done 162/1093. Dataloading: 0.0058 s/iter. Inference: 0.3618 s/iter. Eval: 0.1213 s/iter. Total: 0.4890 s/iter. ETA=0:07:35
[02/18 17:24:32] mask2former INFO: Inference done 173/1093. Dataloading: 0.0058 s/iter. Inference: 0.3617 s/iter. Eval: 0.1217 s/iter. Total: 0.4893 s/iter. ETA=0:07:30
[02/18 17:24:37] mask2former INFO: Inference done 183/1093. Dataloading: 0.0058 s/iter. Inference: 0.3625 s/iter. Eval: 0.1219 s/iter. Total: 0.4903 s/iter. ETA=0:07:26
[02/18 17:24:42] mask2former INFO: Inference done 194/1093. Dataloading: 0.0058 s/iter. Inference: 0.3621 s/iter. Eval: 0.1212 s/iter. Total: 0.4891 s/iter. ETA=0:07:19
[02/18 17:24:47] mask2former INFO: Inference done 205/1093. Dataloading: 0.0057 s/iter. Inference: 0.3614 s/iter. Eval: 0.1211 s/iter. Total: 0.4882 s/iter. ETA=0:07:13
[02/18 17:24:53] mask2former INFO: Inference done 216/1093. Dataloading: 0.0057 s/iter. Inference: 0.3624 s/iter. Eval: 0.1203 s/iter. Total: 0.4885 s/iter. ETA=0:07:08
[02/18 17:24:58] mask2former INFO: Inference done 227/1093. Dataloading: 0.0057 s/iter. Inference: 0.3627 s/iter. Eval: 0.1207 s/iter. Total: 0.4892 s/iter. ETA=0:07:03
[02/18 17:25:04] mask2former INFO: Inference done 238/1093. Dataloading: 0.0057 s/iter. Inference: 0.3627 s/iter. Eval: 0.1209 s/iter. Total: 0.4895 s/iter. ETA=0:06:58
[02/18 17:25:09] mask2former INFO: Inference done 249/1093. Dataloading: 0.0057 s/iter. Inference: 0.3621 s/iter. Eval: 0.1207 s/iter. Total: 0.4886 s/iter. ETA=0:06:52
[02/18 17:25:14] mask2former INFO: Inference done 260/1093. Dataloading: 0.0057 s/iter. Inference: 0.3618 s/iter. Eval: 0.1208 s/iter. Total: 0.4883 s/iter. ETA=0:06:46
[02/18 17:25:20] mask2former INFO: Inference done 271/1093. Dataloading: 0.0057 s/iter. Inference: 0.3615 s/iter. Eval: 0.1209 s/iter. Total: 0.4882 s/iter. ETA=0:06:41
[02/18 17:25:25] mask2former INFO: Inference done 282/1093. Dataloading: 0.0057 s/iter. Inference: 0.3610 s/iter. Eval: 0.1206 s/iter. Total: 0.4873 s/iter. ETA=0:06:35
[02/18 17:25:30] mask2former INFO: Inference done 293/1093. Dataloading: 0.0056 s/iter. Inference: 0.3611 s/iter. Eval: 0.1201 s/iter. Total: 0.4869 s/iter. ETA=0:06:29
[02/18 17:25:35] mask2former INFO: Inference done 303/1093. Dataloading: 0.0056 s/iter. Inference: 0.3617 s/iter. Eval: 0.1209 s/iter. Total: 0.4882 s/iter. ETA=0:06:25
[02/18 17:25:40] mask2former INFO: Inference done 313/1093. Dataloading: 0.0056 s/iter. Inference: 0.3623 s/iter. Eval: 0.1208 s/iter. Total: 0.4888 s/iter. ETA=0:06:21
[02/18 17:25:45] mask2former INFO: Inference done 323/1093. Dataloading: 0.0056 s/iter. Inference: 0.3622 s/iter. Eval: 0.1218 s/iter. Total: 0.4897 s/iter. ETA=0:06:17
[02/18 17:25:50] mask2former INFO: Inference done 333/1093. Dataloading: 0.0056 s/iter. Inference: 0.3625 s/iter. Eval: 0.1218 s/iter. Total: 0.4901 s/iter. ETA=0:06:12
[02/18 17:25:56] mask2former INFO: Inference done 343/1093. Dataloading: 0.0056 s/iter. Inference: 0.3628 s/iter. Eval: 0.1219 s/iter. Total: 0.4904 s/iter. ETA=0:06:07
[02/18 17:26:01] mask2former INFO: Inference done 354/1093. Dataloading: 0.0055 s/iter. Inference: 0.3628 s/iter. Eval: 0.1216 s/iter. Total: 0.4900 s/iter. ETA=0:06:02
[02/18 17:26:06] mask2former INFO: Inference done 365/1093. Dataloading: 0.0055 s/iter. Inference: 0.3624 s/iter. Eval: 0.1210 s/iter. Total: 0.4891 s/iter. ETA=0:05:56
[02/18 17:26:11] mask2former INFO: Inference done 376/1093. Dataloading: 0.0055 s/iter. Inference: 0.3622 s/iter. Eval: 0.1211 s/iter. Total: 0.4889 s/iter. ETA=0:05:50
[02/18 17:26:16] mask2former INFO: Inference done 387/1093. Dataloading: 0.0055 s/iter. Inference: 0.3620 s/iter. Eval: 0.1208 s/iter. Total: 0.4884 s/iter. ETA=0:05:44
[02/18 17:26:22] mask2former INFO: Inference done 398/1093. Dataloading: 0.0054 s/iter. Inference: 0.3618 s/iter. Eval: 0.1208 s/iter. Total: 0.4881 s/iter. ETA=0:05:39
[02/18 17:26:27] mask2former INFO: Inference done 409/1093. Dataloading: 0.0055 s/iter. Inference: 0.3615 s/iter. Eval: 0.1209 s/iter. Total: 0.4879 s/iter. ETA=0:05:33
[02/18 17:26:32] mask2former INFO: Inference done 419/1093. Dataloading: 0.0055 s/iter. Inference: 0.3620 s/iter. Eval: 0.1206 s/iter. Total: 0.4882 s/iter. ETA=0:05:29
[02/18 17:26:37] mask2former INFO: Inference done 429/1093. Dataloading: 0.0055 s/iter. Inference: 0.3625 s/iter. Eval: 0.1209 s/iter. Total: 0.4889 s/iter. ETA=0:05:24
[02/18 17:26:42] mask2former INFO: Inference done 440/1093. Dataloading: 0.0055 s/iter. Inference: 0.3626 s/iter. Eval: 0.1207 s/iter. Total: 0.4889 s/iter. ETA=0:05:19
[02/18 17:26:48] mask2former INFO: Inference done 451/1093. Dataloading: 0.0054 s/iter. Inference: 0.3621 s/iter. Eval: 0.1208 s/iter. Total: 0.4885 s/iter. ETA=0:05:13
[02/18 17:26:53] mask2former INFO: Inference done 462/1093. Dataloading: 0.0054 s/iter. Inference: 0.3618 s/iter. Eval: 0.1212 s/iter. Total: 0.4885 s/iter. ETA=0:05:08
[02/18 17:26:58] mask2former INFO: Inference done 472/1093. Dataloading: 0.0054 s/iter. Inference: 0.3623 s/iter. Eval: 0.1210 s/iter. Total: 0.4888 s/iter. ETA=0:05:03
[02/18 17:27:03] mask2former INFO: Inference done 483/1093. Dataloading: 0.0054 s/iter. Inference: 0.3621 s/iter. Eval: 0.1209 s/iter. Total: 0.4885 s/iter. ETA=0:04:57
[02/18 17:27:09] mask2former INFO: Inference done 494/1093. Dataloading: 0.0054 s/iter. Inference: 0.3617 s/iter. Eval: 0.1212 s/iter. Total: 0.4884 s/iter. ETA=0:04:52
[02/18 17:27:14] mask2former INFO: Inference done 505/1093. Dataloading: 0.0054 s/iter. Inference: 0.3614 s/iter. Eval: 0.1212 s/iter. Total: 0.4880 s/iter. ETA=0:04:46
[02/18 17:27:19] mask2former INFO: Inference done 516/1093. Dataloading: 0.0054 s/iter. Inference: 0.3615 s/iter. Eval: 0.1209 s/iter. Total: 0.4879 s/iter. ETA=0:04:41
[02/18 17:27:24] mask2former INFO: Inference done 527/1093. Dataloading: 0.0054 s/iter. Inference: 0.3617 s/iter. Eval: 0.1207 s/iter. Total: 0.4878 s/iter. ETA=0:04:36
[02/18 17:27:29] mask2former INFO: Inference done 537/1093. Dataloading: 0.0054 s/iter. Inference: 0.3618 s/iter. Eval: 0.1208 s/iter. Total: 0.4880 s/iter. ETA=0:04:31
[02/18 17:27:35] mask2former INFO: Inference done 548/1093. Dataloading: 0.0054 s/iter. Inference: 0.3616 s/iter. Eval: 0.1208 s/iter. Total: 0.4879 s/iter. ETA=0:04:25
[02/18 17:27:40] mask2former INFO: Inference done 559/1093. Dataloading: 0.0054 s/iter. Inference: 0.3616 s/iter. Eval: 0.1207 s/iter. Total: 0.4877 s/iter. ETA=0:04:20
[02/18 17:27:45] mask2former INFO: Inference done 569/1093. Dataloading: 0.0054 s/iter. Inference: 0.3616 s/iter. Eval: 0.1211 s/iter. Total: 0.4882 s/iter. ETA=0:04:15
[02/18 17:27:51] mask2former INFO: Inference done 580/1093. Dataloading: 0.0054 s/iter. Inference: 0.3618 s/iter. Eval: 0.1211 s/iter. Total: 0.4884 s/iter. ETA=0:04:10
[02/18 17:27:56] mask2former INFO: Inference done 591/1093. Dataloading: 0.0054 s/iter. Inference: 0.3615 s/iter. Eval: 0.1209 s/iter. Total: 0.4879 s/iter. ETA=0:04:04
[02/18 17:28:01] mask2former INFO: Inference done 602/1093. Dataloading: 0.0054 s/iter. Inference: 0.3613 s/iter. Eval: 0.1207 s/iter. Total: 0.4875 s/iter. ETA=0:03:59
[02/18 17:28:06] mask2former INFO: Inference done 613/1093. Dataloading: 0.0054 s/iter. Inference: 0.3611 s/iter. Eval: 0.1205 s/iter. Total: 0.4871 s/iter. ETA=0:03:53
[02/18 17:28:11] mask2former INFO: Inference done 624/1093. Dataloading: 0.0054 s/iter. Inference: 0.3615 s/iter. Eval: 0.1201 s/iter. Total: 0.4871 s/iter. ETA=0:03:48
[02/18 17:28:17] mask2former INFO: Inference done 635/1093. Dataloading: 0.0054 s/iter. Inference: 0.3616 s/iter. Eval: 0.1201 s/iter. Total: 0.4872 s/iter. ETA=0:03:43
[02/18 17:28:22] mask2former INFO: Inference done 646/1093. Dataloading: 0.0054 s/iter. Inference: 0.3614 s/iter. Eval: 0.1201 s/iter. Total: 0.4870 s/iter. ETA=0:03:37
[02/18 17:28:27] mask2former INFO: Inference done 656/1093. Dataloading: 0.0054 s/iter. Inference: 0.3615 s/iter. Eval: 0.1203 s/iter. Total: 0.4873 s/iter. ETA=0:03:32
[02/18 17:28:32] mask2former INFO: Inference done 667/1093. Dataloading: 0.0054 s/iter. Inference: 0.3615 s/iter. Eval: 0.1202 s/iter. Total: 0.4872 s/iter. ETA=0:03:27
[02/18 17:28:38] mask2former INFO: Inference done 678/1093. Dataloading: 0.0054 s/iter. Inference: 0.3616 s/iter. Eval: 0.1202 s/iter. Total: 0.4873 s/iter. ETA=0:03:22
[02/18 17:28:43] mask2former INFO: Inference done 689/1093. Dataloading: 0.0054 s/iter. Inference: 0.3614 s/iter. Eval: 0.1201 s/iter. Total: 0.4870 s/iter. ETA=0:03:16
[02/18 17:28:48] mask2former INFO: Inference done 700/1093. Dataloading: 0.0054 s/iter. Inference: 0.3613 s/iter. Eval: 0.1200 s/iter. Total: 0.4868 s/iter. ETA=0:03:11
[02/18 17:28:53] mask2former INFO: Inference done 711/1093. Dataloading: 0.0054 s/iter. Inference: 0.3612 s/iter. Eval: 0.1201 s/iter. Total: 0.4868 s/iter. ETA=0:03:05
[02/18 17:28:59] mask2former INFO: Inference done 722/1093. Dataloading: 0.0054 s/iter. Inference: 0.3613 s/iter. Eval: 0.1199 s/iter. Total: 0.4867 s/iter. ETA=0:03:00
[02/18 17:29:04] mask2former INFO: Inference done 732/1093. Dataloading: 0.0054 s/iter. Inference: 0.3618 s/iter. Eval: 0.1197 s/iter. Total: 0.4870 s/iter. ETA=0:02:55
[02/18 17:29:09] mask2former INFO: Inference done 742/1093. Dataloading: 0.0054 s/iter. Inference: 0.3621 s/iter. Eval: 0.1198 s/iter. Total: 0.4874 s/iter. ETA=0:02:51
[02/18 17:29:14] mask2former INFO: Inference done 753/1093. Dataloading: 0.0054 s/iter. Inference: 0.3620 s/iter. Eval: 0.1197 s/iter. Total: 0.4871 s/iter. ETA=0:02:45
[02/18 17:29:19] mask2former INFO: Inference done 763/1093. Dataloading: 0.0054 s/iter. Inference: 0.3623 s/iter. Eval: 0.1200 s/iter. Total: 0.4877 s/iter. ETA=0:02:40
[02/18 17:29:25] mask2former INFO: Inference done 774/1093. Dataloading: 0.0054 s/iter. Inference: 0.3621 s/iter. Eval: 0.1198 s/iter. Total: 0.4874 s/iter. ETA=0:02:35
[02/18 17:29:30] mask2former INFO: Inference done 785/1093. Dataloading: 0.0054 s/iter. Inference: 0.3619 s/iter. Eval: 0.1199 s/iter. Total: 0.4872 s/iter. ETA=0:02:30
[02/18 17:29:35] mask2former INFO: Inference done 795/1093. Dataloading: 0.0054 s/iter. Inference: 0.3621 s/iter. Eval: 0.1200 s/iter. Total: 0.4876 s/iter. ETA=0:02:25
[02/18 17:29:40] mask2former INFO: Inference done 806/1093. Dataloading: 0.0054 s/iter. Inference: 0.3621 s/iter. Eval: 0.1199 s/iter. Total: 0.4875 s/iter. ETA=0:02:19
[02/18 17:29:46] mask2former INFO: Inference done 813/1093. Dataloading: 0.0055 s/iter. Inference: 0.3630 s/iter. Eval: 0.1213 s/iter. Total: 0.4899 s/iter. ETA=0:02:17
[02/18 17:29:51] mask2former INFO: Inference done 818/1093. Dataloading: 0.0055 s/iter. Inference: 0.3645 s/iter. Eval: 0.1232 s/iter. Total: 0.4933 s/iter. ETA=0:02:15
[02/18 17:29:56] mask2former INFO: Inference done 824/1093. Dataloading: 0.0056 s/iter. Inference: 0.3657 s/iter. Eval: 0.1245 s/iter. Total: 0.4960 s/iter. ETA=0:02:13
[02/18 17:30:01] mask2former INFO: Inference done 835/1093. Dataloading: 0.0056 s/iter. Inference: 0.3657 s/iter. Eval: 0.1243 s/iter. Total: 0.4958 s/iter. ETA=0:02:07
[02/18 17:30:07] mask2former INFO: Inference done 843/1093. Dataloading: 0.0057 s/iter. Inference: 0.3660 s/iter. Eval: 0.1257 s/iter. Total: 0.4975 s/iter. ETA=0:02:04
[02/18 17:30:12] mask2former INFO: Inference done 853/1093. Dataloading: 0.0057 s/iter. Inference: 0.3660 s/iter. Eval: 0.1259 s/iter. Total: 0.4978 s/iter. ETA=0:01:59
[02/18 17:30:17] mask2former INFO: Inference done 863/1093. Dataloading: 0.0057 s/iter. Inference: 0.3662 s/iter. Eval: 0.1257 s/iter. Total: 0.4978 s/iter. ETA=0:01:54
[02/18 17:30:22] mask2former INFO: Inference done 874/1093. Dataloading: 0.0057 s/iter. Inference: 0.3663 s/iter. Eval: 0.1256 s/iter. Total: 0.4978 s/iter. ETA=0:01:49
[02/18 17:30:28] mask2former INFO: Inference done 885/1093. Dataloading: 0.0057 s/iter. Inference: 0.3662 s/iter. Eval: 0.1254 s/iter. Total: 0.4975 s/iter. ETA=0:01:43
[02/18 17:30:33] mask2former INFO: Inference done 896/1093. Dataloading: 0.0057 s/iter. Inference: 0.3660 s/iter. Eval: 0.1253 s/iter. Total: 0.4972 s/iter. ETA=0:01:37
[02/18 17:30:38] mask2former INFO: Inference done 906/1093. Dataloading: 0.0057 s/iter. Inference: 0.3660 s/iter. Eval: 0.1254 s/iter. Total: 0.4973 s/iter. ETA=0:01:32
[02/18 17:30:43] mask2former INFO: Inference done 917/1093. Dataloading: 0.0057 s/iter. Inference: 0.3660 s/iter. Eval: 0.1252 s/iter. Total: 0.4971 s/iter. ETA=0:01:27
[02/18 17:30:49] mask2former INFO: Inference done 928/1093. Dataloading: 0.0057 s/iter. Inference: 0.3661 s/iter. Eval: 0.1251 s/iter. Total: 0.4970 s/iter. ETA=0:01:22
[02/18 17:30:54] mask2former INFO: Inference done 939/1093. Dataloading: 0.0057 s/iter. Inference: 0.3662 s/iter. Eval: 0.1249 s/iter. Total: 0.4969 s/iter. ETA=0:01:16
[02/18 17:30:59] mask2former INFO: Inference done 949/1093. Dataloading: 0.0057 s/iter. Inference: 0.3663 s/iter. Eval: 0.1249 s/iter. Total: 0.4970 s/iter. ETA=0:01:11
[02/18 17:31:04] mask2former INFO: Inference done 960/1093. Dataloading: 0.0057 s/iter. Inference: 0.3663 s/iter. Eval: 0.1248 s/iter. Total: 0.4970 s/iter. ETA=0:01:06
[02/18 17:31:10] mask2former INFO: Inference done 971/1093. Dataloading: 0.0057 s/iter. Inference: 0.3660 s/iter. Eval: 0.1249 s/iter. Total: 0.4968 s/iter. ETA=0:01:00
[02/18 17:31:15] mask2former INFO: Inference done 982/1093. Dataloading: 0.0057 s/iter. Inference: 0.3660 s/iter. Eval: 0.1248 s/iter. Total: 0.4967 s/iter. ETA=0:00:55
[02/18 17:31:20] mask2former INFO: Inference done 993/1093. Dataloading: 0.0057 s/iter. Inference: 0.3659 s/iter. Eval: 0.1248 s/iter. Total: 0.4965 s/iter. ETA=0:00:49
[02/18 17:31:26] mask2former INFO: Inference done 1003/1093. Dataloading: 0.0057 s/iter. Inference: 0.3660 s/iter. Eval: 0.1251 s/iter. Total: 0.4969 s/iter. ETA=0:00:44
[02/18 17:31:31] mask2former INFO: Inference done 1014/1093. Dataloading: 0.0057 s/iter. Inference: 0.3661 s/iter. Eval: 0.1249 s/iter. Total: 0.4968 s/iter. ETA=0:00:39
[02/18 17:31:36] mask2former INFO: Inference done 1025/1093. Dataloading: 0.0057 s/iter. Inference: 0.3660 s/iter. Eval: 0.1249 s/iter. Total: 0.4967 s/iter. ETA=0:00:33
[02/18 17:31:42] mask2former INFO: Inference done 1036/1093. Dataloading: 0.0057 s/iter. Inference: 0.3659 s/iter. Eval: 0.1248 s/iter. Total: 0.4965 s/iter. ETA=0:00:28
[02/18 17:31:47] mask2former INFO: Inference done 1047/1093. Dataloading: 0.0057 s/iter. Inference: 0.3660 s/iter. Eval: 0.1247 s/iter. Total: 0.4964 s/iter. ETA=0:00:22
[02/18 17:31:52] mask2former INFO: Inference done 1058/1093. Dataloading: 0.0057 s/iter. Inference: 0.3658 s/iter. Eval: 0.1245 s/iter. Total: 0.4961 s/iter. ETA=0:00:17
[02/18 17:31:58] mask2former INFO: Inference done 1069/1093. Dataloading: 0.0057 s/iter. Inference: 0.3660 s/iter. Eval: 0.1243 s/iter. Total: 0.4961 s/iter. ETA=0:00:11
[02/18 17:32:03] mask2former INFO: Inference done 1080/1093. Dataloading: 0.0057 s/iter. Inference: 0.3660 s/iter. Eval: 0.1243 s/iter. Total: 0.4961 s/iter. ETA=0:00:06
[02/18 17:32:08] mask2former INFO: Inference done 1091/1093. Dataloading: 0.0057 s/iter. Inference: 0.3660 s/iter. Eval: 0.1242 s/iter. Total: 0.4959 s/iter. ETA=0:00:00
[02/18 17:32:51] detectron2.engine.hooks INFO: Overall training speed: 30000 iterations in 16:44:45 (2.0095 s / it)
[02/18 17:32:51] detectron2.engine.hooks INFO: Total training time: 18:27:05 (1:42:20 on hooks)
