[02/17 22:40:03] detectron2 INFO: Rank of current process: 2. World size: 4
[02/17 22:40:08] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/home/nstarli/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.5
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             Tesla V100-SXM2-32GB (arch=7.0)
Driver version          495.29.05
CUDA_HOME               /usr/local/cuda-11
Pillow                  8.4.0
torchvision             0.10.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.4
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[02/17 22:40:08] detectron2 INFO: Command line arguments: Namespace(config_file='configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml', dist_url='tcp://127.0.0.1:65510', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[02/17 22:40:08] detectron2 INFO: Contents of args.config_file=configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmaskformer2stereo_R50_bs16_90k.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m  [39m[38;5;186m"[39m[38;5;186mcheckpoints/R-101.pkl[39m[38;5;186m"[39m[38;5;15m [39m[38;5;242m#"/home/nstarli/Mask2Former/work_dirs/r101_48classes_fixedmatching/model_final.pth"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m101[39m
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbasic[39m[38;5;186m"[39m[38;5;15m  [39m[38;5;242m# not used[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mSyncBN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m][39m[38;5;15m  [39m[38;5;242m# not used[39m

[02/17 22:40:08] detectron2.utils.env INFO: Using a generated random seed 8974324
[02/17 22:40:13] detectron2.engine.defaults INFO: Model:
MaskFormerStereo(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(4096, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(48, 256)
      (query_embed): Embedding(48, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=49, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterionStereo
      matcher: Matcher FixedMatcher
      losses: ['labels', 'masks', 'segs']
      weight_dict: {'loss_mask': 5.0, 'loss_ce': 0.0, 'loss_dice': 5.0, 'loss_seg': 0.1, 'loss_mask_0': 5.0, 'loss_ce_0': 0.0, 'loss_dice_0': 5.0, 'loss_mask_1': 5.0, 'loss_ce_1': 0.0, 'loss_dice_1': 5.0, 'loss_mask_2': 5.0, 'loss_ce_2': 0.0, 'loss_dice_2': 5.0, 'loss_mask_3': 5.0, 'loss_ce_3': 0.0, 'loss_dice_3': 5.0, 'loss_mask_4': 5.0, 'loss_ce_4': 0.0, 'loss_dice_4': 5.0, 'loss_mask_5': 5.0, 'loss_ce_5': 0.0, 'loss_dice_5': 5.0, 'loss_mask_6': 5.0, 'loss_ce_6': 0.0, 'loss_dice_6': 5.0, 'loss_mask_7': 5.0, 'loss_ce_7': 0.0, 'loss_dice_7': 5.0, 'loss_mask_8': 5.0, 'loss_ce_8': 0.0, 'loss_dice_8': 5.0}
      num_classes: 48
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (upsampler): UpsampleMasks(
    (conv2d): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[02/17 22:40:13] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in training: [RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[256, 512], single_category_max_area=1.0, ignored_category=0)]
[02/17 22:40:18] detectron2.data.build INFO: Using training sampler TrainingSampler
[02/17 22:40:19] detectron2.data.common INFO: Serializing 35454 elements to byte tensors and concatenating them all ...
[02/17 22:40:19] detectron2.data.common INFO: Serialized dataset takes 10.76 MiB
[02/17 22:40:19] fvcore.common.checkpoint INFO: [Checkpointer] Loading from checkpoints/R-101.pkl ...
[02/17 22:40:19] detectron2.checkpoint.c2_model_loading INFO: Renaming Caffe2 weights ......
[02/17 22:40:19] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint       | Shapes                                          |
|:------------------|:--------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}   | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}   | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}   | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.10.conv1.*   | res4_10_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.10.conv2.*   | res4_10_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.10.conv3.*   | res4_10_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.11.conv1.*   | res4_11_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.11.conv2.*   | res4_11_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.11.conv3.*   | res4_11_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.12.conv1.*   | res4_12_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.12.conv2.*   | res4_12_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.12.conv3.*   | res4_12_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.13.conv1.*   | res4_13_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.13.conv2.*   | res4_13_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.13.conv3.*   | res4_13_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.14.conv1.*   | res4_14_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.14.conv2.*   | res4_14_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.14.conv3.*   | res4_14_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.15.conv1.*   | res4_15_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.15.conv2.*   | res4_15_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.15.conv3.*   | res4_15_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.16.conv1.*   | res4_16_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.16.conv2.*   | res4_16_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.16.conv3.*   | res4_16_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.17.conv1.*   | res4_17_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.17.conv2.*   | res4_17_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.17.conv3.*   | res4_17_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.18.conv1.*   | res4_18_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.18.conv2.*   | res4_18_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.18.conv3.*   | res4_18_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.19.conv1.*   | res4_19_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.19.conv2.*   | res4_19_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.19.conv3.*   | res4_19_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.20.conv1.*   | res4_20_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.20.conv2.*   | res4_20_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.20.conv3.*   | res4_20_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.21.conv1.*   | res4_21_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.21.conv2.*   | res4_21_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.21.conv3.*   | res4_21_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.22.conv1.*   | res4_22_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.22.conv2.*   | res4_22_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.22.conv3.*   | res4_22_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.6.conv1.*    | res4_6_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.6.conv2.*    | res4_6_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.6.conv3.*    | res4_6_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.7.conv1.*    | res4_7_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.7.conv2.*    | res4_7_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.7.conv3.*    | res4_7_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.8.conv1.*    | res4_8_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.8.conv2.*    | res4_8_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.8.conv3.*    | res4_8_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.9.conv1.*    | res4_9_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.9.conv2.*    | res4_9_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.9.conv3.*    | res4_9_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}   | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*            | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                   | (64, 3, 7, 7)                                   |
[02/17 22:40:20] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mupsampler.conv2d.{bias, weight}[0m
[02/17 22:40:20] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc1000.{bias, weight}[0m
[02/17 22:40:20] detectron2.engine.train_loop INFO: Starting training from iteration 0
[02/17 22:46:51] detectron2.engine.hooks INFO: Overall training speed: 240 iterations in 0:06:15 (1.5633 s / it)
[02/17 22:46:51] detectron2.engine.hooks INFO: Total training time: 0:06:15 (0:00:00 on hooks)
[02/17 22:47:28] detectron2 INFO: Rank of current process: 2. World size: 4
[02/17 22:47:33] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/home/nstarli/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.5
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             Tesla V100-SXM2-32GB (arch=7.0)
Driver version          495.29.05
CUDA_HOME               /usr/local/cuda-11
Pillow                  8.4.0
torchvision             0.10.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.4
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[02/17 22:47:33] detectron2 INFO: Command line arguments: Namespace(config_file='configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml', dist_url='tcp://127.0.0.1:65510', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[02/17 22:47:33] detectron2 INFO: Contents of args.config_file=configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmaskformer2stereo_R50_bs16_90k.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m  [39m[38;5;186m"[39m[38;5;186mcheckpoints/R-101.pkl[39m[38;5;186m"[39m[38;5;15m [39m[38;5;242m#"/home/nstarli/Mask2Former/work_dirs/r101_48classes_fixedmatching/model_final.pth"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m101[39m
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbasic[39m[38;5;186m"[39m[38;5;15m  [39m[38;5;242m# not used[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mSyncBN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m][39m[38;5;15m  [39m[38;5;242m# not used[39m

[02/17 22:47:33] detectron2.utils.env INFO: Using a generated random seed 34023940
[02/17 22:47:38] detectron2.engine.defaults INFO: Model:
MaskFormerStereo(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(4096, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(48, 256)
      (query_embed): Embedding(48, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=49, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterionStereo
      matcher: Matcher FixedMatcher
      losses: ['labels', 'masks', 'segs']
      weight_dict: {'loss_mask': 5.0, 'loss_ce': 0.0, 'loss_dice': 5.0, 'loss_seg': 0.1, 'loss_mask_0': 5.0, 'loss_ce_0': 0.0, 'loss_dice_0': 5.0, 'loss_mask_1': 5.0, 'loss_ce_1': 0.0, 'loss_dice_1': 5.0, 'loss_mask_2': 5.0, 'loss_ce_2': 0.0, 'loss_dice_2': 5.0, 'loss_mask_3': 5.0, 'loss_ce_3': 0.0, 'loss_dice_3': 5.0, 'loss_mask_4': 5.0, 'loss_ce_4': 0.0, 'loss_dice_4': 5.0, 'loss_mask_5': 5.0, 'loss_ce_5': 0.0, 'loss_dice_5': 5.0, 'loss_mask_6': 5.0, 'loss_ce_6': 0.0, 'loss_dice_6': 5.0, 'loss_mask_7': 5.0, 'loss_ce_7': 0.0, 'loss_dice_7': 5.0, 'loss_mask_8': 5.0, 'loss_ce_8': 0.0, 'loss_dice_8': 5.0}
      num_classes: 48
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (upsampler): UpsampleMasks(
    (conv2d): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[02/17 22:47:38] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in training: [RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[256, 512], single_category_max_area=1.0, ignored_category=0)]
[02/17 22:47:43] detectron2.data.build INFO: Using training sampler TrainingSampler
[02/17 22:47:44] detectron2.data.common INFO: Serializing 35454 elements to byte tensors and concatenating them all ...
[02/17 22:47:44] detectron2.data.common INFO: Serialized dataset takes 10.76 MiB
[02/17 22:47:44] fvcore.common.checkpoint INFO: [Checkpointer] Loading from checkpoints/R-101.pkl ...
[02/17 22:47:44] detectron2.checkpoint.c2_model_loading INFO: Renaming Caffe2 weights ......
[02/17 22:47:44] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint       | Shapes                                          |
|:------------------|:--------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}   | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}   | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}   | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.10.conv1.*   | res4_10_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.10.conv2.*   | res4_10_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.10.conv3.*   | res4_10_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.11.conv1.*   | res4_11_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.11.conv2.*   | res4_11_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.11.conv3.*   | res4_11_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.12.conv1.*   | res4_12_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.12.conv2.*   | res4_12_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.12.conv3.*   | res4_12_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.13.conv1.*   | res4_13_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.13.conv2.*   | res4_13_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.13.conv3.*   | res4_13_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.14.conv1.*   | res4_14_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.14.conv2.*   | res4_14_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.14.conv3.*   | res4_14_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.15.conv1.*   | res4_15_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.15.conv2.*   | res4_15_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.15.conv3.*   | res4_15_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.16.conv1.*   | res4_16_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.16.conv2.*   | res4_16_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.16.conv3.*   | res4_16_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.17.conv1.*   | res4_17_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.17.conv2.*   | res4_17_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.17.conv3.*   | res4_17_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.18.conv1.*   | res4_18_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.18.conv2.*   | res4_18_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.18.conv3.*   | res4_18_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.19.conv1.*   | res4_19_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.19.conv2.*   | res4_19_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.19.conv3.*   | res4_19_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.20.conv1.*   | res4_20_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.20.conv2.*   | res4_20_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.20.conv3.*   | res4_20_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.21.conv1.*   | res4_21_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.21.conv2.*   | res4_21_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.21.conv3.*   | res4_21_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.22.conv1.*   | res4_22_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.22.conv2.*   | res4_22_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.22.conv3.*   | res4_22_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.6.conv1.*    | res4_6_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.6.conv2.*    | res4_6_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.6.conv3.*    | res4_6_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.7.conv1.*    | res4_7_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.7.conv2.*    | res4_7_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.7.conv3.*    | res4_7_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.8.conv1.*    | res4_8_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.8.conv2.*    | res4_8_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.8.conv3.*    | res4_8_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.9.conv1.*    | res4_9_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.9.conv2.*    | res4_9_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.9.conv3.*    | res4_9_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}   | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*            | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                   | (64, 3, 7, 7)                                   |
[02/17 22:47:45] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mupsampler.conv2d.{bias, weight}[0m
[02/17 22:47:45] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc1000.{bias, weight}[0m
[02/17 22:47:45] detectron2.engine.train_loop INFO: Starting training from iteration 0
[02/17 22:48:34] detectron2.engine.hooks INFO: Overall training speed: 15 iterations in 0:00:31 (2.1030 s / it)
[02/17 22:48:34] detectron2.engine.hooks INFO: Total training time: 0:00:31 (0:00:00 on hooks)
[02/17 22:48:54] detectron2 INFO: Rank of current process: 2. World size: 4
[02/17 22:48:58] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/home/nstarli/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.5
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             Tesla V100-SXM2-32GB (arch=7.0)
Driver version          495.29.05
CUDA_HOME               /usr/local/cuda-11
Pillow                  8.4.0
torchvision             0.10.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.4
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[02/17 22:48:58] detectron2 INFO: Command line arguments: Namespace(config_file='configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml', dist_url='tcp://127.0.0.1:65510', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[02/17 22:48:58] detectron2 INFO: Contents of args.config_file=configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmaskformer2stereo_R50_bs16_90k.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m  [39m[38;5;186m"[39m[38;5;186mcheckpoints/R-101.pkl[39m[38;5;186m"[39m[38;5;15m [39m[38;5;242m#"/home/nstarli/Mask2Former/work_dirs/r101_48classes_fixedmatching/model_final.pth"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m101[39m
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbasic[39m[38;5;186m"[39m[38;5;15m  [39m[38;5;242m# not used[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mSyncBN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m][39m[38;5;15m  [39m[38;5;242m# not used[39m

[02/17 22:48:58] detectron2.utils.env INFO: Using a generated random seed 58532412
[02/17 22:49:01] detectron2.engine.defaults INFO: Model:
MaskFormerStereo(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(4096, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(48, 256)
      (query_embed): Embedding(48, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=49, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterionStereo
      matcher: Matcher FixedMatcher
      losses: ['labels', 'masks', 'segs']
      weight_dict: {'loss_mask': 5.0, 'loss_ce': 0.0, 'loss_dice': 5.0, 'loss_seg': 0.1, 'loss_mask_0': 5.0, 'loss_ce_0': 0.0, 'loss_dice_0': 5.0, 'loss_mask_1': 5.0, 'loss_ce_1': 0.0, 'loss_dice_1': 5.0, 'loss_mask_2': 5.0, 'loss_ce_2': 0.0, 'loss_dice_2': 5.0, 'loss_mask_3': 5.0, 'loss_ce_3': 0.0, 'loss_dice_3': 5.0, 'loss_mask_4': 5.0, 'loss_ce_4': 0.0, 'loss_dice_4': 5.0, 'loss_mask_5': 5.0, 'loss_ce_5': 0.0, 'loss_dice_5': 5.0, 'loss_mask_6': 5.0, 'loss_ce_6': 0.0, 'loss_dice_6': 5.0, 'loss_mask_7': 5.0, 'loss_ce_7': 0.0, 'loss_dice_7': 5.0, 'loss_mask_8': 5.0, 'loss_ce_8': 0.0, 'loss_dice_8': 5.0}
      num_classes: 48
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (upsampler): UpsampleMasks(
    (conv2d): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[02/17 22:49:01] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in training: [RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[256, 512], single_category_max_area=1.0, ignored_category=0)]
[02/17 22:49:06] detectron2.data.build INFO: Using training sampler TrainingSampler
[02/17 22:49:09] detectron2.data.common INFO: Serializing 35454 elements to byte tensors and concatenating them all ...
[02/17 22:49:09] detectron2.data.common INFO: Serialized dataset takes 10.76 MiB
[02/17 22:49:09] fvcore.common.checkpoint INFO: [Checkpointer] Loading from checkpoints/R-101.pkl ...
[02/17 22:49:09] detectron2.checkpoint.c2_model_loading INFO: Renaming Caffe2 weights ......
[02/17 22:49:10] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint       | Shapes                                          |
|:------------------|:--------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}   | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}   | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}   | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.10.conv1.*   | res4_10_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.10.conv2.*   | res4_10_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.10.conv3.*   | res4_10_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.11.conv1.*   | res4_11_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.11.conv2.*   | res4_11_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.11.conv3.*   | res4_11_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.12.conv1.*   | res4_12_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.12.conv2.*   | res4_12_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.12.conv3.*   | res4_12_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.13.conv1.*   | res4_13_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.13.conv2.*   | res4_13_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.13.conv3.*   | res4_13_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.14.conv1.*   | res4_14_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.14.conv2.*   | res4_14_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.14.conv3.*   | res4_14_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.15.conv1.*   | res4_15_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.15.conv2.*   | res4_15_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.15.conv3.*   | res4_15_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.16.conv1.*   | res4_16_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.16.conv2.*   | res4_16_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.16.conv3.*   | res4_16_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.17.conv1.*   | res4_17_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.17.conv2.*   | res4_17_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.17.conv3.*   | res4_17_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.18.conv1.*   | res4_18_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.18.conv2.*   | res4_18_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.18.conv3.*   | res4_18_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.19.conv1.*   | res4_19_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.19.conv2.*   | res4_19_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.19.conv3.*   | res4_19_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.20.conv1.*   | res4_20_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.20.conv2.*   | res4_20_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.20.conv3.*   | res4_20_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.21.conv1.*   | res4_21_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.21.conv2.*   | res4_21_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.21.conv3.*   | res4_21_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.22.conv1.*   | res4_22_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.22.conv2.*   | res4_22_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.22.conv3.*   | res4_22_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.6.conv1.*    | res4_6_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.6.conv2.*    | res4_6_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.6.conv3.*    | res4_6_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.7.conv1.*    | res4_7_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.7.conv2.*    | res4_7_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.7.conv3.*    | res4_7_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.8.conv1.*    | res4_8_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.8.conv2.*    | res4_8_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.8.conv3.*    | res4_8_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.9.conv1.*    | res4_9_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.9.conv2.*    | res4_9_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.9.conv3.*    | res4_9_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}   | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*            | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                   | (64, 3, 7, 7)                                   |
[02/17 22:49:11] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mupsampler.conv2d.{bias, weight}[0m
[02/17 22:49:11] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc1000.{bias, weight}[0m
[02/17 22:49:11] detectron2.engine.train_loop INFO: Starting training from iteration 0
[02/17 22:53:51] detectron2.engine.hooks INFO: Overall training speed: 146 iterations in 0:04:23 (1.8042 s / it)
[02/17 22:53:51] detectron2.engine.hooks INFO: Total training time: 0:04:23 (0:00:00 on hooks)
[02/17 22:54:21] detectron2 INFO: Rank of current process: 2. World size: 4
[02/17 22:54:26] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/home/nstarli/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.5
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             Tesla V100-SXM2-32GB (arch=7.0)
Driver version          495.29.05
CUDA_HOME               /usr/local/cuda-11
Pillow                  8.4.0
torchvision             0.10.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.4
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[02/17 22:54:26] detectron2 INFO: Command line arguments: Namespace(config_file='configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml', dist_url='tcp://127.0.0.1:65510', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[02/17 22:54:26] detectron2 INFO: Contents of args.config_file=configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmaskformer2stereo_R50_bs16_90k.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m  [39m[38;5;186m"[39m[38;5;186mcheckpoints/R-101.pkl[39m[38;5;186m"[39m[38;5;15m [39m[38;5;242m#"/home/nstarli/Mask2Former/work_dirs/r101_48classes_fixedmatching/model_final.pth"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m101[39m
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbasic[39m[38;5;186m"[39m[38;5;15m  [39m[38;5;242m# not used[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mSyncBN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m][39m[38;5;15m  [39m[38;5;242m# not used[39m

[02/17 22:54:27] detectron2.utils.env INFO: Using a generated random seed 27128065
[02/17 22:54:30] detectron2.engine.defaults INFO: Model:
MaskFormerStereo(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(4096, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(48, 256)
      (query_embed): Embedding(48, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=49, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterionStereo
      matcher: Matcher FixedMatcher
      losses: ['labels', 'masks', 'segs']
      weight_dict: {'loss_mask': 5.0, 'loss_ce': 0.0, 'loss_dice': 5.0, 'loss_seg': 0.1, 'loss_mask_0': 5.0, 'loss_ce_0': 0.0, 'loss_dice_0': 5.0, 'loss_mask_1': 5.0, 'loss_ce_1': 0.0, 'loss_dice_1': 5.0, 'loss_mask_2': 5.0, 'loss_ce_2': 0.0, 'loss_dice_2': 5.0, 'loss_mask_3': 5.0, 'loss_ce_3': 0.0, 'loss_dice_3': 5.0, 'loss_mask_4': 5.0, 'loss_ce_4': 0.0, 'loss_dice_4': 5.0, 'loss_mask_5': 5.0, 'loss_ce_5': 0.0, 'loss_dice_5': 5.0, 'loss_mask_6': 5.0, 'loss_ce_6': 0.0, 'loss_dice_6': 5.0, 'loss_mask_7': 5.0, 'loss_ce_7': 0.0, 'loss_dice_7': 5.0, 'loss_mask_8': 5.0, 'loss_ce_8': 0.0, 'loss_dice_8': 5.0}
      num_classes: 48
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (upsampler): UpsampleMasks(
    (conv2d): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[02/17 22:54:30] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in training: [RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[256, 512], single_category_max_area=1.0, ignored_category=0)]
[02/17 22:54:35] detectron2.data.build INFO: Using training sampler TrainingSampler
[02/17 22:54:36] detectron2.data.common INFO: Serializing 35454 elements to byte tensors and concatenating them all ...
[02/17 22:54:36] detectron2.data.common INFO: Serialized dataset takes 10.76 MiB
[02/17 22:54:36] fvcore.common.checkpoint INFO: [Checkpointer] Loading from checkpoints/R-101.pkl ...
[02/17 22:54:36] detectron2.checkpoint.c2_model_loading INFO: Renaming Caffe2 weights ......
[02/17 22:54:37] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint       | Shapes                                          |
|:------------------|:--------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}   | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}   | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}   | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.10.conv1.*   | res4_10_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.10.conv2.*   | res4_10_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.10.conv3.*   | res4_10_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.11.conv1.*   | res4_11_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.11.conv2.*   | res4_11_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.11.conv3.*   | res4_11_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.12.conv1.*   | res4_12_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.12.conv2.*   | res4_12_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.12.conv3.*   | res4_12_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.13.conv1.*   | res4_13_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.13.conv2.*   | res4_13_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.13.conv3.*   | res4_13_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.14.conv1.*   | res4_14_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.14.conv2.*   | res4_14_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.14.conv3.*   | res4_14_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.15.conv1.*   | res4_15_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.15.conv2.*   | res4_15_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.15.conv3.*   | res4_15_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.16.conv1.*   | res4_16_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.16.conv2.*   | res4_16_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.16.conv3.*   | res4_16_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.17.conv1.*   | res4_17_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.17.conv2.*   | res4_17_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.17.conv3.*   | res4_17_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.18.conv1.*   | res4_18_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.18.conv2.*   | res4_18_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.18.conv3.*   | res4_18_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.19.conv1.*   | res4_19_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.19.conv2.*   | res4_19_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.19.conv3.*   | res4_19_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.20.conv1.*   | res4_20_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.20.conv2.*   | res4_20_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.20.conv3.*   | res4_20_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.21.conv1.*   | res4_21_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.21.conv2.*   | res4_21_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.21.conv3.*   | res4_21_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.22.conv1.*   | res4_22_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.22.conv2.*   | res4_22_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.22.conv3.*   | res4_22_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.6.conv1.*    | res4_6_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.6.conv2.*    | res4_6_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.6.conv3.*    | res4_6_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.7.conv1.*    | res4_7_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.7.conv2.*    | res4_7_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.7.conv3.*    | res4_7_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.8.conv1.*    | res4_8_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.8.conv2.*    | res4_8_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.8.conv3.*    | res4_8_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.9.conv1.*    | res4_9_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.9.conv2.*    | res4_9_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.9.conv3.*    | res4_9_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}   | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*            | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                   | (64, 3, 7, 7)                                   |
[02/17 22:54:37] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mupsampler.conv2d.{bias, weight}[0m
[02/17 22:54:37] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc1000.{bias, weight}[0m
[02/17 22:54:37] detectron2.engine.train_loop INFO: Starting training from iteration 0
[02/17 22:55:33] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/17 22:55:34] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/17 22:55:34] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/17 22:55:47] mask2former INFO: Inference done 11/1092. Dataloading: 0.0053 s/iter. Inference: 0.2924 s/iter. Eval: 0.0667 s/iter. Total: 0.3644 s/iter. ETA=0:06:33
[02/17 22:55:53] mask2former INFO: Inference done 26/1092. Dataloading: 0.0087 s/iter. Inference: 0.2922 s/iter. Eval: 0.0550 s/iter. Total: 0.3560 s/iter. ETA=0:06:19
[02/17 22:55:58] mask2former INFO: Inference done 42/1092. Dataloading: 0.0087 s/iter. Inference: 0.2773 s/iter. Eval: 0.0528 s/iter. Total: 0.3389 s/iter. ETA=0:05:55
[02/17 22:56:03] mask2former INFO: Inference done 58/1092. Dataloading: 0.0089 s/iter. Inference: 0.2755 s/iter. Eval: 0.0506 s/iter. Total: 0.3352 s/iter. ETA=0:05:46
[02/17 22:56:08] mask2former INFO: Inference done 73/1092. Dataloading: 0.0084 s/iter. Inference: 0.2745 s/iter. Eval: 0.0519 s/iter. Total: 0.3349 s/iter. ETA=0:05:41
[02/17 22:56:13] mask2former INFO: Inference done 88/1092. Dataloading: 0.0084 s/iter. Inference: 0.2759 s/iter. Eval: 0.0535 s/iter. Total: 0.3379 s/iter. ETA=0:05:39
[02/17 22:56:19] mask2former INFO: Inference done 104/1092. Dataloading: 0.0081 s/iter. Inference: 0.2763 s/iter. Eval: 0.0529 s/iter. Total: 0.3374 s/iter. ETA=0:05:33
[02/17 22:56:24] mask2former INFO: Inference done 119/1092. Dataloading: 0.0085 s/iter. Inference: 0.2763 s/iter. Eval: 0.0532 s/iter. Total: 0.3381 s/iter. ETA=0:05:28
[02/17 22:56:29] mask2former INFO: Inference done 135/1092. Dataloading: 0.0083 s/iter. Inference: 0.2744 s/iter. Eval: 0.0527 s/iter. Total: 0.3354 s/iter. ETA=0:05:20
[02/17 22:56:30] detectron2.engine.hooks INFO: Overall training speed: 17 iterations in 0:00:38 (2.2678 s / it)
[02/17 22:56:30] detectron2.engine.hooks INFO: Total training time: 0:01:35 (0:00:57 on hooks)
[02/17 22:56:58] detectron2 INFO: Rank of current process: 2. World size: 4
[02/17 22:57:02] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/home/nstarli/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.5
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             Tesla V100-SXM2-32GB (arch=7.0)
Driver version          495.29.05
CUDA_HOME               /usr/local/cuda-11
Pillow                  8.4.0
torchvision             0.10.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.4
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[02/17 22:57:02] detectron2 INFO: Command line arguments: Namespace(config_file='configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml', dist_url='tcp://127.0.0.1:65510', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[02/17 22:57:02] detectron2 INFO: Contents of args.config_file=configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmaskformer2stereo_R50_bs16_90k.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m  [39m[38;5;186m"[39m[38;5;186mcheckpoints/R-101.pkl[39m[38;5;186m"[39m[38;5;15m [39m[38;5;242m#"/home/nstarli/Mask2Former/work_dirs/r101_48classes_fixedmatching/model_final.pth"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m101[39m
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbasic[39m[38;5;186m"[39m[38;5;15m  [39m[38;5;242m# not used[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mSyncBN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m][39m[38;5;15m  [39m[38;5;242m# not used[39m

[02/17 22:57:02] detectron2.utils.env INFO: Using a generated random seed 2947028
[02/17 22:57:08] detectron2.engine.defaults INFO: Model:
MaskFormerStereo(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(4096, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(48, 256)
      (query_embed): Embedding(48, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=49, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterionStereo
      matcher: Matcher FixedMatcher
      losses: ['labels', 'masks', 'segs']
      weight_dict: {'loss_mask': 5.0, 'loss_ce': 0.0, 'loss_dice': 5.0, 'loss_seg': 0.1, 'loss_mask_0': 5.0, 'loss_ce_0': 0.0, 'loss_dice_0': 5.0, 'loss_mask_1': 5.0, 'loss_ce_1': 0.0, 'loss_dice_1': 5.0, 'loss_mask_2': 5.0, 'loss_ce_2': 0.0, 'loss_dice_2': 5.0, 'loss_mask_3': 5.0, 'loss_ce_3': 0.0, 'loss_dice_3': 5.0, 'loss_mask_4': 5.0, 'loss_ce_4': 0.0, 'loss_dice_4': 5.0, 'loss_mask_5': 5.0, 'loss_ce_5': 0.0, 'loss_dice_5': 5.0, 'loss_mask_6': 5.0, 'loss_ce_6': 0.0, 'loss_dice_6': 5.0, 'loss_mask_7': 5.0, 'loss_ce_7': 0.0, 'loss_dice_7': 5.0, 'loss_mask_8': 5.0, 'loss_ce_8': 0.0, 'loss_dice_8': 5.0}
      num_classes: 48
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (upsampler): UpsampleMasks(
    (conv2d): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[02/17 22:57:08] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in training: [RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[256, 512], single_category_max_area=1.0, ignored_category=0)]
[02/17 22:57:14] detectron2.data.build INFO: Using training sampler TrainingSampler
[02/17 22:57:14] detectron2.data.common INFO: Serializing 35454 elements to byte tensors and concatenating them all ...
[02/17 22:57:15] detectron2.data.common INFO: Serialized dataset takes 10.76 MiB
[02/17 22:57:15] fvcore.common.checkpoint INFO: [Checkpointer] Loading from checkpoints/R-101.pkl ...
[02/17 22:57:15] detectron2.checkpoint.c2_model_loading INFO: Renaming Caffe2 weights ......
[02/17 22:57:15] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint       | Shapes                                          |
|:------------------|:--------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}   | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}   | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}   | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.10.conv1.*   | res4_10_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.10.conv2.*   | res4_10_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.10.conv3.*   | res4_10_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.11.conv1.*   | res4_11_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.11.conv2.*   | res4_11_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.11.conv3.*   | res4_11_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.12.conv1.*   | res4_12_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.12.conv2.*   | res4_12_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.12.conv3.*   | res4_12_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.13.conv1.*   | res4_13_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.13.conv2.*   | res4_13_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.13.conv3.*   | res4_13_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.14.conv1.*   | res4_14_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.14.conv2.*   | res4_14_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.14.conv3.*   | res4_14_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.15.conv1.*   | res4_15_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.15.conv2.*   | res4_15_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.15.conv3.*   | res4_15_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.16.conv1.*   | res4_16_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.16.conv2.*   | res4_16_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.16.conv3.*   | res4_16_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.17.conv1.*   | res4_17_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.17.conv2.*   | res4_17_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.17.conv3.*   | res4_17_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.18.conv1.*   | res4_18_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.18.conv2.*   | res4_18_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.18.conv3.*   | res4_18_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.19.conv1.*   | res4_19_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.19.conv2.*   | res4_19_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.19.conv3.*   | res4_19_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.20.conv1.*   | res4_20_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.20.conv2.*   | res4_20_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.20.conv3.*   | res4_20_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.21.conv1.*   | res4_21_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.21.conv2.*   | res4_21_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.21.conv3.*   | res4_21_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.22.conv1.*   | res4_22_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.22.conv2.*   | res4_22_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.22.conv3.*   | res4_22_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.6.conv1.*    | res4_6_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.6.conv2.*    | res4_6_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.6.conv3.*    | res4_6_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.7.conv1.*    | res4_7_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.7.conv2.*    | res4_7_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.7.conv3.*    | res4_7_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.8.conv1.*    | res4_8_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.8.conv2.*    | res4_8_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.8.conv3.*    | res4_8_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.9.conv1.*    | res4_9_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.9.conv2.*    | res4_9_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.9.conv3.*    | res4_9_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}   | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*            | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                   | (64, 3, 7, 7)                                   |
[02/17 22:57:16] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mupsampler.conv2d.{bias, weight}[0m
[02/17 22:57:16] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc1000.{bias, weight}[0m
[02/17 22:57:16] detectron2.engine.train_loop INFO: Starting training from iteration 0
[02/17 22:58:08] detectron2.engine.hooks INFO: Overall training speed: 15 iterations in 0:00:33 (2.2653 s / it)
[02/17 22:58:08] detectron2.engine.hooks INFO: Total training time: 0:00:33 (0:00:00 on hooks)
[02/17 23:05:11] detectron2 INFO: Rank of current process: 2. World size: 4
[02/17 23:05:17] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/home/nstarli/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.5
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             Tesla V100-SXM2-32GB (arch=7.0)
Driver version          495.29.05
CUDA_HOME               /usr/local/cuda-11
Pillow                  8.4.0
torchvision             0.10.0 @/home/nstarli/anaconda3/envs/mask2former/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.4
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[02/17 23:05:17] detectron2 INFO: Command line arguments: Namespace(config_file='configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml', dist_url='tcp://127.0.0.1:65510', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[02/17 23:05:17] detectron2 INFO: Contents of args.config_file=configs/sceneflow/semantic-segmentation/maskformer2stereo_R101_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmaskformer2stereo_R50_bs16_90k.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m  [39m[38;5;186m"[39m[38;5;186mcheckpoints/R-101.pkl[39m[38;5;186m"[39m[38;5;15m [39m[38;5;242m#"/home/nstarli/Mask2Former/work_dirs/r101_48classes_fixedmatching/model_final.pth"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m101[39m
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbasic[39m[38;5;186m"[39m[38;5;15m  [39m[38;5;242m# not used[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mSyncBN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m1[39m[38;5;15m][39m[38;5;15m  [39m[38;5;242m# not used[39m

[02/17 23:05:17] detectron2.utils.env INFO: Using a generated random seed 17203339
[02/17 23:05:21] detectron2.engine.defaults INFO: Model:
MaskFormerStereo(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(4096, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(48, 256)
      (query_embed): Embedding(48, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=49, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterionStereo
      matcher: Matcher FixedMatcher
      losses: ['labels', 'masks', 'segs']
      weight_dict: {'loss_mask': 5.0, 'loss_ce': 0.0, 'loss_dice': 5.0, 'loss_seg': 0.1, 'loss_mask_0': 5.0, 'loss_ce_0': 0.0, 'loss_dice_0': 5.0, 'loss_mask_1': 5.0, 'loss_ce_1': 0.0, 'loss_dice_1': 5.0, 'loss_mask_2': 5.0, 'loss_ce_2': 0.0, 'loss_dice_2': 5.0, 'loss_mask_3': 5.0, 'loss_ce_3': 0.0, 'loss_dice_3': 5.0, 'loss_mask_4': 5.0, 'loss_ce_4': 0.0, 'loss_dice_4': 5.0, 'loss_mask_5': 5.0, 'loss_ce_5': 0.0, 'loss_dice_5': 5.0, 'loss_mask_6': 5.0, 'loss_ce_6': 0.0, 'loss_dice_6': 5.0, 'loss_mask_7': 5.0, 'loss_ce_7': 0.0, 'loss_dice_7': 5.0, 'loss_mask_8': 5.0, 'loss_ce_8': 0.0, 'loss_dice_8': 5.0}
      num_classes: 48
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (upsampler): UpsampleMasks(
    (conv2d): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[02/17 23:05:21] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in training: [RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[256, 512], single_category_max_area=1.0, ignored_category=0)]
[02/17 23:05:27] detectron2.data.build INFO: Using training sampler TrainingSampler
[02/17 23:05:27] detectron2.data.common INFO: Serializing 35454 elements to byte tensors and concatenating them all ...
[02/17 23:05:27] detectron2.data.common INFO: Serialized dataset takes 10.76 MiB
[02/17 23:05:27] fvcore.common.checkpoint INFO: [Checkpointer] Loading from checkpoints/R-101.pkl ...
[02/17 23:05:27] detectron2.checkpoint.c2_model_loading INFO: Renaming Caffe2 weights ......
[02/17 23:05:28] detectron2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint       | Shapes                                          |
|:------------------|:--------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}   | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}   | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}   | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.10.conv1.*   | res4_10_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.10.conv2.*   | res4_10_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.10.conv3.*   | res4_10_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.11.conv1.*   | res4_11_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.11.conv2.*   | res4_11_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.11.conv3.*   | res4_11_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.12.conv1.*   | res4_12_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.12.conv2.*   | res4_12_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.12.conv3.*   | res4_12_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.13.conv1.*   | res4_13_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.13.conv2.*   | res4_13_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.13.conv3.*   | res4_13_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.14.conv1.*   | res4_14_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.14.conv2.*   | res4_14_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.14.conv3.*   | res4_14_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.15.conv1.*   | res4_15_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.15.conv2.*   | res4_15_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.15.conv3.*   | res4_15_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.16.conv1.*   | res4_16_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.16.conv2.*   | res4_16_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.16.conv3.*   | res4_16_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.17.conv1.*   | res4_17_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.17.conv2.*   | res4_17_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.17.conv3.*   | res4_17_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.18.conv1.*   | res4_18_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.18.conv2.*   | res4_18_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.18.conv3.*   | res4_18_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.19.conv1.*   | res4_19_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.19.conv2.*   | res4_19_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.19.conv3.*   | res4_19_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.20.conv1.*   | res4_20_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.20.conv2.*   | res4_20_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.20.conv3.*   | res4_20_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.21.conv1.*   | res4_21_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.21.conv2.*   | res4_21_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.21.conv3.*   | res4_21_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.22.conv1.*   | res4_22_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.22.conv2.*   | res4_22_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.22.conv3.*   | res4_22_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.6.conv1.*    | res4_6_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.6.conv2.*    | res4_6_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.6.conv3.*    | res4_6_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.7.conv1.*    | res4_7_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.7.conv2.*    | res4_7_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.7.conv3.*    | res4_7_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.8.conv1.*    | res4_8_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.8.conv2.*    | res4_8_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.8.conv3.*    | res4_8_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.9.conv1.*    | res4_9_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.9.conv2.*    | res4_9_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.9.conv3.*    | res4_9_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}   | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*            | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                   | (64, 3, 7, 7)                                   |
[02/17 23:05:28] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion.empty_weight[0m
[34msem_seg_head.pixel_decoder.adapter_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.0.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.1.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.input_proj.2.1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.norm.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.layer_1.weight[0m
[34msem_seg_head.pixel_decoder.mask_features.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.0.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.1.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.2.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.3.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.4.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm1.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.norm2.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.attention_weights.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.output_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.sampling_offsets.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.encoder.layers.5.self_attn.value_proj.{bias, weight}[0m
[34msem_seg_head.pixel_decoder.transformer.level_embed[0m
[34msem_seg_head.predictor.class_embed.{bias, weight}[0m
[34msem_seg_head.predictor.decoder_norm.{bias, weight}[0m
[34msem_seg_head.predictor.level_embed.weight[0m
[34msem_seg_head.predictor.mask_embed.layers.0.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.1.{bias, weight}[0m
[34msem_seg_head.predictor.mask_embed.layers.2.{bias, weight}[0m
[34msem_seg_head.predictor.query_embed.weight[0m
[34msem_seg_head.predictor.query_feat.weight[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_cross_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear1.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.linear2.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_ffn_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.3.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.4.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.5.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.6.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.7.self_attn.{in_proj_bias, in_proj_weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.norm.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.out_proj.{bias, weight}[0m
[34msem_seg_head.predictor.transformer_self_attention_layers.8.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mupsampler.conv2d.{bias, weight}[0m
[02/17 23:05:28] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc1000.{bias, weight}[0m
[02/17 23:05:28] detectron2.engine.train_loop INFO: Starting training from iteration 0
[02/18 00:32:40] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 00:32:40] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 00:32:40] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 00:33:00] mask2former INFO: Inference done 11/1092. Dataloading: 0.0043 s/iter. Inference: 0.2798 s/iter. Eval: 0.1024 s/iter. Total: 0.3866 s/iter. ETA=0:06:57
[02/18 00:33:06] mask2former INFO: Inference done 19/1092. Dataloading: 0.0079 s/iter. Inference: 0.3408 s/iter. Eval: 0.2038 s/iter. Total: 0.5526 s/iter. ETA=0:09:52
[02/18 00:33:11] mask2former INFO: Inference done 29/1092. Dataloading: 0.0122 s/iter. Inference: 0.3337 s/iter. Eval: 0.1942 s/iter. Total: 0.5402 s/iter. ETA=0:09:34
[02/18 00:33:16] mask2former INFO: Inference done 41/1092. Dataloading: 0.0103 s/iter. Inference: 0.3164 s/iter. Eval: 0.1740 s/iter. Total: 0.5008 s/iter. ETA=0:08:46
[02/18 00:33:21] mask2former INFO: Inference done 53/1092. Dataloading: 0.0095 s/iter. Inference: 0.3062 s/iter. Eval: 0.1715 s/iter. Total: 0.4873 s/iter. ETA=0:08:26
[02/18 00:33:26] mask2former INFO: Inference done 66/1092. Dataloading: 0.0090 s/iter. Inference: 0.2929 s/iter. Eval: 0.1656 s/iter. Total: 0.4676 s/iter. ETA=0:07:59
[02/18 00:33:31] mask2former INFO: Inference done 77/1092. Dataloading: 0.0090 s/iter. Inference: 0.2954 s/iter. Eval: 0.1614 s/iter. Total: 0.4658 s/iter. ETA=0:07:52
[02/18 00:33:36] mask2former INFO: Inference done 89/1092. Dataloading: 0.0087 s/iter. Inference: 0.2912 s/iter. Eval: 0.1594 s/iter. Total: 0.4593 s/iter. ETA=0:07:40
[02/18 00:33:42] mask2former INFO: Inference done 101/1092. Dataloading: 0.0086 s/iter. Inference: 0.2888 s/iter. Eval: 0.1571 s/iter. Total: 0.4546 s/iter. ETA=0:07:30
[02/18 00:33:47] mask2former INFO: Inference done 114/1092. Dataloading: 0.0083 s/iter. Inference: 0.2860 s/iter. Eval: 0.1548 s/iter. Total: 0.4491 s/iter. ETA=0:07:19
[02/18 00:33:52] mask2former INFO: Inference done 127/1092. Dataloading: 0.0081 s/iter. Inference: 0.2833 s/iter. Eval: 0.1532 s/iter. Total: 0.4447 s/iter. ETA=0:07:09
[02/18 00:33:57] mask2former INFO: Inference done 139/1092. Dataloading: 0.0084 s/iter. Inference: 0.2842 s/iter. Eval: 0.1518 s/iter. Total: 0.4445 s/iter. ETA=0:07:03
[02/18 00:34:03] mask2former INFO: Inference done 152/1092. Dataloading: 0.0083 s/iter. Inference: 0.2810 s/iter. Eval: 0.1511 s/iter. Total: 0.4404 s/iter. ETA=0:06:54
[02/18 00:34:08] mask2former INFO: Inference done 164/1092. Dataloading: 0.0082 s/iter. Inference: 0.2803 s/iter. Eval: 0.1504 s/iter. Total: 0.4389 s/iter. ETA=0:06:47
[02/18 00:34:13] mask2former INFO: Inference done 177/1092. Dataloading: 0.0080 s/iter. Inference: 0.2775 s/iter. Eval: 0.1497 s/iter. Total: 0.4353 s/iter. ETA=0:06:38
[02/18 00:34:18] mask2former INFO: Inference done 189/1092. Dataloading: 0.0079 s/iter. Inference: 0.2775 s/iter. Eval: 0.1488 s/iter. Total: 0.4343 s/iter. ETA=0:06:32
[02/18 00:34:23] mask2former INFO: Inference done 202/1092. Dataloading: 0.0078 s/iter. Inference: 0.2772 s/iter. Eval: 0.1477 s/iter. Total: 0.4328 s/iter. ETA=0:06:25
[02/18 00:34:28] mask2former INFO: Inference done 215/1092. Dataloading: 0.0079 s/iter. Inference: 0.2763 s/iter. Eval: 0.1469 s/iter. Total: 0.4312 s/iter. ETA=0:06:18
[02/18 00:34:34] mask2former INFO: Inference done 228/1092. Dataloading: 0.0078 s/iter. Inference: 0.2752 s/iter. Eval: 0.1474 s/iter. Total: 0.4306 s/iter. ETA=0:06:12
[02/18 00:34:39] mask2former INFO: Inference done 240/1092. Dataloading: 0.0077 s/iter. Inference: 0.2752 s/iter. Eval: 0.1471 s/iter. Total: 0.4302 s/iter. ETA=0:06:06
[02/18 00:34:44] mask2former INFO: Inference done 253/1092. Dataloading: 0.0076 s/iter. Inference: 0.2736 s/iter. Eval: 0.1469 s/iter. Total: 0.4282 s/iter. ETA=0:05:59
[02/18 00:34:49] mask2former INFO: Inference done 266/1092. Dataloading: 0.0076 s/iter. Inference: 0.2719 s/iter. Eval: 0.1468 s/iter. Total: 0.4264 s/iter. ETA=0:05:52
[02/18 00:34:54] mask2former INFO: Inference done 279/1092. Dataloading: 0.0078 s/iter. Inference: 0.2708 s/iter. Eval: 0.1464 s/iter. Total: 0.4251 s/iter. ETA=0:05:45
[02/18 00:34:59] mask2former INFO: Inference done 291/1092. Dataloading: 0.0079 s/iter. Inference: 0.2715 s/iter. Eval: 0.1455 s/iter. Total: 0.4250 s/iter. ETA=0:05:40
[02/18 00:35:05] mask2former INFO: Inference done 304/1092. Dataloading: 0.0078 s/iter. Inference: 0.2702 s/iter. Eval: 0.1455 s/iter. Total: 0.4236 s/iter. ETA=0:05:33
[02/18 00:35:10] mask2former INFO: Inference done 316/1092. Dataloading: 0.0079 s/iter. Inference: 0.2701 s/iter. Eval: 0.1461 s/iter. Total: 0.4242 s/iter. ETA=0:05:29
[02/18 00:35:15] mask2former INFO: Inference done 329/1092. Dataloading: 0.0079 s/iter. Inference: 0.2688 s/iter. Eval: 0.1463 s/iter. Total: 0.4231 s/iter. ETA=0:05:22
[02/18 00:35:20] mask2former INFO: Inference done 341/1092. Dataloading: 0.0080 s/iter. Inference: 0.2683 s/iter. Eval: 0.1474 s/iter. Total: 0.4238 s/iter. ETA=0:05:18
[02/18 00:35:26] mask2former INFO: Inference done 354/1092. Dataloading: 0.0079 s/iter. Inference: 0.2676 s/iter. Eval: 0.1473 s/iter. Total: 0.4229 s/iter. ETA=0:05:12
[02/18 00:35:31] mask2former INFO: Inference done 367/1092. Dataloading: 0.0079 s/iter. Inference: 0.2667 s/iter. Eval: 0.1470 s/iter. Total: 0.4217 s/iter. ETA=0:05:05
[02/18 00:35:36] mask2former INFO: Inference done 380/1092. Dataloading: 0.0079 s/iter. Inference: 0.2659 s/iter. Eval: 0.1469 s/iter. Total: 0.4208 s/iter. ETA=0:04:59
[02/18 00:35:41] mask2former INFO: Inference done 393/1092. Dataloading: 0.0079 s/iter. Inference: 0.2651 s/iter. Eval: 0.1470 s/iter. Total: 0.4200 s/iter. ETA=0:04:53
[02/18 00:35:46] mask2former INFO: Inference done 406/1092. Dataloading: 0.0079 s/iter. Inference: 0.2651 s/iter. Eval: 0.1468 s/iter. Total: 0.4199 s/iter. ETA=0:04:48
[02/18 00:35:52] mask2former INFO: Inference done 420/1092. Dataloading: 0.0078 s/iter. Inference: 0.2644 s/iter. Eval: 0.1463 s/iter. Total: 0.4186 s/iter. ETA=0:04:41
[02/18 00:35:57] mask2former INFO: Inference done 433/1092. Dataloading: 0.0078 s/iter. Inference: 0.2643 s/iter. Eval: 0.1462 s/iter. Total: 0.4185 s/iter. ETA=0:04:35
[02/18 00:36:02] mask2former INFO: Inference done 446/1092. Dataloading: 0.0078 s/iter. Inference: 0.2642 s/iter. Eval: 0.1459 s/iter. Total: 0.4180 s/iter. ETA=0:04:30
[02/18 00:36:08] mask2former INFO: Inference done 459/1092. Dataloading: 0.0078 s/iter. Inference: 0.2643 s/iter. Eval: 0.1456 s/iter. Total: 0.4178 s/iter. ETA=0:04:24
[02/18 00:36:13] mask2former INFO: Inference done 472/1092. Dataloading: 0.0078 s/iter. Inference: 0.2641 s/iter. Eval: 0.1451 s/iter. Total: 0.4170 s/iter. ETA=0:04:18
[02/18 00:36:18] mask2former INFO: Inference done 485/1092. Dataloading: 0.0077 s/iter. Inference: 0.2637 s/iter. Eval: 0.1448 s/iter. Total: 0.4163 s/iter. ETA=0:04:12
[02/18 00:36:23] mask2former INFO: Inference done 497/1092. Dataloading: 0.0077 s/iter. Inference: 0.2639 s/iter. Eval: 0.1446 s/iter. Total: 0.4163 s/iter. ETA=0:04:07
[02/18 00:36:28] mask2former INFO: Inference done 510/1092. Dataloading: 0.0077 s/iter. Inference: 0.2634 s/iter. Eval: 0.1448 s/iter. Total: 0.4161 s/iter. ETA=0:04:02
[02/18 00:36:33] mask2former INFO: Inference done 523/1092. Dataloading: 0.0078 s/iter. Inference: 0.2629 s/iter. Eval: 0.1450 s/iter. Total: 0.4157 s/iter. ETA=0:03:56
[02/18 00:36:38] mask2former INFO: Inference done 535/1092. Dataloading: 0.0078 s/iter. Inference: 0.2629 s/iter. Eval: 0.1451 s/iter. Total: 0.4159 s/iter. ETA=0:03:51
[02/18 00:36:44] mask2former INFO: Inference done 548/1092. Dataloading: 0.0078 s/iter. Inference: 0.2626 s/iter. Eval: 0.1451 s/iter. Total: 0.4155 s/iter. ETA=0:03:46
[02/18 00:36:49] mask2former INFO: Inference done 561/1092. Dataloading: 0.0078 s/iter. Inference: 0.2623 s/iter. Eval: 0.1450 s/iter. Total: 0.4152 s/iter. ETA=0:03:40
[02/18 00:36:54] mask2former INFO: Inference done 575/1092. Dataloading: 0.0078 s/iter. Inference: 0.2617 s/iter. Eval: 0.1447 s/iter. Total: 0.4143 s/iter. ETA=0:03:34
[02/18 00:36:59] mask2former INFO: Inference done 588/1092. Dataloading: 0.0078 s/iter. Inference: 0.2617 s/iter. Eval: 0.1444 s/iter. Total: 0.4140 s/iter. ETA=0:03:28
[02/18 00:37:05] mask2former INFO: Inference done 601/1092. Dataloading: 0.0077 s/iter. Inference: 0.2616 s/iter. Eval: 0.1443 s/iter. Total: 0.4138 s/iter. ETA=0:03:23
[02/18 00:37:10] mask2former INFO: Inference done 614/1092. Dataloading: 0.0077 s/iter. Inference: 0.2616 s/iter. Eval: 0.1441 s/iter. Total: 0.4135 s/iter. ETA=0:03:17
[02/18 00:37:15] mask2former INFO: Inference done 627/1092. Dataloading: 0.0077 s/iter. Inference: 0.2614 s/iter. Eval: 0.1442 s/iter. Total: 0.4134 s/iter. ETA=0:03:12
[02/18 00:37:20] mask2former INFO: Inference done 641/1092. Dataloading: 0.0077 s/iter. Inference: 0.2612 s/iter. Eval: 0.1438 s/iter. Total: 0.4128 s/iter. ETA=0:03:06
[02/18 00:37:26] mask2former INFO: Inference done 654/1092. Dataloading: 0.0077 s/iter. Inference: 0.2611 s/iter. Eval: 0.1436 s/iter. Total: 0.4124 s/iter. ETA=0:03:00
[02/18 00:37:31] mask2former INFO: Inference done 666/1092. Dataloading: 0.0076 s/iter. Inference: 0.2612 s/iter. Eval: 0.1436 s/iter. Total: 0.4126 s/iter. ETA=0:02:55
[02/18 00:37:36] mask2former INFO: Inference done 678/1092. Dataloading: 0.0077 s/iter. Inference: 0.2614 s/iter. Eval: 0.1436 s/iter. Total: 0.4129 s/iter. ETA=0:02:50
[02/18 00:37:41] mask2former INFO: Inference done 690/1092. Dataloading: 0.0077 s/iter. Inference: 0.2614 s/iter. Eval: 0.1438 s/iter. Total: 0.4130 s/iter. ETA=0:02:46
[02/18 00:37:46] mask2former INFO: Inference done 703/1092. Dataloading: 0.0077 s/iter. Inference: 0.2614 s/iter. Eval: 0.1436 s/iter. Total: 0.4129 s/iter. ETA=0:02:40
[02/18 00:37:51] mask2former INFO: Inference done 715/1092. Dataloading: 0.0077 s/iter. Inference: 0.2617 s/iter. Eval: 0.1436 s/iter. Total: 0.4131 s/iter. ETA=0:02:35
[02/18 00:37:56] mask2former INFO: Inference done 727/1092. Dataloading: 0.0077 s/iter. Inference: 0.2622 s/iter. Eval: 0.1435 s/iter. Total: 0.4134 s/iter. ETA=0:02:30
[02/18 00:38:02] mask2former INFO: Inference done 740/1092. Dataloading: 0.0077 s/iter. Inference: 0.2621 s/iter. Eval: 0.1433 s/iter. Total: 0.4132 s/iter. ETA=0:02:25
[02/18 00:38:07] mask2former INFO: Inference done 753/1092. Dataloading: 0.0077 s/iter. Inference: 0.2619 s/iter. Eval: 0.1434 s/iter. Total: 0.4131 s/iter. ETA=0:02:20
[02/18 00:38:12] mask2former INFO: Inference done 765/1092. Dataloading: 0.0077 s/iter. Inference: 0.2618 s/iter. Eval: 0.1437 s/iter. Total: 0.4132 s/iter. ETA=0:02:15
[02/18 00:38:17] mask2former INFO: Inference done 777/1092. Dataloading: 0.0076 s/iter. Inference: 0.2622 s/iter. Eval: 0.1437 s/iter. Total: 0.4137 s/iter. ETA=0:02:10
[02/18 00:38:22] mask2former INFO: Inference done 789/1092. Dataloading: 0.0076 s/iter. Inference: 0.2626 s/iter. Eval: 0.1434 s/iter. Total: 0.4137 s/iter. ETA=0:02:05
[02/18 00:38:28] mask2former INFO: Inference done 803/1092. Dataloading: 0.0076 s/iter. Inference: 0.2622 s/iter. Eval: 0.1432 s/iter. Total: 0.4131 s/iter. ETA=0:01:59
[02/18 00:38:33] mask2former INFO: Inference done 815/1092. Dataloading: 0.0076 s/iter. Inference: 0.2622 s/iter. Eval: 0.1433 s/iter. Total: 0.4133 s/iter. ETA=0:01:54
[02/18 00:38:38] mask2former INFO: Inference done 828/1092. Dataloading: 0.0076 s/iter. Inference: 0.2622 s/iter. Eval: 0.1433 s/iter. Total: 0.4132 s/iter. ETA=0:01:49
[02/18 00:38:43] mask2former INFO: Inference done 841/1092. Dataloading: 0.0077 s/iter. Inference: 0.2621 s/iter. Eval: 0.1433 s/iter. Total: 0.4132 s/iter. ETA=0:01:43
[02/18 00:38:49] mask2former INFO: Inference done 853/1092. Dataloading: 0.0076 s/iter. Inference: 0.2624 s/iter. Eval: 0.1434 s/iter. Total: 0.4136 s/iter. ETA=0:01:38
[02/18 00:38:54] mask2former INFO: Inference done 866/1092. Dataloading: 0.0076 s/iter. Inference: 0.2625 s/iter. Eval: 0.1433 s/iter. Total: 0.4135 s/iter. ETA=0:01:33
[02/18 00:38:59] mask2former INFO: Inference done 878/1092. Dataloading: 0.0076 s/iter. Inference: 0.2626 s/iter. Eval: 0.1432 s/iter. Total: 0.4136 s/iter. ETA=0:01:28
[02/18 00:39:04] mask2former INFO: Inference done 891/1092. Dataloading: 0.0076 s/iter. Inference: 0.2626 s/iter. Eval: 0.1433 s/iter. Total: 0.4136 s/iter. ETA=0:01:23
[02/18 00:39:10] mask2former INFO: Inference done 901/1092. Dataloading: 0.0076 s/iter. Inference: 0.2640 s/iter. Eval: 0.1433 s/iter. Total: 0.4151 s/iter. ETA=0:01:19
[02/18 00:39:15] mask2former INFO: Inference done 911/1092. Dataloading: 0.0076 s/iter. Inference: 0.2655 s/iter. Eval: 0.1433 s/iter. Total: 0.4165 s/iter. ETA=0:01:15
[02/18 00:39:20] mask2former INFO: Inference done 920/1092. Dataloading: 0.0076 s/iter. Inference: 0.2670 s/iter. Eval: 0.1431 s/iter. Total: 0.4179 s/iter. ETA=0:01:11
[02/18 00:39:26] mask2former INFO: Inference done 929/1092. Dataloading: 0.0076 s/iter. Inference: 0.2686 s/iter. Eval: 0.1433 s/iter. Total: 0.4196 s/iter. ETA=0:01:08
[02/18 00:39:31] mask2former INFO: Inference done 938/1092. Dataloading: 0.0077 s/iter. Inference: 0.2701 s/iter. Eval: 0.1433 s/iter. Total: 0.4212 s/iter. ETA=0:01:04
[02/18 00:39:36] mask2former INFO: Inference done 947/1092. Dataloading: 0.0077 s/iter. Inference: 0.2716 s/iter. Eval: 0.1433 s/iter. Total: 0.4227 s/iter. ETA=0:01:01
[02/18 00:39:41] mask2former INFO: Inference done 956/1092. Dataloading: 0.0077 s/iter. Inference: 0.2731 s/iter. Eval: 0.1434 s/iter. Total: 0.4243 s/iter. ETA=0:00:57
[02/18 00:39:47] mask2former INFO: Inference done 965/1092. Dataloading: 0.0077 s/iter. Inference: 0.2746 s/iter. Eval: 0.1436 s/iter. Total: 0.4261 s/iter. ETA=0:00:54
[02/18 00:39:52] mask2former INFO: Inference done 974/1092. Dataloading: 0.0077 s/iter. Inference: 0.2759 s/iter. Eval: 0.1438 s/iter. Total: 0.4275 s/iter. ETA=0:00:50
[02/18 00:39:57] mask2former INFO: Inference done 983/1092. Dataloading: 0.0077 s/iter. Inference: 0.2772 s/iter. Eval: 0.1438 s/iter. Total: 0.4288 s/iter. ETA=0:00:46
[02/18 00:40:03] mask2former INFO: Inference done 992/1092. Dataloading: 0.0077 s/iter. Inference: 0.2784 s/iter. Eval: 0.1440 s/iter. Total: 0.4303 s/iter. ETA=0:00:43
[02/18 00:40:08] mask2former INFO: Inference done 1001/1092. Dataloading: 0.0077 s/iter. Inference: 0.2798 s/iter. Eval: 0.1440 s/iter. Total: 0.4317 s/iter. ETA=0:00:39
[02/18 00:40:13] mask2former INFO: Inference done 1010/1092. Dataloading: 0.0077 s/iter. Inference: 0.2812 s/iter. Eval: 0.1443 s/iter. Total: 0.4333 s/iter. ETA=0:00:35
[02/18 00:40:19] mask2former INFO: Inference done 1019/1092. Dataloading: 0.0077 s/iter. Inference: 0.2825 s/iter. Eval: 0.1443 s/iter. Total: 0.4346 s/iter. ETA=0:00:31
[02/18 00:40:24] mask2former INFO: Inference done 1028/1092. Dataloading: 0.0077 s/iter. Inference: 0.2837 s/iter. Eval: 0.1444 s/iter. Total: 0.4359 s/iter. ETA=0:00:27
[02/18 00:40:29] mask2former INFO: Inference done 1037/1092. Dataloading: 0.0077 s/iter. Inference: 0.2847 s/iter. Eval: 0.1445 s/iter. Total: 0.4370 s/iter. ETA=0:00:24
[02/18 00:40:35] mask2former INFO: Inference done 1047/1092. Dataloading: 0.0077 s/iter. Inference: 0.2856 s/iter. Eval: 0.1448 s/iter. Total: 0.4382 s/iter. ETA=0:00:19
[02/18 00:40:40] mask2former INFO: Inference done 1056/1092. Dataloading: 0.0077 s/iter. Inference: 0.2870 s/iter. Eval: 0.1448 s/iter. Total: 0.4396 s/iter. ETA=0:00:15
[02/18 00:40:45] mask2former INFO: Inference done 1066/1092. Dataloading: 0.0077 s/iter. Inference: 0.2879 s/iter. Eval: 0.1448 s/iter. Total: 0.4406 s/iter. ETA=0:00:11
[02/18 00:40:51] mask2former INFO: Inference done 1076/1092. Dataloading: 0.0077 s/iter. Inference: 0.2891 s/iter. Eval: 0.1448 s/iter. Total: 0.4417 s/iter. ETA=0:00:07
[02/18 00:40:56] mask2former INFO: Inference done 1086/1092. Dataloading: 0.0077 s/iter. Inference: 0.2901 s/iter. Eval: 0.1448 s/iter. Total: 0.4427 s/iter. ETA=0:00:02
[02/18 03:18:44] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 03:18:46] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 03:18:46] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 03:19:07] mask2former INFO: Inference done 11/1092. Dataloading: 0.0057 s/iter. Inference: 0.4265 s/iter. Eval: 0.1861 s/iter. Total: 0.6183 s/iter. ETA=0:11:08
[02/18 03:19:12] mask2former INFO: Inference done 19/1092. Dataloading: 0.0065 s/iter. Inference: 0.4394 s/iter. Eval: 0.1840 s/iter. Total: 0.6300 s/iter. ETA=0:11:16
[02/18 03:19:17] mask2former INFO: Inference done 28/1092. Dataloading: 0.0079 s/iter. Inference: 0.4365 s/iter. Eval: 0.1750 s/iter. Total: 0.6195 s/iter. ETA=0:10:59
[02/18 03:19:23] mask2former INFO: Inference done 36/1092. Dataloading: 0.0090 s/iter. Inference: 0.4534 s/iter. Eval: 0.1756 s/iter. Total: 0.6381 s/iter. ETA=0:11:13
[02/18 03:19:28] mask2former INFO: Inference done 44/1092. Dataloading: 0.0094 s/iter. Inference: 0.4591 s/iter. Eval: 0.1763 s/iter. Total: 0.6448 s/iter. ETA=0:11:15
[02/18 03:19:33] mask2former INFO: Inference done 52/1092. Dataloading: 0.0093 s/iter. Inference: 0.4624 s/iter. Eval: 0.1715 s/iter. Total: 0.6434 s/iter. ETA=0:11:09
[02/18 03:19:38] mask2former INFO: Inference done 59/1092. Dataloading: 0.0093 s/iter. Inference: 0.4684 s/iter. Eval: 0.1783 s/iter. Total: 0.6562 s/iter. ETA=0:11:17
[02/18 03:19:43] mask2former INFO: Inference done 67/1092. Dataloading: 0.0093 s/iter. Inference: 0.4650 s/iter. Eval: 0.1805 s/iter. Total: 0.6549 s/iter. ETA=0:11:11
[02/18 03:19:49] mask2former INFO: Inference done 75/1092. Dataloading: 0.0097 s/iter. Inference: 0.4621 s/iter. Eval: 0.1825 s/iter. Total: 0.6544 s/iter. ETA=0:11:05
[02/18 03:19:54] mask2former INFO: Inference done 84/1092. Dataloading: 0.0100 s/iter. Inference: 0.4588 s/iter. Eval: 0.1802 s/iter. Total: 0.6492 s/iter. ETA=0:10:54
[02/18 03:19:59] mask2former INFO: Inference done 92/1092. Dataloading: 0.0096 s/iter. Inference: 0.4590 s/iter. Eval: 0.1791 s/iter. Total: 0.6479 s/iter. ETA=0:10:47
[02/18 03:20:04] mask2former INFO: Inference done 100/1092. Dataloading: 0.0094 s/iter. Inference: 0.4561 s/iter. Eval: 0.1815 s/iter. Total: 0.6472 s/iter. ETA=0:10:41
[02/18 03:20:10] mask2former INFO: Inference done 109/1092. Dataloading: 0.0093 s/iter. Inference: 0.4548 s/iter. Eval: 0.1808 s/iter. Total: 0.6450 s/iter. ETA=0:10:34
[02/18 03:20:15] mask2former INFO: Inference done 118/1092. Dataloading: 0.0090 s/iter. Inference: 0.4536 s/iter. Eval: 0.1791 s/iter. Total: 0.6419 s/iter. ETA=0:10:25
[02/18 03:20:21] mask2former INFO: Inference done 127/1092. Dataloading: 0.0089 s/iter. Inference: 0.4521 s/iter. Eval: 0.1766 s/iter. Total: 0.6377 s/iter. ETA=0:10:15
[02/18 03:20:26] mask2former INFO: Inference done 136/1092. Dataloading: 0.0093 s/iter. Inference: 0.4510 s/iter. Eval: 0.1753 s/iter. Total: 0.6357 s/iter. ETA=0:10:07
[02/18 03:20:31] mask2former INFO: Inference done 144/1092. Dataloading: 0.0093 s/iter. Inference: 0.4509 s/iter. Eval: 0.1764 s/iter. Total: 0.6367 s/iter. ETA=0:10:03
[02/18 03:20:37] mask2former INFO: Inference done 153/1092. Dataloading: 0.0092 s/iter. Inference: 0.4495 s/iter. Eval: 0.1765 s/iter. Total: 0.6354 s/iter. ETA=0:09:56
[02/18 03:20:42] mask2former INFO: Inference done 161/1092. Dataloading: 0.0092 s/iter. Inference: 0.4490 s/iter. Eval: 0.1772 s/iter. Total: 0.6356 s/iter. ETA=0:09:51
[02/18 03:20:48] mask2former INFO: Inference done 169/1092. Dataloading: 0.0092 s/iter. Inference: 0.4505 s/iter. Eval: 0.1785 s/iter. Total: 0.6383 s/iter. ETA=0:09:49
[02/18 03:20:53] mask2former INFO: Inference done 177/1092. Dataloading: 0.0091 s/iter. Inference: 0.4522 s/iter. Eval: 0.1784 s/iter. Total: 0.6397 s/iter. ETA=0:09:45
[02/18 03:20:59] mask2former INFO: Inference done 185/1092. Dataloading: 0.0090 s/iter. Inference: 0.4527 s/iter. Eval: 0.1806 s/iter. Total: 0.6425 s/iter. ETA=0:09:42
[02/18 03:21:04] mask2former INFO: Inference done 193/1092. Dataloading: 0.0090 s/iter. Inference: 0.4530 s/iter. Eval: 0.1803 s/iter. Total: 0.6425 s/iter. ETA=0:09:37
[02/18 03:21:09] mask2former INFO: Inference done 201/1092. Dataloading: 0.0092 s/iter. Inference: 0.4541 s/iter. Eval: 0.1815 s/iter. Total: 0.6449 s/iter. ETA=0:09:34
[02/18 03:21:15] mask2former INFO: Inference done 210/1092. Dataloading: 0.0092 s/iter. Inference: 0.4539 s/iter. Eval: 0.1802 s/iter. Total: 0.6433 s/iter. ETA=0:09:27
[02/18 03:21:20] mask2former INFO: Inference done 219/1092. Dataloading: 0.0091 s/iter. Inference: 0.4523 s/iter. Eval: 0.1802 s/iter. Total: 0.6417 s/iter. ETA=0:09:20
[02/18 03:21:25] mask2former INFO: Inference done 227/1092. Dataloading: 0.0091 s/iter. Inference: 0.4526 s/iter. Eval: 0.1805 s/iter. Total: 0.6424 s/iter. ETA=0:09:15
[02/18 03:21:31] mask2former INFO: Inference done 235/1092. Dataloading: 0.0091 s/iter. Inference: 0.4542 s/iter. Eval: 0.1810 s/iter. Total: 0.6445 s/iter. ETA=0:09:12
[02/18 03:21:36] mask2former INFO: Inference done 244/1092. Dataloading: 0.0091 s/iter. Inference: 0.4537 s/iter. Eval: 0.1797 s/iter. Total: 0.6427 s/iter. ETA=0:09:04
[02/18 03:21:42] mask2former INFO: Inference done 253/1092. Dataloading: 0.0091 s/iter. Inference: 0.4528 s/iter. Eval: 0.1786 s/iter. Total: 0.6406 s/iter. ETA=0:08:57
[02/18 03:21:47] mask2former INFO: Inference done 262/1092. Dataloading: 0.0091 s/iter. Inference: 0.4515 s/iter. Eval: 0.1788 s/iter. Total: 0.6395 s/iter. ETA=0:08:50
[02/18 03:21:53] mask2former INFO: Inference done 271/1092. Dataloading: 0.0090 s/iter. Inference: 0.4513 s/iter. Eval: 0.1787 s/iter. Total: 0.6391 s/iter. ETA=0:08:44
[02/18 03:21:58] mask2former INFO: Inference done 279/1092. Dataloading: 0.0091 s/iter. Inference: 0.4509 s/iter. Eval: 0.1787 s/iter. Total: 0.6389 s/iter. ETA=0:08:39
[02/18 03:22:03] mask2former INFO: Inference done 287/1092. Dataloading: 0.0091 s/iter. Inference: 0.4518 s/iter. Eval: 0.1794 s/iter. Total: 0.6404 s/iter. ETA=0:08:35
[02/18 03:22:09] mask2former INFO: Inference done 295/1092. Dataloading: 0.0092 s/iter. Inference: 0.4522 s/iter. Eval: 0.1790 s/iter. Total: 0.6405 s/iter. ETA=0:08:30
[02/18 03:22:14] mask2former INFO: Inference done 303/1092. Dataloading: 0.0092 s/iter. Inference: 0.4515 s/iter. Eval: 0.1795 s/iter. Total: 0.6403 s/iter. ETA=0:08:25
[02/18 03:22:19] mask2former INFO: Inference done 311/1092. Dataloading: 0.0091 s/iter. Inference: 0.4517 s/iter. Eval: 0.1790 s/iter. Total: 0.6400 s/iter. ETA=0:08:19
[02/18 03:22:24] mask2former INFO: Inference done 319/1092. Dataloading: 0.0091 s/iter. Inference: 0.4520 s/iter. Eval: 0.1798 s/iter. Total: 0.6410 s/iter. ETA=0:08:15
[02/18 03:22:30] mask2former INFO: Inference done 328/1092. Dataloading: 0.0091 s/iter. Inference: 0.4518 s/iter. Eval: 0.1800 s/iter. Total: 0.6410 s/iter. ETA=0:08:09
[02/18 03:22:35] mask2former INFO: Inference done 336/1092. Dataloading: 0.0091 s/iter. Inference: 0.4522 s/iter. Eval: 0.1801 s/iter. Total: 0.6415 s/iter. ETA=0:08:04
[02/18 03:22:40] mask2former INFO: Inference done 344/1092. Dataloading: 0.0092 s/iter. Inference: 0.4526 s/iter. Eval: 0.1799 s/iter. Total: 0.6419 s/iter. ETA=0:08:00
[02/18 03:22:46] mask2former INFO: Inference done 353/1092. Dataloading: 0.0091 s/iter. Inference: 0.4514 s/iter. Eval: 0.1796 s/iter. Total: 0.6403 s/iter. ETA=0:07:53
[02/18 03:22:51] mask2former INFO: Inference done 361/1092. Dataloading: 0.0091 s/iter. Inference: 0.4520 s/iter. Eval: 0.1795 s/iter. Total: 0.6408 s/iter. ETA=0:07:48
[02/18 03:22:56] mask2former INFO: Inference done 369/1092. Dataloading: 0.0091 s/iter. Inference: 0.4517 s/iter. Eval: 0.1795 s/iter. Total: 0.6405 s/iter. ETA=0:07:43
[02/18 03:23:01] mask2former INFO: Inference done 378/1092. Dataloading: 0.0090 s/iter. Inference: 0.4512 s/iter. Eval: 0.1790 s/iter. Total: 0.6393 s/iter. ETA=0:07:36
[02/18 03:23:07] mask2former INFO: Inference done 386/1092. Dataloading: 0.0090 s/iter. Inference: 0.4514 s/iter. Eval: 0.1794 s/iter. Total: 0.6400 s/iter. ETA=0:07:31
[02/18 03:23:12] mask2former INFO: Inference done 394/1092. Dataloading: 0.0091 s/iter. Inference: 0.4511 s/iter. Eval: 0.1795 s/iter. Total: 0.6398 s/iter. ETA=0:07:26
[02/18 03:23:17] mask2former INFO: Inference done 402/1092. Dataloading: 0.0091 s/iter. Inference: 0.4514 s/iter. Eval: 0.1797 s/iter. Total: 0.6404 s/iter. ETA=0:07:21
[02/18 03:23:23] mask2former INFO: Inference done 410/1092. Dataloading: 0.0091 s/iter. Inference: 0.4518 s/iter. Eval: 0.1801 s/iter. Total: 0.6412 s/iter. ETA=0:07:17
[02/18 03:23:28] mask2former INFO: Inference done 419/1092. Dataloading: 0.0091 s/iter. Inference: 0.4507 s/iter. Eval: 0.1797 s/iter. Total: 0.6396 s/iter. ETA=0:07:10
[02/18 03:23:33] mask2former INFO: Inference done 428/1092. Dataloading: 0.0090 s/iter. Inference: 0.4502 s/iter. Eval: 0.1791 s/iter. Total: 0.6385 s/iter. ETA=0:07:03
[02/18 03:23:39] mask2former INFO: Inference done 437/1092. Dataloading: 0.0090 s/iter. Inference: 0.4500 s/iter. Eval: 0.1790 s/iter. Total: 0.6382 s/iter. ETA=0:06:58
[02/18 03:23:44] mask2former INFO: Inference done 444/1092. Dataloading: 0.0090 s/iter. Inference: 0.4507 s/iter. Eval: 0.1799 s/iter. Total: 0.6398 s/iter. ETA=0:06:54
[02/18 03:23:49] mask2former INFO: Inference done 453/1092. Dataloading: 0.0091 s/iter. Inference: 0.4507 s/iter. Eval: 0.1794 s/iter. Total: 0.6394 s/iter. ETA=0:06:48
[02/18 03:23:55] mask2former INFO: Inference done 462/1092. Dataloading: 0.0091 s/iter. Inference: 0.4506 s/iter. Eval: 0.1790 s/iter. Total: 0.6389 s/iter. ETA=0:06:42
[02/18 03:24:00] mask2former INFO: Inference done 471/1092. Dataloading: 0.0090 s/iter. Inference: 0.4504 s/iter. Eval: 0.1783 s/iter. Total: 0.6379 s/iter. ETA=0:06:36
[02/18 03:24:05] mask2former INFO: Inference done 479/1092. Dataloading: 0.0090 s/iter. Inference: 0.4501 s/iter. Eval: 0.1785 s/iter. Total: 0.6378 s/iter. ETA=0:06:30
[02/18 03:24:11] mask2former INFO: Inference done 488/1092. Dataloading: 0.0090 s/iter. Inference: 0.4501 s/iter. Eval: 0.1783 s/iter. Total: 0.6375 s/iter. ETA=0:06:25
[02/18 03:24:16] mask2former INFO: Inference done 496/1092. Dataloading: 0.0090 s/iter. Inference: 0.4497 s/iter. Eval: 0.1788 s/iter. Total: 0.6377 s/iter. ETA=0:06:20
[02/18 03:24:22] mask2former INFO: Inference done 505/1092. Dataloading: 0.0089 s/iter. Inference: 0.4493 s/iter. Eval: 0.1791 s/iter. Total: 0.6376 s/iter. ETA=0:06:14
[02/18 03:24:27] mask2former INFO: Inference done 513/1092. Dataloading: 0.0090 s/iter. Inference: 0.4490 s/iter. Eval: 0.1798 s/iter. Total: 0.6379 s/iter. ETA=0:06:09
[02/18 03:24:33] mask2former INFO: Inference done 522/1092. Dataloading: 0.0090 s/iter. Inference: 0.4488 s/iter. Eval: 0.1796 s/iter. Total: 0.6376 s/iter. ETA=0:06:03
[02/18 03:24:38] mask2former INFO: Inference done 531/1092. Dataloading: 0.0090 s/iter. Inference: 0.4485 s/iter. Eval: 0.1791 s/iter. Total: 0.6368 s/iter. ETA=0:05:57
[02/18 03:24:43] mask2former INFO: Inference done 539/1092. Dataloading: 0.0090 s/iter. Inference: 0.4485 s/iter. Eval: 0.1797 s/iter. Total: 0.6374 s/iter. ETA=0:05:52
[02/18 03:24:48] mask2former INFO: Inference done 547/1092. Dataloading: 0.0090 s/iter. Inference: 0.4488 s/iter. Eval: 0.1797 s/iter. Total: 0.6377 s/iter. ETA=0:05:47
[02/18 03:24:54] mask2former INFO: Inference done 556/1092. Dataloading: 0.0090 s/iter. Inference: 0.4486 s/iter. Eval: 0.1795 s/iter. Total: 0.6373 s/iter. ETA=0:05:41
[02/18 03:24:59] mask2former INFO: Inference done 564/1092. Dataloading: 0.0090 s/iter. Inference: 0.4490 s/iter. Eval: 0.1797 s/iter. Total: 0.6379 s/iter. ETA=0:05:36
[02/18 03:25:05] mask2former INFO: Inference done 572/1092. Dataloading: 0.0090 s/iter. Inference: 0.4494 s/iter. Eval: 0.1794 s/iter. Total: 0.6381 s/iter. ETA=0:05:31
[02/18 03:25:10] mask2former INFO: Inference done 580/1092. Dataloading: 0.0090 s/iter. Inference: 0.4494 s/iter. Eval: 0.1794 s/iter. Total: 0.6381 s/iter. ETA=0:05:26
[02/18 03:25:15] mask2former INFO: Inference done 589/1092. Dataloading: 0.0090 s/iter. Inference: 0.4491 s/iter. Eval: 0.1792 s/iter. Total: 0.6375 s/iter. ETA=0:05:20
[02/18 03:25:20] mask2former INFO: Inference done 597/1092. Dataloading: 0.0090 s/iter. Inference: 0.4493 s/iter. Eval: 0.1791 s/iter. Total: 0.6376 s/iter. ETA=0:05:15
[02/18 03:25:26] mask2former INFO: Inference done 606/1092. Dataloading: 0.0090 s/iter. Inference: 0.4492 s/iter. Eval: 0.1786 s/iter. Total: 0.6369 s/iter. ETA=0:05:09
[02/18 03:25:31] mask2former INFO: Inference done 615/1092. Dataloading: 0.0089 s/iter. Inference: 0.4489 s/iter. Eval: 0.1783 s/iter. Total: 0.6363 s/iter. ETA=0:05:03
[02/18 03:25:36] mask2former INFO: Inference done 623/1092. Dataloading: 0.0090 s/iter. Inference: 0.4488 s/iter. Eval: 0.1782 s/iter. Total: 0.6363 s/iter. ETA=0:04:58
[02/18 03:25:41] mask2former INFO: Inference done 631/1092. Dataloading: 0.0090 s/iter. Inference: 0.4489 s/iter. Eval: 0.1783 s/iter. Total: 0.6364 s/iter. ETA=0:04:53
[02/18 03:25:47] mask2former INFO: Inference done 640/1092. Dataloading: 0.0090 s/iter. Inference: 0.4483 s/iter. Eval: 0.1784 s/iter. Total: 0.6359 s/iter. ETA=0:04:47
[02/18 03:25:52] mask2former INFO: Inference done 648/1092. Dataloading: 0.0090 s/iter. Inference: 0.4485 s/iter. Eval: 0.1781 s/iter. Total: 0.6359 s/iter. ETA=0:04:42
[02/18 03:25:57] mask2former INFO: Inference done 656/1092. Dataloading: 0.0091 s/iter. Inference: 0.4485 s/iter. Eval: 0.1781 s/iter. Total: 0.6358 s/iter. ETA=0:04:37
[02/18 03:26:02] mask2former INFO: Inference done 665/1092. Dataloading: 0.0090 s/iter. Inference: 0.4483 s/iter. Eval: 0.1780 s/iter. Total: 0.6355 s/iter. ETA=0:04:31
[02/18 03:26:07] mask2former INFO: Inference done 673/1092. Dataloading: 0.0091 s/iter. Inference: 0.4483 s/iter. Eval: 0.1779 s/iter. Total: 0.6356 s/iter. ETA=0:04:26
[02/18 03:26:13] mask2former INFO: Inference done 682/1092. Dataloading: 0.0091 s/iter. Inference: 0.4482 s/iter. Eval: 0.1777 s/iter. Total: 0.6352 s/iter. ETA=0:04:20
[02/18 03:26:19] mask2former INFO: Inference done 691/1092. Dataloading: 0.0091 s/iter. Inference: 0.4483 s/iter. Eval: 0.1775 s/iter. Total: 0.6351 s/iter. ETA=0:04:14
[02/18 03:26:24] mask2former INFO: Inference done 699/1092. Dataloading: 0.0091 s/iter. Inference: 0.4488 s/iter. Eval: 0.1776 s/iter. Total: 0.6357 s/iter. ETA=0:04:09
[02/18 03:26:29] mask2former INFO: Inference done 708/1092. Dataloading: 0.0090 s/iter. Inference: 0.4487 s/iter. Eval: 0.1773 s/iter. Total: 0.6352 s/iter. ETA=0:04:03
[02/18 03:26:35] mask2former INFO: Inference done 716/1092. Dataloading: 0.0091 s/iter. Inference: 0.4487 s/iter. Eval: 0.1773 s/iter. Total: 0.6353 s/iter. ETA=0:03:58
[02/18 03:26:40] mask2former INFO: Inference done 725/1092. Dataloading: 0.0091 s/iter. Inference: 0.4484 s/iter. Eval: 0.1776 s/iter. Total: 0.6353 s/iter. ETA=0:03:53
[02/18 03:26:46] mask2former INFO: Inference done 734/1092. Dataloading: 0.0091 s/iter. Inference: 0.4479 s/iter. Eval: 0.1778 s/iter. Total: 0.6349 s/iter. ETA=0:03:47
[02/18 03:26:51] mask2former INFO: Inference done 742/1092. Dataloading: 0.0091 s/iter. Inference: 0.4480 s/iter. Eval: 0.1776 s/iter. Total: 0.6349 s/iter. ETA=0:03:42
[02/18 03:26:56] mask2former INFO: Inference done 751/1092. Dataloading: 0.0090 s/iter. Inference: 0.4478 s/iter. Eval: 0.1773 s/iter. Total: 0.6343 s/iter. ETA=0:03:36
[02/18 03:27:01] mask2former INFO: Inference done 760/1092. Dataloading: 0.0090 s/iter. Inference: 0.4474 s/iter. Eval: 0.1772 s/iter. Total: 0.6338 s/iter. ETA=0:03:30
[02/18 03:27:07] mask2former INFO: Inference done 768/1092. Dataloading: 0.0091 s/iter. Inference: 0.4473 s/iter. Eval: 0.1774 s/iter. Total: 0.6340 s/iter. ETA=0:03:25
[02/18 03:27:12] mask2former INFO: Inference done 777/1092. Dataloading: 0.0091 s/iter. Inference: 0.4470 s/iter. Eval: 0.1774 s/iter. Total: 0.6336 s/iter. ETA=0:03:19
[02/18 03:27:18] mask2former INFO: Inference done 786/1092. Dataloading: 0.0091 s/iter. Inference: 0.4467 s/iter. Eval: 0.1774 s/iter. Total: 0.6334 s/iter. ETA=0:03:13
[02/18 03:27:23] mask2former INFO: Inference done 795/1092. Dataloading: 0.0090 s/iter. Inference: 0.4466 s/iter. Eval: 0.1771 s/iter. Total: 0.6330 s/iter. ETA=0:03:07
[02/18 03:27:28] mask2former INFO: Inference done 803/1092. Dataloading: 0.0090 s/iter. Inference: 0.4464 s/iter. Eval: 0.1775 s/iter. Total: 0.6332 s/iter. ETA=0:03:02
[02/18 03:27:33] mask2former INFO: Inference done 811/1092. Dataloading: 0.0090 s/iter. Inference: 0.4466 s/iter. Eval: 0.1774 s/iter. Total: 0.6332 s/iter. ETA=0:02:57
[02/18 03:27:38] mask2former INFO: Inference done 819/1092. Dataloading: 0.0091 s/iter. Inference: 0.4467 s/iter. Eval: 0.1774 s/iter. Total: 0.6334 s/iter. ETA=0:02:52
[02/18 03:27:44] mask2former INFO: Inference done 827/1092. Dataloading: 0.0091 s/iter. Inference: 0.4466 s/iter. Eval: 0.1776 s/iter. Total: 0.6335 s/iter. ETA=0:02:47
[02/18 03:27:49] mask2former INFO: Inference done 835/1092. Dataloading: 0.0091 s/iter. Inference: 0.4467 s/iter. Eval: 0.1778 s/iter. Total: 0.6337 s/iter. ETA=0:02:42
[02/18 03:27:54] mask2former INFO: Inference done 844/1092. Dataloading: 0.0093 s/iter. Inference: 0.4461 s/iter. Eval: 0.1778 s/iter. Total: 0.6334 s/iter. ETA=0:02:37
[02/18 03:28:00] mask2former INFO: Inference done 852/1092. Dataloading: 0.0092 s/iter. Inference: 0.4463 s/iter. Eval: 0.1780 s/iter. Total: 0.6337 s/iter. ETA=0:02:32
[02/18 03:28:05] mask2former INFO: Inference done 861/1092. Dataloading: 0.0093 s/iter. Inference: 0.4462 s/iter. Eval: 0.1779 s/iter. Total: 0.6335 s/iter. ETA=0:02:26
[02/18 03:28:10] mask2former INFO: Inference done 869/1092. Dataloading: 0.0092 s/iter. Inference: 0.4461 s/iter. Eval: 0.1780 s/iter. Total: 0.6336 s/iter. ETA=0:02:21
[02/18 03:28:16] mask2former INFO: Inference done 877/1092. Dataloading: 0.0092 s/iter. Inference: 0.4463 s/iter. Eval: 0.1780 s/iter. Total: 0.6338 s/iter. ETA=0:02:16
[02/18 03:28:21] mask2former INFO: Inference done 884/1092. Dataloading: 0.0092 s/iter. Inference: 0.4470 s/iter. Eval: 0.1782 s/iter. Total: 0.6346 s/iter. ETA=0:02:11
[02/18 03:28:26] mask2former INFO: Inference done 893/1092. Dataloading: 0.0092 s/iter. Inference: 0.4468 s/iter. Eval: 0.1781 s/iter. Total: 0.6343 s/iter. ETA=0:02:06
[02/18 03:28:32] mask2former INFO: Inference done 903/1092. Dataloading: 0.0092 s/iter. Inference: 0.4464 s/iter. Eval: 0.1777 s/iter. Total: 0.6335 s/iter. ETA=0:01:59
[02/18 03:28:37] mask2former INFO: Inference done 911/1092. Dataloading: 0.0092 s/iter. Inference: 0.4469 s/iter. Eval: 0.1778 s/iter. Total: 0.6340 s/iter. ETA=0:01:54
[02/18 03:28:43] mask2former INFO: Inference done 920/1092. Dataloading: 0.0092 s/iter. Inference: 0.4470 s/iter. Eval: 0.1776 s/iter. Total: 0.6340 s/iter. ETA=0:01:49
[02/18 03:28:49] mask2former INFO: Inference done 929/1092. Dataloading: 0.0092 s/iter. Inference: 0.4468 s/iter. Eval: 0.1777 s/iter. Total: 0.6338 s/iter. ETA=0:01:43
[02/18 03:28:54] mask2former INFO: Inference done 937/1092. Dataloading: 0.0092 s/iter. Inference: 0.4469 s/iter. Eval: 0.1778 s/iter. Total: 0.6340 s/iter. ETA=0:01:38
[02/18 03:28:59] mask2former INFO: Inference done 945/1092. Dataloading: 0.0092 s/iter. Inference: 0.4472 s/iter. Eval: 0.1778 s/iter. Total: 0.6343 s/iter. ETA=0:01:33
[02/18 03:29:05] mask2former INFO: Inference done 953/1092. Dataloading: 0.0092 s/iter. Inference: 0.4475 s/iter. Eval: 0.1781 s/iter. Total: 0.6349 s/iter. ETA=0:01:28
[02/18 03:29:10] mask2former INFO: Inference done 962/1092. Dataloading: 0.0092 s/iter. Inference: 0.4473 s/iter. Eval: 0.1781 s/iter. Total: 0.6348 s/iter. ETA=0:01:22
[02/18 03:29:16] mask2former INFO: Inference done 971/1092. Dataloading: 0.0092 s/iter. Inference: 0.4471 s/iter. Eval: 0.1780 s/iter. Total: 0.6345 s/iter. ETA=0:01:16
[02/18 03:29:21] mask2former INFO: Inference done 979/1092. Dataloading: 0.0092 s/iter. Inference: 0.4474 s/iter. Eval: 0.1781 s/iter. Total: 0.6348 s/iter. ETA=0:01:11
[02/18 03:29:27] mask2former INFO: Inference done 987/1092. Dataloading: 0.0092 s/iter. Inference: 0.4474 s/iter. Eval: 0.1784 s/iter. Total: 0.6352 s/iter. ETA=0:01:06
[02/18 03:29:32] mask2former INFO: Inference done 995/1092. Dataloading: 0.0092 s/iter. Inference: 0.4475 s/iter. Eval: 0.1788 s/iter. Total: 0.6357 s/iter. ETA=0:01:01
[02/18 03:29:38] mask2former INFO: Inference done 1004/1092. Dataloading: 0.0092 s/iter. Inference: 0.4473 s/iter. Eval: 0.1786 s/iter. Total: 0.6353 s/iter. ETA=0:00:55
[02/18 03:29:43] mask2former INFO: Inference done 1013/1092. Dataloading: 0.0092 s/iter. Inference: 0.4475 s/iter. Eval: 0.1785 s/iter. Total: 0.6353 s/iter. ETA=0:00:50
[02/18 03:29:48] mask2former INFO: Inference done 1021/1092. Dataloading: 0.0092 s/iter. Inference: 0.4475 s/iter. Eval: 0.1784 s/iter. Total: 0.6353 s/iter. ETA=0:00:45
[02/18 03:29:54] mask2former INFO: Inference done 1029/1092. Dataloading: 0.0092 s/iter. Inference: 0.4477 s/iter. Eval: 0.1784 s/iter. Total: 0.6354 s/iter. ETA=0:00:40
[02/18 03:29:59] mask2former INFO: Inference done 1037/1092. Dataloading: 0.0092 s/iter. Inference: 0.4479 s/iter. Eval: 0.1784 s/iter. Total: 0.6357 s/iter. ETA=0:00:34
[02/18 03:30:04] mask2former INFO: Inference done 1045/1092. Dataloading: 0.0091 s/iter. Inference: 0.4478 s/iter. Eval: 0.1785 s/iter. Total: 0.6356 s/iter. ETA=0:00:29
[02/18 03:30:09] mask2former INFO: Inference done 1053/1092. Dataloading: 0.0091 s/iter. Inference: 0.4481 s/iter. Eval: 0.1783 s/iter. Total: 0.6357 s/iter. ETA=0:00:24
[02/18 03:30:14] mask2former INFO: Inference done 1062/1092. Dataloading: 0.0091 s/iter. Inference: 0.4478 s/iter. Eval: 0.1781 s/iter. Total: 0.6353 s/iter. ETA=0:00:19
[02/18 03:30:20] mask2former INFO: Inference done 1071/1092. Dataloading: 0.0091 s/iter. Inference: 0.4476 s/iter. Eval: 0.1779 s/iter. Total: 0.6348 s/iter. ETA=0:00:13
[02/18 03:30:25] mask2former INFO: Inference done 1079/1092. Dataloading: 0.0091 s/iter. Inference: 0.4476 s/iter. Eval: 0.1783 s/iter. Total: 0.6352 s/iter. ETA=0:00:08
[02/18 03:30:30] mask2former INFO: Inference done 1087/1092. Dataloading: 0.0091 s/iter. Inference: 0.4475 s/iter. Eval: 0.1787 s/iter. Total: 0.6354 s/iter. ETA=0:00:03
[02/18 04:42:56] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 04:42:57] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 04:42:57] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 04:43:12] mask2former INFO: Inference done 11/1092. Dataloading: 0.0075 s/iter. Inference: 0.2654 s/iter. Eval: 0.1201 s/iter. Total: 0.3930 s/iter. ETA=0:07:04
[02/18 04:43:17] mask2former INFO: Inference done 25/1092. Dataloading: 0.0068 s/iter. Inference: 0.2561 s/iter. Eval: 0.1187 s/iter. Total: 0.3817 s/iter. ETA=0:06:47
[02/18 04:43:22] mask2former INFO: Inference done 39/1092. Dataloading: 0.0064 s/iter. Inference: 0.2520 s/iter. Eval: 0.1213 s/iter. Total: 0.3798 s/iter. ETA=0:06:39
[02/18 04:43:27] mask2former INFO: Inference done 53/1092. Dataloading: 0.0066 s/iter. Inference: 0.2491 s/iter. Eval: 0.1211 s/iter. Total: 0.3768 s/iter. ETA=0:06:31
[02/18 04:43:33] mask2former INFO: Inference done 66/1092. Dataloading: 0.0067 s/iter. Inference: 0.2525 s/iter. Eval: 0.1227 s/iter. Total: 0.3820 s/iter. ETA=0:06:31
[02/18 04:43:38] mask2former INFO: Inference done 80/1092. Dataloading: 0.0066 s/iter. Inference: 0.2532 s/iter. Eval: 0.1223 s/iter. Total: 0.3822 s/iter. ETA=0:06:26
[02/18 04:43:43] mask2former INFO: Inference done 94/1092. Dataloading: 0.0065 s/iter. Inference: 0.2515 s/iter. Eval: 0.1222 s/iter. Total: 0.3803 s/iter. ETA=0:06:19
[02/18 04:43:48] mask2former INFO: Inference done 107/1092. Dataloading: 0.0064 s/iter. Inference: 0.2521 s/iter. Eval: 0.1228 s/iter. Total: 0.3813 s/iter. ETA=0:06:15
[02/18 04:43:53] mask2former INFO: Inference done 120/1092. Dataloading: 0.0066 s/iter. Inference: 0.2524 s/iter. Eval: 0.1233 s/iter. Total: 0.3824 s/iter. ETA=0:06:11
[02/18 04:43:58] mask2former INFO: Inference done 134/1092. Dataloading: 0.0073 s/iter. Inference: 0.2503 s/iter. Eval: 0.1226 s/iter. Total: 0.3802 s/iter. ETA=0:06:04
[02/18 04:44:04] mask2former INFO: Inference done 149/1092. Dataloading: 0.0071 s/iter. Inference: 0.2486 s/iter. Eval: 0.1211 s/iter. Total: 0.3768 s/iter. ETA=0:05:55
[02/18 04:44:09] mask2former INFO: Inference done 163/1092. Dataloading: 0.0069 s/iter. Inference: 0.2478 s/iter. Eval: 0.1210 s/iter. Total: 0.3758 s/iter. ETA=0:05:49
[02/18 04:44:14] mask2former INFO: Inference done 177/1092. Dataloading: 0.0068 s/iter. Inference: 0.2475 s/iter. Eval: 0.1219 s/iter. Total: 0.3764 s/iter. ETA=0:05:44
[02/18 04:44:19] mask2former INFO: Inference done 191/1092. Dataloading: 0.0068 s/iter. Inference: 0.2475 s/iter. Eval: 0.1219 s/iter. Total: 0.3763 s/iter. ETA=0:05:39
[02/18 04:44:24] mask2former INFO: Inference done 205/1092. Dataloading: 0.0068 s/iter. Inference: 0.2465 s/iter. Eval: 0.1220 s/iter. Total: 0.3754 s/iter. ETA=0:05:32
[02/18 04:44:29] mask2former INFO: Inference done 219/1092. Dataloading: 0.0068 s/iter. Inference: 0.2466 s/iter. Eval: 0.1213 s/iter. Total: 0.3748 s/iter. ETA=0:05:27
[02/18 04:44:35] mask2former INFO: Inference done 233/1092. Dataloading: 0.0067 s/iter. Inference: 0.2467 s/iter. Eval: 0.1206 s/iter. Total: 0.3741 s/iter. ETA=0:05:21
[02/18 04:44:40] mask2former INFO: Inference done 246/1092. Dataloading: 0.0067 s/iter. Inference: 0.2477 s/iter. Eval: 0.1214 s/iter. Total: 0.3759 s/iter. ETA=0:05:18
[02/18 04:44:45] mask2former INFO: Inference done 260/1092. Dataloading: 0.0066 s/iter. Inference: 0.2472 s/iter. Eval: 0.1213 s/iter. Total: 0.3751 s/iter. ETA=0:05:12
[02/18 04:44:50] mask2former INFO: Inference done 274/1092. Dataloading: 0.0067 s/iter. Inference: 0.2470 s/iter. Eval: 0.1208 s/iter. Total: 0.3746 s/iter. ETA=0:05:06
[02/18 04:44:55] mask2former INFO: Inference done 288/1092. Dataloading: 0.0068 s/iter. Inference: 0.2468 s/iter. Eval: 0.1207 s/iter. Total: 0.3744 s/iter. ETA=0:05:01
[02/18 04:45:00] mask2former INFO: Inference done 301/1092. Dataloading: 0.0068 s/iter. Inference: 0.2474 s/iter. Eval: 0.1209 s/iter. Total: 0.3752 s/iter. ETA=0:04:56
[02/18 04:45:06] mask2former INFO: Inference done 315/1092. Dataloading: 0.0068 s/iter. Inference: 0.2473 s/iter. Eval: 0.1210 s/iter. Total: 0.3752 s/iter. ETA=0:04:51
[02/18 04:45:11] mask2former INFO: Inference done 329/1092. Dataloading: 0.0068 s/iter. Inference: 0.2470 s/iter. Eval: 0.1215 s/iter. Total: 0.3754 s/iter. ETA=0:04:46
[02/18 04:45:16] mask2former INFO: Inference done 344/1092. Dataloading: 0.0067 s/iter. Inference: 0.2469 s/iter. Eval: 0.1207 s/iter. Total: 0.3744 s/iter. ETA=0:04:40
[02/18 04:45:21] mask2former INFO: Inference done 358/1092. Dataloading: 0.0068 s/iter. Inference: 0.2470 s/iter. Eval: 0.1200 s/iter. Total: 0.3739 s/iter. ETA=0:04:34
[02/18 04:45:27] mask2former INFO: Inference done 372/1092. Dataloading: 0.0068 s/iter. Inference: 0.2475 s/iter. Eval: 0.1197 s/iter. Total: 0.3740 s/iter. ETA=0:04:29
[02/18 04:45:32] mask2former INFO: Inference done 386/1092. Dataloading: 0.0068 s/iter. Inference: 0.2472 s/iter. Eval: 0.1193 s/iter. Total: 0.3734 s/iter. ETA=0:04:23
[02/18 04:45:37] mask2former INFO: Inference done 400/1092. Dataloading: 0.0068 s/iter. Inference: 0.2469 s/iter. Eval: 0.1194 s/iter. Total: 0.3731 s/iter. ETA=0:04:18
[02/18 04:45:42] mask2former INFO: Inference done 414/1092. Dataloading: 0.0067 s/iter. Inference: 0.2470 s/iter. Eval: 0.1193 s/iter. Total: 0.3732 s/iter. ETA=0:04:13
[02/18 04:45:47] mask2former INFO: Inference done 428/1092. Dataloading: 0.0067 s/iter. Inference: 0.2475 s/iter. Eval: 0.1193 s/iter. Total: 0.3737 s/iter. ETA=0:04:08
[02/18 04:45:52] mask2former INFO: Inference done 442/1092. Dataloading: 0.0067 s/iter. Inference: 0.2470 s/iter. Eval: 0.1196 s/iter. Total: 0.3734 s/iter. ETA=0:04:02
[02/18 04:45:58] mask2former INFO: Inference done 456/1092. Dataloading: 0.0067 s/iter. Inference: 0.2471 s/iter. Eval: 0.1195 s/iter. Total: 0.3734 s/iter. ETA=0:03:57
[02/18 04:46:03] mask2former INFO: Inference done 471/1092. Dataloading: 0.0066 s/iter. Inference: 0.2470 s/iter. Eval: 0.1186 s/iter. Total: 0.3724 s/iter. ETA=0:03:51
[02/18 04:46:08] mask2former INFO: Inference done 485/1092. Dataloading: 0.0066 s/iter. Inference: 0.2467 s/iter. Eval: 0.1187 s/iter. Total: 0.3721 s/iter. ETA=0:03:45
[02/18 04:46:13] mask2former INFO: Inference done 499/1092. Dataloading: 0.0066 s/iter. Inference: 0.2467 s/iter. Eval: 0.1186 s/iter. Total: 0.3721 s/iter. ETA=0:03:40
[02/18 04:46:18] mask2former INFO: Inference done 513/1092. Dataloading: 0.0066 s/iter. Inference: 0.2465 s/iter. Eval: 0.1187 s/iter. Total: 0.3718 s/iter. ETA=0:03:35
[02/18 04:46:23] mask2former INFO: Inference done 527/1092. Dataloading: 0.0066 s/iter. Inference: 0.2464 s/iter. Eval: 0.1188 s/iter. Total: 0.3719 s/iter. ETA=0:03:30
[02/18 04:46:29] mask2former INFO: Inference done 541/1092. Dataloading: 0.0065 s/iter. Inference: 0.2461 s/iter. Eval: 0.1190 s/iter. Total: 0.3717 s/iter. ETA=0:03:24
[02/18 04:46:34] mask2former INFO: Inference done 555/1092. Dataloading: 0.0065 s/iter. Inference: 0.2462 s/iter. Eval: 0.1187 s/iter. Total: 0.3715 s/iter. ETA=0:03:19
[02/18 04:46:39] mask2former INFO: Inference done 568/1092. Dataloading: 0.0065 s/iter. Inference: 0.2463 s/iter. Eval: 0.1191 s/iter. Total: 0.3720 s/iter. ETA=0:03:14
[02/18 04:46:44] mask2former INFO: Inference done 581/1092. Dataloading: 0.0065 s/iter. Inference: 0.2468 s/iter. Eval: 0.1194 s/iter. Total: 0.3727 s/iter. ETA=0:03:10
[02/18 04:46:49] mask2former INFO: Inference done 595/1092. Dataloading: 0.0065 s/iter. Inference: 0.2471 s/iter. Eval: 0.1191 s/iter. Total: 0.3728 s/iter. ETA=0:03:05
[02/18 04:46:55] mask2former INFO: Inference done 609/1092. Dataloading: 0.0065 s/iter. Inference: 0.2472 s/iter. Eval: 0.1191 s/iter. Total: 0.3729 s/iter. ETA=0:03:00
[02/18 04:47:00] mask2former INFO: Inference done 623/1092. Dataloading: 0.0065 s/iter. Inference: 0.2473 s/iter. Eval: 0.1190 s/iter. Total: 0.3728 s/iter. ETA=0:02:54
[02/18 04:47:05] mask2former INFO: Inference done 637/1092. Dataloading: 0.0064 s/iter. Inference: 0.2472 s/iter. Eval: 0.1188 s/iter. Total: 0.3725 s/iter. ETA=0:02:49
[02/18 04:47:10] mask2former INFO: Inference done 651/1092. Dataloading: 0.0065 s/iter. Inference: 0.2471 s/iter. Eval: 0.1192 s/iter. Total: 0.3728 s/iter. ETA=0:02:44
[02/18 04:47:15] mask2former INFO: Inference done 666/1092. Dataloading: 0.0064 s/iter. Inference: 0.2469 s/iter. Eval: 0.1189 s/iter. Total: 0.3724 s/iter. ETA=0:02:38
[02/18 04:47:21] mask2former INFO: Inference done 680/1092. Dataloading: 0.0064 s/iter. Inference: 0.2468 s/iter. Eval: 0.1189 s/iter. Total: 0.3722 s/iter. ETA=0:02:33
[02/18 04:47:26] mask2former INFO: Inference done 695/1092. Dataloading: 0.0064 s/iter. Inference: 0.2465 s/iter. Eval: 0.1187 s/iter. Total: 0.3717 s/iter. ETA=0:02:27
[02/18 04:47:31] mask2former INFO: Inference done 710/1092. Dataloading: 0.0064 s/iter. Inference: 0.2462 s/iter. Eval: 0.1187 s/iter. Total: 0.3713 s/iter. ETA=0:02:21
[02/18 04:47:36] mask2former INFO: Inference done 724/1092. Dataloading: 0.0064 s/iter. Inference: 0.2461 s/iter. Eval: 0.1187 s/iter. Total: 0.3712 s/iter. ETA=0:02:16
[02/18 04:47:42] mask2former INFO: Inference done 738/1092. Dataloading: 0.0064 s/iter. Inference: 0.2463 s/iter. Eval: 0.1187 s/iter. Total: 0.3715 s/iter. ETA=0:02:11
[02/18 04:47:47] mask2former INFO: Inference done 753/1092. Dataloading: 0.0064 s/iter. Inference: 0.2460 s/iter. Eval: 0.1187 s/iter. Total: 0.3711 s/iter. ETA=0:02:05
[02/18 04:47:52] mask2former INFO: Inference done 766/1092. Dataloading: 0.0064 s/iter. Inference: 0.2459 s/iter. Eval: 0.1190 s/iter. Total: 0.3714 s/iter. ETA=0:02:01
[02/18 04:47:57] mask2former INFO: Inference done 780/1092. Dataloading: 0.0065 s/iter. Inference: 0.2459 s/iter. Eval: 0.1188 s/iter. Total: 0.3713 s/iter. ETA=0:01:55
[02/18 04:48:02] mask2former INFO: Inference done 794/1092. Dataloading: 0.0066 s/iter. Inference: 0.2461 s/iter. Eval: 0.1188 s/iter. Total: 0.3715 s/iter. ETA=0:01:50
[02/18 04:48:08] mask2former INFO: Inference done 808/1092. Dataloading: 0.0065 s/iter. Inference: 0.2460 s/iter. Eval: 0.1188 s/iter. Total: 0.3714 s/iter. ETA=0:01:45
[02/18 04:48:13] mask2former INFO: Inference done 821/1092. Dataloading: 0.0065 s/iter. Inference: 0.2461 s/iter. Eval: 0.1190 s/iter. Total: 0.3717 s/iter. ETA=0:01:40
[02/18 04:48:18] mask2former INFO: Inference done 835/1092. Dataloading: 0.0065 s/iter. Inference: 0.2460 s/iter. Eval: 0.1190 s/iter. Total: 0.3716 s/iter. ETA=0:01:35
[02/18 04:48:23] mask2former INFO: Inference done 849/1092. Dataloading: 0.0065 s/iter. Inference: 0.2461 s/iter. Eval: 0.1189 s/iter. Total: 0.3716 s/iter. ETA=0:01:30
[02/18 04:48:28] mask2former INFO: Inference done 863/1092. Dataloading: 0.0065 s/iter. Inference: 0.2460 s/iter. Eval: 0.1192 s/iter. Total: 0.3717 s/iter. ETA=0:01:25
[02/18 04:48:33] mask2former INFO: Inference done 877/1092. Dataloading: 0.0065 s/iter. Inference: 0.2457 s/iter. Eval: 0.1195 s/iter. Total: 0.3717 s/iter. ETA=0:01:19
[02/18 04:48:39] mask2former INFO: Inference done 890/1092. Dataloading: 0.0065 s/iter. Inference: 0.2459 s/iter. Eval: 0.1196 s/iter. Total: 0.3721 s/iter. ETA=0:01:15
[02/18 04:48:44] mask2former INFO: Inference done 904/1092. Dataloading: 0.0065 s/iter. Inference: 0.2458 s/iter. Eval: 0.1197 s/iter. Total: 0.3721 s/iter. ETA=0:01:09
[02/18 04:48:49] mask2former INFO: Inference done 917/1092. Dataloading: 0.0065 s/iter. Inference: 0.2460 s/iter. Eval: 0.1198 s/iter. Total: 0.3724 s/iter. ETA=0:01:05
[02/18 04:48:54] mask2former INFO: Inference done 931/1092. Dataloading: 0.0065 s/iter. Inference: 0.2460 s/iter. Eval: 0.1197 s/iter. Total: 0.3722 s/iter. ETA=0:00:59
[02/18 04:48:59] mask2former INFO: Inference done 946/1092. Dataloading: 0.0065 s/iter. Inference: 0.2457 s/iter. Eval: 0.1195 s/iter. Total: 0.3718 s/iter. ETA=0:00:54
[02/18 04:49:04] mask2former INFO: Inference done 960/1092. Dataloading: 0.0065 s/iter. Inference: 0.2457 s/iter. Eval: 0.1194 s/iter. Total: 0.3717 s/iter. ETA=0:00:49
[02/18 04:49:10] mask2former INFO: Inference done 969/1092. Dataloading: 0.0065 s/iter. Inference: 0.2470 s/iter. Eval: 0.1204 s/iter. Total: 0.3740 s/iter. ETA=0:00:46
[02/18 04:49:15] mask2former INFO: Inference done 976/1092. Dataloading: 0.0066 s/iter. Inference: 0.2485 s/iter. Eval: 0.1215 s/iter. Total: 0.3767 s/iter. ETA=0:00:43
[02/18 04:49:20] mask2former INFO: Inference done 984/1092. Dataloading: 0.0066 s/iter. Inference: 0.2498 s/iter. Eval: 0.1225 s/iter. Total: 0.3790 s/iter. ETA=0:00:40
[02/18 04:49:25] mask2former INFO: Inference done 997/1092. Dataloading: 0.0066 s/iter. Inference: 0.2496 s/iter. Eval: 0.1229 s/iter. Total: 0.3791 s/iter. ETA=0:00:36
[02/18 04:49:31] mask2former INFO: Inference done 1007/1092. Dataloading: 0.0067 s/iter. Inference: 0.2502 s/iter. Eval: 0.1238 s/iter. Total: 0.3807 s/iter. ETA=0:00:32
[02/18 04:49:36] mask2former INFO: Inference done 1021/1092. Dataloading: 0.0067 s/iter. Inference: 0.2502 s/iter. Eval: 0.1238 s/iter. Total: 0.3807 s/iter. ETA=0:00:27
[02/18 04:49:41] mask2former INFO: Inference done 1036/1092. Dataloading: 0.0066 s/iter. Inference: 0.2499 s/iter. Eval: 0.1236 s/iter. Total: 0.3802 s/iter. ETA=0:00:21
[02/18 04:49:46] mask2former INFO: Inference done 1050/1092. Dataloading: 0.0066 s/iter. Inference: 0.2497 s/iter. Eval: 0.1234 s/iter. Total: 0.3799 s/iter. ETA=0:00:15
[02/18 04:49:51] mask2former INFO: Inference done 1064/1092. Dataloading: 0.0066 s/iter. Inference: 0.2496 s/iter. Eval: 0.1234 s/iter. Total: 0.3797 s/iter. ETA=0:00:10
[02/18 04:49:57] mask2former INFO: Inference done 1078/1092. Dataloading: 0.0066 s/iter. Inference: 0.2494 s/iter. Eval: 0.1234 s/iter. Total: 0.3795 s/iter. ETA=0:00:05
[02/18 05:59:23] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 05:59:23] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 05:59:23] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 05:59:38] mask2former INFO: Inference done 11/1092. Dataloading: 0.0041 s/iter. Inference: 0.2320 s/iter. Eval: 0.1166 s/iter. Total: 0.3528 s/iter. ETA=0:06:21
[02/18 05:59:43] mask2former INFO: Inference done 26/1092. Dataloading: 0.0049 s/iter. Inference: 0.2343 s/iter. Eval: 0.1141 s/iter. Total: 0.3534 s/iter. ETA=0:06:16
[02/18 05:59:48] mask2former INFO: Inference done 41/1092. Dataloading: 0.0052 s/iter. Inference: 0.2318 s/iter. Eval: 0.1115 s/iter. Total: 0.3485 s/iter. ETA=0:06:06
[02/18 05:59:53] mask2former INFO: Inference done 56/1092. Dataloading: 0.0052 s/iter. Inference: 0.2308 s/iter. Eval: 0.1123 s/iter. Total: 0.3485 s/iter. ETA=0:06:01
[02/18 05:59:59] mask2former INFO: Inference done 71/1092. Dataloading: 0.0054 s/iter. Inference: 0.2332 s/iter. Eval: 0.1113 s/iter. Total: 0.3500 s/iter. ETA=0:05:57
[02/18 06:00:04] mask2former INFO: Inference done 84/1092. Dataloading: 0.0055 s/iter. Inference: 0.2371 s/iter. Eval: 0.1132 s/iter. Total: 0.3559 s/iter. ETA=0:05:58
[02/18 06:00:09] mask2former INFO: Inference done 98/1092. Dataloading: 0.0054 s/iter. Inference: 0.2374 s/iter. Eval: 0.1137 s/iter. Total: 0.3566 s/iter. ETA=0:05:54
[02/18 06:00:14] mask2former INFO: Inference done 112/1092. Dataloading: 0.0054 s/iter. Inference: 0.2374 s/iter. Eval: 0.1154 s/iter. Total: 0.3583 s/iter. ETA=0:05:51
[02/18 06:00:19] mask2former INFO: Inference done 126/1092. Dataloading: 0.0054 s/iter. Inference: 0.2391 s/iter. Eval: 0.1145 s/iter. Total: 0.3590 s/iter. ETA=0:05:46
[02/18 06:00:24] mask2former INFO: Inference done 141/1092. Dataloading: 0.0054 s/iter. Inference: 0.2399 s/iter. Eval: 0.1134 s/iter. Total: 0.3588 s/iter. ETA=0:05:41
[02/18 06:00:30] mask2former INFO: Inference done 156/1092. Dataloading: 0.0054 s/iter. Inference: 0.2393 s/iter. Eval: 0.1138 s/iter. Total: 0.3586 s/iter. ETA=0:05:35
[02/18 06:00:35] mask2former INFO: Inference done 171/1092. Dataloading: 0.0054 s/iter. Inference: 0.2389 s/iter. Eval: 0.1127 s/iter. Total: 0.3571 s/iter. ETA=0:05:28
[02/18 06:00:40] mask2former INFO: Inference done 185/1092. Dataloading: 0.0054 s/iter. Inference: 0.2401 s/iter. Eval: 0.1134 s/iter. Total: 0.3590 s/iter. ETA=0:05:25
[02/18 06:00:45] mask2former INFO: Inference done 200/1092. Dataloading: 0.0054 s/iter. Inference: 0.2396 s/iter. Eval: 0.1127 s/iter. Total: 0.3578 s/iter. ETA=0:05:19
[02/18 06:00:50] mask2former INFO: Inference done 214/1092. Dataloading: 0.0054 s/iter. Inference: 0.2397 s/iter. Eval: 0.1129 s/iter. Total: 0.3581 s/iter. ETA=0:05:14
[02/18 06:00:56] mask2former INFO: Inference done 228/1092. Dataloading: 0.0055 s/iter. Inference: 0.2407 s/iter. Eval: 0.1125 s/iter. Total: 0.3588 s/iter. ETA=0:05:09
[02/18 06:01:01] mask2former INFO: Inference done 243/1092. Dataloading: 0.0054 s/iter. Inference: 0.2399 s/iter. Eval: 0.1125 s/iter. Total: 0.3579 s/iter. ETA=0:05:03
[02/18 06:01:06] mask2former INFO: Inference done 258/1092. Dataloading: 0.0055 s/iter. Inference: 0.2402 s/iter. Eval: 0.1120 s/iter. Total: 0.3577 s/iter. ETA=0:04:58
[02/18 06:01:11] mask2former INFO: Inference done 273/1092. Dataloading: 0.0056 s/iter. Inference: 0.2397 s/iter. Eval: 0.1121 s/iter. Total: 0.3574 s/iter. ETA=0:04:52
[02/18 06:01:17] mask2former INFO: Inference done 288/1092. Dataloading: 0.0056 s/iter. Inference: 0.2395 s/iter. Eval: 0.1118 s/iter. Total: 0.3570 s/iter. ETA=0:04:47
[02/18 06:01:22] mask2former INFO: Inference done 303/1092. Dataloading: 0.0056 s/iter. Inference: 0.2394 s/iter. Eval: 0.1119 s/iter. Total: 0.3569 s/iter. ETA=0:04:41
[02/18 06:01:27] mask2former INFO: Inference done 316/1092. Dataloading: 0.0056 s/iter. Inference: 0.2408 s/iter. Eval: 0.1117 s/iter. Total: 0.3582 s/iter. ETA=0:04:37
[02/18 06:01:32] mask2former INFO: Inference done 330/1092. Dataloading: 0.0056 s/iter. Inference: 0.2414 s/iter. Eval: 0.1120 s/iter. Total: 0.3590 s/iter. ETA=0:04:33
[02/18 06:01:37] mask2former INFO: Inference done 345/1092. Dataloading: 0.0056 s/iter. Inference: 0.2410 s/iter. Eval: 0.1119 s/iter. Total: 0.3586 s/iter. ETA=0:04:27
[02/18 06:01:43] mask2former INFO: Inference done 360/1092. Dataloading: 0.0055 s/iter. Inference: 0.2409 s/iter. Eval: 0.1118 s/iter. Total: 0.3583 s/iter. ETA=0:04:22
[02/18 06:01:48] mask2former INFO: Inference done 373/1092. Dataloading: 0.0056 s/iter. Inference: 0.2415 s/iter. Eval: 0.1121 s/iter. Total: 0.3593 s/iter. ETA=0:04:18
[02/18 06:01:53] mask2former INFO: Inference done 386/1092. Dataloading: 0.0057 s/iter. Inference: 0.2421 s/iter. Eval: 0.1124 s/iter. Total: 0.3603 s/iter. ETA=0:04:14
[02/18 06:01:58] mask2former INFO: Inference done 401/1092. Dataloading: 0.0058 s/iter. Inference: 0.2415 s/iter. Eval: 0.1123 s/iter. Total: 0.3597 s/iter. ETA=0:04:08
[02/18 06:02:03] mask2former INFO: Inference done 417/1092. Dataloading: 0.0057 s/iter. Inference: 0.2408 s/iter. Eval: 0.1117 s/iter. Total: 0.3582 s/iter. ETA=0:04:01
[02/18 06:02:08] mask2former INFO: Inference done 432/1092. Dataloading: 0.0057 s/iter. Inference: 0.2401 s/iter. Eval: 0.1117 s/iter. Total: 0.3576 s/iter. ETA=0:03:55
[02/18 06:02:14] mask2former INFO: Inference done 444/1092. Dataloading: 0.0057 s/iter. Inference: 0.2408 s/iter. Eval: 0.1141 s/iter. Total: 0.3607 s/iter. ETA=0:03:53
[02/18 06:02:19] mask2former INFO: Inference done 451/1092. Dataloading: 0.0060 s/iter. Inference: 0.2446 s/iter. Eval: 0.1165 s/iter. Total: 0.3671 s/iter. ETA=0:03:55
[02/18 06:02:25] mask2former INFO: Inference done 458/1092. Dataloading: 0.0060 s/iter. Inference: 0.2478 s/iter. Eval: 0.1191 s/iter. Total: 0.3731 s/iter. ETA=0:03:56
[02/18 06:02:30] mask2former INFO: Inference done 472/1092. Dataloading: 0.0061 s/iter. Inference: 0.2481 s/iter. Eval: 0.1186 s/iter. Total: 0.3729 s/iter. ETA=0:03:51
[02/18 06:02:35] mask2former INFO: Inference done 482/1092. Dataloading: 0.0061 s/iter. Inference: 0.2496 s/iter. Eval: 0.1206 s/iter. Total: 0.3765 s/iter. ETA=0:03:49
[02/18 06:02:40] mask2former INFO: Inference done 495/1092. Dataloading: 0.0061 s/iter. Inference: 0.2496 s/iter. Eval: 0.1210 s/iter. Total: 0.3768 s/iter. ETA=0:03:44
[02/18 06:02:45] mask2former INFO: Inference done 509/1092. Dataloading: 0.0062 s/iter. Inference: 0.2496 s/iter. Eval: 0.1208 s/iter. Total: 0.3767 s/iter. ETA=0:03:39
[02/18 06:02:51] mask2former INFO: Inference done 524/1092. Dataloading: 0.0062 s/iter. Inference: 0.2492 s/iter. Eval: 0.1206 s/iter. Total: 0.3760 s/iter. ETA=0:03:33
[02/18 06:02:56] mask2former INFO: Inference done 539/1092. Dataloading: 0.0061 s/iter. Inference: 0.2487 s/iter. Eval: 0.1207 s/iter. Total: 0.3756 s/iter. ETA=0:03:27
[02/18 06:03:01] mask2former INFO: Inference done 553/1092. Dataloading: 0.0061 s/iter. Inference: 0.2488 s/iter. Eval: 0.1205 s/iter. Total: 0.3754 s/iter. ETA=0:03:22
[02/18 06:03:06] mask2former INFO: Inference done 567/1092. Dataloading: 0.0061 s/iter. Inference: 0.2485 s/iter. Eval: 0.1207 s/iter. Total: 0.3754 s/iter. ETA=0:03:17
[02/18 06:03:12] mask2former INFO: Inference done 582/1092. Dataloading: 0.0061 s/iter. Inference: 0.2485 s/iter. Eval: 0.1202 s/iter. Total: 0.3748 s/iter. ETA=0:03:11
[02/18 06:03:17] mask2former INFO: Inference done 595/1092. Dataloading: 0.0061 s/iter. Inference: 0.2490 s/iter. Eval: 0.1204 s/iter. Total: 0.3756 s/iter. ETA=0:03:06
[02/18 06:03:22] mask2former INFO: Inference done 608/1092. Dataloading: 0.0061 s/iter. Inference: 0.2491 s/iter. Eval: 0.1206 s/iter. Total: 0.3759 s/iter. ETA=0:03:01
[02/18 06:03:27] mask2former INFO: Inference done 622/1092. Dataloading: 0.0061 s/iter. Inference: 0.2488 s/iter. Eval: 0.1206 s/iter. Total: 0.3756 s/iter. ETA=0:02:56
[02/18 06:03:32] mask2former INFO: Inference done 636/1092. Dataloading: 0.0060 s/iter. Inference: 0.2488 s/iter. Eval: 0.1203 s/iter. Total: 0.3752 s/iter. ETA=0:02:51
[02/18 06:03:37] mask2former INFO: Inference done 649/1092. Dataloading: 0.0061 s/iter. Inference: 0.2487 s/iter. Eval: 0.1206 s/iter. Total: 0.3755 s/iter. ETA=0:02:46
[02/18 06:03:43] mask2former INFO: Inference done 663/1092. Dataloading: 0.0061 s/iter. Inference: 0.2488 s/iter. Eval: 0.1206 s/iter. Total: 0.3756 s/iter. ETA=0:02:41
[02/18 06:03:48] mask2former INFO: Inference done 677/1092. Dataloading: 0.0060 s/iter. Inference: 0.2487 s/iter. Eval: 0.1205 s/iter. Total: 0.3753 s/iter. ETA=0:02:35
[02/18 06:03:53] mask2former INFO: Inference done 692/1092. Dataloading: 0.0060 s/iter. Inference: 0.2482 s/iter. Eval: 0.1206 s/iter. Total: 0.3749 s/iter. ETA=0:02:29
[02/18 06:03:58] mask2former INFO: Inference done 706/1092. Dataloading: 0.0060 s/iter. Inference: 0.2481 s/iter. Eval: 0.1203 s/iter. Total: 0.3746 s/iter. ETA=0:02:24
[02/18 06:04:03] mask2former INFO: Inference done 721/1092. Dataloading: 0.0060 s/iter. Inference: 0.2479 s/iter. Eval: 0.1202 s/iter. Total: 0.3742 s/iter. ETA=0:02:18
[02/18 06:04:09] mask2former INFO: Inference done 736/1092. Dataloading: 0.0060 s/iter. Inference: 0.2478 s/iter. Eval: 0.1198 s/iter. Total: 0.3737 s/iter. ETA=0:02:13
[02/18 06:04:14] mask2former INFO: Inference done 751/1092. Dataloading: 0.0060 s/iter. Inference: 0.2475 s/iter. Eval: 0.1197 s/iter. Total: 0.3733 s/iter. ETA=0:02:07
[02/18 06:04:19] mask2former INFO: Inference done 765/1092. Dataloading: 0.0060 s/iter. Inference: 0.2475 s/iter. Eval: 0.1197 s/iter. Total: 0.3732 s/iter. ETA=0:02:02
[02/18 06:04:24] mask2former INFO: Inference done 778/1092. Dataloading: 0.0059 s/iter. Inference: 0.2473 s/iter. Eval: 0.1202 s/iter. Total: 0.3735 s/iter. ETA=0:01:57
[02/18 06:04:30] mask2former INFO: Inference done 793/1092. Dataloading: 0.0059 s/iter. Inference: 0.2471 s/iter. Eval: 0.1200 s/iter. Total: 0.3731 s/iter. ETA=0:01:51
[02/18 06:04:35] mask2former INFO: Inference done 808/1092. Dataloading: 0.0059 s/iter. Inference: 0.2470 s/iter. Eval: 0.1198 s/iter. Total: 0.3727 s/iter. ETA=0:01:45
[02/18 06:04:40] mask2former INFO: Inference done 823/1092. Dataloading: 0.0059 s/iter. Inference: 0.2466 s/iter. Eval: 0.1196 s/iter. Total: 0.3723 s/iter. ETA=0:01:40
[02/18 06:04:45] mask2former INFO: Inference done 837/1092. Dataloading: 0.0060 s/iter. Inference: 0.2465 s/iter. Eval: 0.1195 s/iter. Total: 0.3721 s/iter. ETA=0:01:34
[02/18 06:04:50] mask2former INFO: Inference done 851/1092. Dataloading: 0.0060 s/iter. Inference: 0.2463 s/iter. Eval: 0.1195 s/iter. Total: 0.3719 s/iter. ETA=0:01:29
[02/18 06:04:56] mask2former INFO: Inference done 866/1092. Dataloading: 0.0059 s/iter. Inference: 0.2463 s/iter. Eval: 0.1194 s/iter. Total: 0.3716 s/iter. ETA=0:01:23
[02/18 06:05:01] mask2former INFO: Inference done 881/1092. Dataloading: 0.0059 s/iter. Inference: 0.2460 s/iter. Eval: 0.1193 s/iter. Total: 0.3712 s/iter. ETA=0:01:18
[02/18 06:05:06] mask2former INFO: Inference done 895/1092. Dataloading: 0.0059 s/iter. Inference: 0.2458 s/iter. Eval: 0.1194 s/iter. Total: 0.3712 s/iter. ETA=0:01:13
[02/18 06:05:11] mask2former INFO: Inference done 909/1092. Dataloading: 0.0059 s/iter. Inference: 0.2458 s/iter. Eval: 0.1193 s/iter. Total: 0.3711 s/iter. ETA=0:01:07
[02/18 06:05:16] mask2former INFO: Inference done 923/1092. Dataloading: 0.0059 s/iter. Inference: 0.2458 s/iter. Eval: 0.1192 s/iter. Total: 0.3709 s/iter. ETA=0:01:02
[02/18 06:05:21] mask2former INFO: Inference done 938/1092. Dataloading: 0.0059 s/iter. Inference: 0.2455 s/iter. Eval: 0.1192 s/iter. Total: 0.3706 s/iter. ETA=0:00:57
[02/18 06:05:27] mask2former INFO: Inference done 953/1092. Dataloading: 0.0059 s/iter. Inference: 0.2454 s/iter. Eval: 0.1189 s/iter. Total: 0.3702 s/iter. ETA=0:00:51
[02/18 06:05:32] mask2former INFO: Inference done 968/1092. Dataloading: 0.0059 s/iter. Inference: 0.2451 s/iter. Eval: 0.1189 s/iter. Total: 0.3699 s/iter. ETA=0:00:45
[02/18 06:05:37] mask2former INFO: Inference done 983/1092. Dataloading: 0.0058 s/iter. Inference: 0.2448 s/iter. Eval: 0.1189 s/iter. Total: 0.3696 s/iter. ETA=0:00:40
[02/18 06:05:42] mask2former INFO: Inference done 997/1092. Dataloading: 0.0058 s/iter. Inference: 0.2448 s/iter. Eval: 0.1187 s/iter. Total: 0.3695 s/iter. ETA=0:00:35
[02/18 06:05:47] mask2former INFO: Inference done 1011/1092. Dataloading: 0.0058 s/iter. Inference: 0.2447 s/iter. Eval: 0.1187 s/iter. Total: 0.3693 s/iter. ETA=0:00:29
[02/18 06:05:52] mask2former INFO: Inference done 1026/1092. Dataloading: 0.0058 s/iter. Inference: 0.2445 s/iter. Eval: 0.1184 s/iter. Total: 0.3689 s/iter. ETA=0:00:24
[02/18 06:05:57] mask2former INFO: Inference done 1041/1092. Dataloading: 0.0058 s/iter. Inference: 0.2443 s/iter. Eval: 0.1184 s/iter. Total: 0.3686 s/iter. ETA=0:00:18
[02/18 06:06:03] mask2former INFO: Inference done 1056/1092. Dataloading: 0.0058 s/iter. Inference: 0.2442 s/iter. Eval: 0.1182 s/iter. Total: 0.3683 s/iter. ETA=0:00:13
[02/18 06:06:08] mask2former INFO: Inference done 1071/1092. Dataloading: 0.0058 s/iter. Inference: 0.2440 s/iter. Eval: 0.1182 s/iter. Total: 0.3680 s/iter. ETA=0:00:07
[02/18 06:06:13] mask2former INFO: Inference done 1086/1092. Dataloading: 0.0058 s/iter. Inference: 0.2438 s/iter. Eval: 0.1180 s/iter. Total: 0.3676 s/iter. ETA=0:00:02
[02/18 07:14:46] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 07:14:47] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 07:14:47] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 07:15:00] mask2former INFO: Inference done 11/1092. Dataloading: 0.0038 s/iter. Inference: 0.2369 s/iter. Eval: 0.1204 s/iter. Total: 0.3612 s/iter. ETA=0:06:30
[02/18 07:15:05] mask2former INFO: Inference done 27/1092. Dataloading: 0.0051 s/iter. Inference: 0.2284 s/iter. Eval: 0.1049 s/iter. Total: 0.3385 s/iter. ETA=0:06:00
[02/18 07:15:11] mask2former INFO: Inference done 38/1092. Dataloading: 0.0056 s/iter. Inference: 0.2499 s/iter. Eval: 0.1319 s/iter. Total: 0.3874 s/iter. ETA=0:06:48
[02/18 07:15:16] mask2former INFO: Inference done 45/1092. Dataloading: 0.0066 s/iter. Inference: 0.2840 s/iter. Eval: 0.1627 s/iter. Total: 0.4534 s/iter. ETA=0:07:54
[02/18 07:15:21] mask2former INFO: Inference done 53/1092. Dataloading: 0.0074 s/iter. Inference: 0.3032 s/iter. Eval: 0.1764 s/iter. Total: 0.4871 s/iter. ETA=0:08:26
[02/18 07:15:26] mask2former INFO: Inference done 66/1092. Dataloading: 0.0076 s/iter. Inference: 0.2894 s/iter. Eval: 0.1693 s/iter. Total: 0.4664 s/iter. ETA=0:07:58
[02/18 07:15:31] mask2former INFO: Inference done 76/1092. Dataloading: 0.0087 s/iter. Inference: 0.2917 s/iter. Eval: 0.1734 s/iter. Total: 0.4739 s/iter. ETA=0:08:01
[02/18 07:15:37] mask2former INFO: Inference done 90/1092. Dataloading: 0.0082 s/iter. Inference: 0.2848 s/iter. Eval: 0.1627 s/iter. Total: 0.4558 s/iter. ETA=0:07:36
[02/18 07:15:42] mask2former INFO: Inference done 104/1092. Dataloading: 0.0078 s/iter. Inference: 0.2781 s/iter. Eval: 0.1562 s/iter. Total: 0.4422 s/iter. ETA=0:07:16
[02/18 07:15:47] mask2former INFO: Inference done 119/1092. Dataloading: 0.0074 s/iter. Inference: 0.2728 s/iter. Eval: 0.1505 s/iter. Total: 0.4308 s/iter. ETA=0:06:59
[02/18 07:15:52] mask2former INFO: Inference done 134/1092. Dataloading: 0.0072 s/iter. Inference: 0.2670 s/iter. Eval: 0.1459 s/iter. Total: 0.4202 s/iter. ETA=0:06:42
[02/18 07:15:57] mask2former INFO: Inference done 149/1092. Dataloading: 0.0070 s/iter. Inference: 0.2636 s/iter. Eval: 0.1427 s/iter. Total: 0.4134 s/iter. ETA=0:06:29
[02/18 07:16:03] mask2former INFO: Inference done 163/1092. Dataloading: 0.0069 s/iter. Inference: 0.2628 s/iter. Eval: 0.1405 s/iter. Total: 0.4104 s/iter. ETA=0:06:21
[02/18 07:16:08] mask2former INFO: Inference done 177/1092. Dataloading: 0.0068 s/iter. Inference: 0.2607 s/iter. Eval: 0.1385 s/iter. Total: 0.4060 s/iter. ETA=0:06:11
[02/18 07:16:13] mask2former INFO: Inference done 191/1092. Dataloading: 0.0067 s/iter. Inference: 0.2591 s/iter. Eval: 0.1370 s/iter. Total: 0.4030 s/iter. ETA=0:06:03
[02/18 07:16:18] mask2former INFO: Inference done 205/1092. Dataloading: 0.0071 s/iter. Inference: 0.2573 s/iter. Eval: 0.1360 s/iter. Total: 0.4005 s/iter. ETA=0:05:55
[02/18 07:16:23] mask2former INFO: Inference done 220/1092. Dataloading: 0.0069 s/iter. Inference: 0.2557 s/iter. Eval: 0.1345 s/iter. Total: 0.3972 s/iter. ETA=0:05:46
[02/18 07:16:28] mask2former INFO: Inference done 234/1092. Dataloading: 0.0068 s/iter. Inference: 0.2552 s/iter. Eval: 0.1331 s/iter. Total: 0.3951 s/iter. ETA=0:05:39
[02/18 07:16:33] mask2former INFO: Inference done 247/1092. Dataloading: 0.0067 s/iter. Inference: 0.2552 s/iter. Eval: 0.1328 s/iter. Total: 0.3948 s/iter. ETA=0:05:33
[02/18 07:16:38] mask2former INFO: Inference done 261/1092. Dataloading: 0.0066 s/iter. Inference: 0.2542 s/iter. Eval: 0.1321 s/iter. Total: 0.3931 s/iter. ETA=0:05:26
[02/18 07:16:44] mask2former INFO: Inference done 275/1092. Dataloading: 0.0065 s/iter. Inference: 0.2539 s/iter. Eval: 0.1317 s/iter. Total: 0.3922 s/iter. ETA=0:05:20
[02/18 07:16:49] mask2former INFO: Inference done 289/1092. Dataloading: 0.0066 s/iter. Inference: 0.2525 s/iter. Eval: 0.1314 s/iter. Total: 0.3906 s/iter. ETA=0:05:13
[02/18 07:16:54] mask2former INFO: Inference done 303/1092. Dataloading: 0.0065 s/iter. Inference: 0.2514 s/iter. Eval: 0.1313 s/iter. Total: 0.3892 s/iter. ETA=0:05:07
[02/18 07:16:59] mask2former INFO: Inference done 317/1092. Dataloading: 0.0064 s/iter. Inference: 0.2510 s/iter. Eval: 0.1303 s/iter. Total: 0.3878 s/iter. ETA=0:05:00
[02/18 07:17:04] mask2former INFO: Inference done 332/1092. Dataloading: 0.0063 s/iter. Inference: 0.2503 s/iter. Eval: 0.1293 s/iter. Total: 0.3860 s/iter. ETA=0:04:53
[02/18 07:17:09] mask2former INFO: Inference done 347/1092. Dataloading: 0.0064 s/iter. Inference: 0.2495 s/iter. Eval: 0.1287 s/iter. Total: 0.3846 s/iter. ETA=0:04:46
[02/18 07:17:15] mask2former INFO: Inference done 361/1092. Dataloading: 0.0064 s/iter. Inference: 0.2500 s/iter. Eval: 0.1281 s/iter. Total: 0.3845 s/iter. ETA=0:04:41
[02/18 07:17:20] mask2former INFO: Inference done 374/1092. Dataloading: 0.0063 s/iter. Inference: 0.2500 s/iter. Eval: 0.1281 s/iter. Total: 0.3845 s/iter. ETA=0:04:36
[02/18 07:17:25] mask2former INFO: Inference done 388/1092. Dataloading: 0.0063 s/iter. Inference: 0.2499 s/iter. Eval: 0.1281 s/iter. Total: 0.3845 s/iter. ETA=0:04:30
[02/18 07:17:30] mask2former INFO: Inference done 402/1092. Dataloading: 0.0063 s/iter. Inference: 0.2496 s/iter. Eval: 0.1277 s/iter. Total: 0.3837 s/iter. ETA=0:04:24
[02/18 07:17:35] mask2former INFO: Inference done 416/1092. Dataloading: 0.0064 s/iter. Inference: 0.2494 s/iter. Eval: 0.1271 s/iter. Total: 0.3830 s/iter. ETA=0:04:18
[02/18 07:17:41] mask2former INFO: Inference done 431/1092. Dataloading: 0.0064 s/iter. Inference: 0.2488 s/iter. Eval: 0.1269 s/iter. Total: 0.3822 s/iter. ETA=0:04:12
[02/18 07:17:46] mask2former INFO: Inference done 445/1092. Dataloading: 0.0063 s/iter. Inference: 0.2487 s/iter. Eval: 0.1264 s/iter. Total: 0.3815 s/iter. ETA=0:04:06
[02/18 07:17:51] mask2former INFO: Inference done 459/1092. Dataloading: 0.0063 s/iter. Inference: 0.2484 s/iter. Eval: 0.1261 s/iter. Total: 0.3809 s/iter. ETA=0:04:01
[02/18 07:17:56] mask2former INFO: Inference done 475/1092. Dataloading: 0.0062 s/iter. Inference: 0.2477 s/iter. Eval: 0.1250 s/iter. Total: 0.3790 s/iter. ETA=0:03:53
[02/18 07:18:01] mask2former INFO: Inference done 489/1092. Dataloading: 0.0062 s/iter. Inference: 0.2474 s/iter. Eval: 0.1248 s/iter. Total: 0.3785 s/iter. ETA=0:03:48
[02/18 07:18:06] mask2former INFO: Inference done 503/1092. Dataloading: 0.0062 s/iter. Inference: 0.2477 s/iter. Eval: 0.1244 s/iter. Total: 0.3784 s/iter. ETA=0:03:42
[02/18 07:18:11] mask2former INFO: Inference done 517/1092. Dataloading: 0.0062 s/iter. Inference: 0.2478 s/iter. Eval: 0.1242 s/iter. Total: 0.3783 s/iter. ETA=0:03:37
[02/18 07:18:17] mask2former INFO: Inference done 532/1092. Dataloading: 0.0061 s/iter. Inference: 0.2474 s/iter. Eval: 0.1238 s/iter. Total: 0.3775 s/iter. ETA=0:03:31
[02/18 07:18:22] mask2former INFO: Inference done 547/1092. Dataloading: 0.0061 s/iter. Inference: 0.2471 s/iter. Eval: 0.1235 s/iter. Total: 0.3768 s/iter. ETA=0:03:25
[02/18 07:18:27] mask2former INFO: Inference done 561/1092. Dataloading: 0.0061 s/iter. Inference: 0.2474 s/iter. Eval: 0.1233 s/iter. Total: 0.3769 s/iter. ETA=0:03:20
[02/18 07:18:32] mask2former INFO: Inference done 575/1092. Dataloading: 0.0061 s/iter. Inference: 0.2476 s/iter. Eval: 0.1230 s/iter. Total: 0.3767 s/iter. ETA=0:03:14
[02/18 07:18:38] mask2former INFO: Inference done 589/1092. Dataloading: 0.0061 s/iter. Inference: 0.2477 s/iter. Eval: 0.1225 s/iter. Total: 0.3764 s/iter. ETA=0:03:09
[02/18 07:18:43] mask2former INFO: Inference done 604/1092. Dataloading: 0.0061 s/iter. Inference: 0.2470 s/iter. Eval: 0.1224 s/iter. Total: 0.3756 s/iter. ETA=0:03:03
[02/18 07:18:48] mask2former INFO: Inference done 618/1092. Dataloading: 0.0061 s/iter. Inference: 0.2470 s/iter. Eval: 0.1223 s/iter. Total: 0.3754 s/iter. ETA=0:02:57
[02/18 07:18:53] mask2former INFO: Inference done 633/1092. Dataloading: 0.0060 s/iter. Inference: 0.2465 s/iter. Eval: 0.1221 s/iter. Total: 0.3748 s/iter. ETA=0:02:52
[02/18 07:18:58] mask2former INFO: Inference done 648/1092. Dataloading: 0.0060 s/iter. Inference: 0.2462 s/iter. Eval: 0.1220 s/iter. Total: 0.3743 s/iter. ETA=0:02:46
[02/18 07:19:04] mask2former INFO: Inference done 663/1092. Dataloading: 0.0060 s/iter. Inference: 0.2461 s/iter. Eval: 0.1216 s/iter. Total: 0.3739 s/iter. ETA=0:02:40
[02/18 07:19:09] mask2former INFO: Inference done 677/1092. Dataloading: 0.0060 s/iter. Inference: 0.2462 s/iter. Eval: 0.1214 s/iter. Total: 0.3736 s/iter. ETA=0:02:35
[02/18 07:19:14] mask2former INFO: Inference done 692/1092. Dataloading: 0.0060 s/iter. Inference: 0.2458 s/iter. Eval: 0.1211 s/iter. Total: 0.3730 s/iter. ETA=0:02:29
[02/18 07:19:19] mask2former INFO: Inference done 706/1092. Dataloading: 0.0060 s/iter. Inference: 0.2457 s/iter. Eval: 0.1212 s/iter. Total: 0.3730 s/iter. ETA=0:02:23
[02/18 07:19:24] mask2former INFO: Inference done 720/1092. Dataloading: 0.0060 s/iter. Inference: 0.2456 s/iter. Eval: 0.1211 s/iter. Total: 0.3728 s/iter. ETA=0:02:18
[02/18 07:19:30] mask2former INFO: Inference done 735/1092. Dataloading: 0.0060 s/iter. Inference: 0.2455 s/iter. Eval: 0.1207 s/iter. Total: 0.3723 s/iter. ETA=0:02:12
[02/18 07:19:35] mask2former INFO: Inference done 750/1092. Dataloading: 0.0060 s/iter. Inference: 0.2453 s/iter. Eval: 0.1204 s/iter. Total: 0.3718 s/iter. ETA=0:02:07
[02/18 07:19:40] mask2former INFO: Inference done 764/1092. Dataloading: 0.0060 s/iter. Inference: 0.2452 s/iter. Eval: 0.1204 s/iter. Total: 0.3717 s/iter. ETA=0:02:01
[02/18 07:19:45] mask2former INFO: Inference done 778/1092. Dataloading: 0.0060 s/iter. Inference: 0.2452 s/iter. Eval: 0.1202 s/iter. Total: 0.3715 s/iter. ETA=0:01:56
[02/18 07:19:50] mask2former INFO: Inference done 793/1092. Dataloading: 0.0060 s/iter. Inference: 0.2449 s/iter. Eval: 0.1200 s/iter. Total: 0.3710 s/iter. ETA=0:01:50
[02/18 07:19:56] mask2former INFO: Inference done 808/1092. Dataloading: 0.0060 s/iter. Inference: 0.2448 s/iter. Eval: 0.1199 s/iter. Total: 0.3708 s/iter. ETA=0:01:45
[02/18 07:20:01] mask2former INFO: Inference done 822/1092. Dataloading: 0.0060 s/iter. Inference: 0.2448 s/iter. Eval: 0.1198 s/iter. Total: 0.3706 s/iter. ETA=0:01:40
[02/18 07:20:06] mask2former INFO: Inference done 837/1092. Dataloading: 0.0060 s/iter. Inference: 0.2445 s/iter. Eval: 0.1197 s/iter. Total: 0.3703 s/iter. ETA=0:01:34
[02/18 07:20:11] mask2former INFO: Inference done 851/1092. Dataloading: 0.0060 s/iter. Inference: 0.2444 s/iter. Eval: 0.1198 s/iter. Total: 0.3703 s/iter. ETA=0:01:29
[02/18 07:20:16] mask2former INFO: Inference done 865/1092. Dataloading: 0.0059 s/iter. Inference: 0.2445 s/iter. Eval: 0.1197 s/iter. Total: 0.3703 s/iter. ETA=0:01:24
[02/18 07:20:21] mask2former INFO: Inference done 880/1092. Dataloading: 0.0059 s/iter. Inference: 0.2441 s/iter. Eval: 0.1198 s/iter. Total: 0.3699 s/iter. ETA=0:01:18
[02/18 07:20:27] mask2former INFO: Inference done 895/1092. Dataloading: 0.0059 s/iter. Inference: 0.2440 s/iter. Eval: 0.1195 s/iter. Total: 0.3696 s/iter. ETA=0:01:12
[02/18 07:20:32] mask2former INFO: Inference done 909/1092. Dataloading: 0.0059 s/iter. Inference: 0.2441 s/iter. Eval: 0.1196 s/iter. Total: 0.3696 s/iter. ETA=0:01:07
[02/18 07:20:37] mask2former INFO: Inference done 923/1092. Dataloading: 0.0059 s/iter. Inference: 0.2439 s/iter. Eval: 0.1195 s/iter. Total: 0.3694 s/iter. ETA=0:01:02
[02/18 07:20:42] mask2former INFO: Inference done 937/1092. Dataloading: 0.0059 s/iter. Inference: 0.2439 s/iter. Eval: 0.1195 s/iter. Total: 0.3693 s/iter. ETA=0:00:57
[02/18 07:20:47] mask2former INFO: Inference done 952/1092. Dataloading: 0.0058 s/iter. Inference: 0.2437 s/iter. Eval: 0.1193 s/iter. Total: 0.3690 s/iter. ETA=0:00:51
[02/18 07:20:52] mask2former INFO: Inference done 967/1092. Dataloading: 0.0058 s/iter. Inference: 0.2436 s/iter. Eval: 0.1192 s/iter. Total: 0.3687 s/iter. ETA=0:00:46
[02/18 07:20:58] mask2former INFO: Inference done 982/1092. Dataloading: 0.0058 s/iter. Inference: 0.2434 s/iter. Eval: 0.1190 s/iter. Total: 0.3684 s/iter. ETA=0:00:40
[02/18 07:21:03] mask2former INFO: Inference done 995/1092. Dataloading: 0.0058 s/iter. Inference: 0.2437 s/iter. Eval: 0.1192 s/iter. Total: 0.3688 s/iter. ETA=0:00:35
[02/18 07:21:08] mask2former INFO: Inference done 1009/1092. Dataloading: 0.0058 s/iter. Inference: 0.2436 s/iter. Eval: 0.1192 s/iter. Total: 0.3687 s/iter. ETA=0:00:30
[02/18 07:21:13] mask2former INFO: Inference done 1023/1092. Dataloading: 0.0058 s/iter. Inference: 0.2437 s/iter. Eval: 0.1191 s/iter. Total: 0.3686 s/iter. ETA=0:00:25
[02/18 07:21:18] mask2former INFO: Inference done 1037/1092. Dataloading: 0.0058 s/iter. Inference: 0.2436 s/iter. Eval: 0.1190 s/iter. Total: 0.3685 s/iter. ETA=0:00:20
[02/18 07:21:23] mask2former INFO: Inference done 1052/1092. Dataloading: 0.0058 s/iter. Inference: 0.2436 s/iter. Eval: 0.1188 s/iter. Total: 0.3683 s/iter. ETA=0:00:14
[02/18 07:21:29] mask2former INFO: Inference done 1067/1092. Dataloading: 0.0058 s/iter. Inference: 0.2435 s/iter. Eval: 0.1186 s/iter. Total: 0.3680 s/iter. ETA=0:00:09
[02/18 07:21:34] mask2former INFO: Inference done 1081/1092. Dataloading: 0.0058 s/iter. Inference: 0.2435 s/iter. Eval: 0.1186 s/iter. Total: 0.3680 s/iter. ETA=0:00:04
[02/18 08:30:07] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 08:30:08] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 08:30:08] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 08:30:23] mask2former INFO: Inference done 11/1092. Dataloading: 0.0050 s/iter. Inference: 0.2429 s/iter. Eval: 0.1559 s/iter. Total: 0.4039 s/iter. ETA=0:07:16
[02/18 08:30:28] mask2former INFO: Inference done 25/1092. Dataloading: 0.0064 s/iter. Inference: 0.2389 s/iter. Eval: 0.1298 s/iter. Total: 0.3752 s/iter. ETA=0:06:40
[02/18 08:30:33] mask2former INFO: Inference done 40/1092. Dataloading: 0.0061 s/iter. Inference: 0.2338 s/iter. Eval: 0.1231 s/iter. Total: 0.3630 s/iter. ETA=0:06:21
[02/18 08:30:38] mask2former INFO: Inference done 55/1092. Dataloading: 0.0060 s/iter. Inference: 0.2316 s/iter. Eval: 0.1214 s/iter. Total: 0.3591 s/iter. ETA=0:06:12
[02/18 08:30:43] mask2former INFO: Inference done 69/1092. Dataloading: 0.0059 s/iter. Inference: 0.2314 s/iter. Eval: 0.1219 s/iter. Total: 0.3593 s/iter. ETA=0:06:07
[02/18 08:30:48] mask2former INFO: Inference done 83/1092. Dataloading: 0.0057 s/iter. Inference: 0.2343 s/iter. Eval: 0.1209 s/iter. Total: 0.3609 s/iter. ETA=0:06:04
[02/18 08:30:54] mask2former INFO: Inference done 98/1092. Dataloading: 0.0056 s/iter. Inference: 0.2330 s/iter. Eval: 0.1192 s/iter. Total: 0.3580 s/iter. ETA=0:05:55
[02/18 08:30:59] mask2former INFO: Inference done 113/1092. Dataloading: 0.0057 s/iter. Inference: 0.2318 s/iter. Eval: 0.1182 s/iter. Total: 0.3558 s/iter. ETA=0:05:48
[02/18 08:31:04] mask2former INFO: Inference done 128/1092. Dataloading: 0.0056 s/iter. Inference: 0.2321 s/iter. Eval: 0.1172 s/iter. Total: 0.3550 s/iter. ETA=0:05:42
[02/18 08:31:09] mask2former INFO: Inference done 142/1092. Dataloading: 0.0055 s/iter. Inference: 0.2330 s/iter. Eval: 0.1174 s/iter. Total: 0.3560 s/iter. ETA=0:05:38
[02/18 08:31:14] mask2former INFO: Inference done 157/1092. Dataloading: 0.0061 s/iter. Inference: 0.2328 s/iter. Eval: 0.1166 s/iter. Total: 0.3555 s/iter. ETA=0:05:32
[02/18 08:31:20] mask2former INFO: Inference done 172/1092. Dataloading: 0.0060 s/iter. Inference: 0.2331 s/iter. Eval: 0.1165 s/iter. Total: 0.3557 s/iter. ETA=0:05:27
[02/18 08:31:25] mask2former INFO: Inference done 186/1092. Dataloading: 0.0060 s/iter. Inference: 0.2339 s/iter. Eval: 0.1167 s/iter. Total: 0.3566 s/iter. ETA=0:05:23
[02/18 08:31:30] mask2former INFO: Inference done 200/1092. Dataloading: 0.0059 s/iter. Inference: 0.2345 s/iter. Eval: 0.1169 s/iter. Total: 0.3574 s/iter. ETA=0:05:18
[02/18 08:31:35] mask2former INFO: Inference done 215/1092. Dataloading: 0.0059 s/iter. Inference: 0.2339 s/iter. Eval: 0.1171 s/iter. Total: 0.3570 s/iter. ETA=0:05:13
[02/18 08:31:40] mask2former INFO: Inference done 229/1092. Dataloading: 0.0059 s/iter. Inference: 0.2353 s/iter. Eval: 0.1164 s/iter. Total: 0.3577 s/iter. ETA=0:05:08
[02/18 08:31:45] mask2former INFO: Inference done 243/1092. Dataloading: 0.0058 s/iter. Inference: 0.2356 s/iter. Eval: 0.1163 s/iter. Total: 0.3578 s/iter. ETA=0:05:03
[02/18 08:31:50] mask2former INFO: Inference done 257/1092. Dataloading: 0.0058 s/iter. Inference: 0.2355 s/iter. Eval: 0.1164 s/iter. Total: 0.3579 s/iter. ETA=0:04:58
[02/18 08:31:56] mask2former INFO: Inference done 271/1092. Dataloading: 0.0058 s/iter. Inference: 0.2358 s/iter. Eval: 0.1170 s/iter. Total: 0.3587 s/iter. ETA=0:04:54
[02/18 08:32:01] mask2former INFO: Inference done 285/1092. Dataloading: 0.0058 s/iter. Inference: 0.2363 s/iter. Eval: 0.1166 s/iter. Total: 0.3588 s/iter. ETA=0:04:49
[02/18 08:32:06] mask2former INFO: Inference done 299/1092. Dataloading: 0.0058 s/iter. Inference: 0.2366 s/iter. Eval: 0.1163 s/iter. Total: 0.3589 s/iter. ETA=0:04:44
[02/18 08:32:11] mask2former INFO: Inference done 313/1092. Dataloading: 0.0058 s/iter. Inference: 0.2372 s/iter. Eval: 0.1166 s/iter. Total: 0.3597 s/iter. ETA=0:04:40
[02/18 08:32:16] mask2former INFO: Inference done 327/1092. Dataloading: 0.0058 s/iter. Inference: 0.2377 s/iter. Eval: 0.1164 s/iter. Total: 0.3599 s/iter. ETA=0:04:35
[02/18 08:32:21] mask2former INFO: Inference done 341/1092. Dataloading: 0.0058 s/iter. Inference: 0.2381 s/iter. Eval: 0.1162 s/iter. Total: 0.3602 s/iter. ETA=0:04:30
[02/18 08:32:27] mask2former INFO: Inference done 356/1092. Dataloading: 0.0058 s/iter. Inference: 0.2375 s/iter. Eval: 0.1162 s/iter. Total: 0.3596 s/iter. ETA=0:04:24
[02/18 08:32:32] mask2former INFO: Inference done 370/1092. Dataloading: 0.0058 s/iter. Inference: 0.2374 s/iter. Eval: 0.1164 s/iter. Total: 0.3597 s/iter. ETA=0:04:19
[02/18 08:32:37] mask2former INFO: Inference done 384/1092. Dataloading: 0.0058 s/iter. Inference: 0.2375 s/iter. Eval: 0.1163 s/iter. Total: 0.3596 s/iter. ETA=0:04:14
[02/18 08:32:42] mask2former INFO: Inference done 398/1092. Dataloading: 0.0059 s/iter. Inference: 0.2381 s/iter. Eval: 0.1165 s/iter. Total: 0.3605 s/iter. ETA=0:04:10
[02/18 08:32:47] mask2former INFO: Inference done 412/1092. Dataloading: 0.0059 s/iter. Inference: 0.2385 s/iter. Eval: 0.1162 s/iter. Total: 0.3607 s/iter. ETA=0:04:05
[02/18 08:32:52] mask2former INFO: Inference done 427/1092. Dataloading: 0.0058 s/iter. Inference: 0.2383 s/iter. Eval: 0.1158 s/iter. Total: 0.3600 s/iter. ETA=0:03:59
[02/18 08:32:57] mask2former INFO: Inference done 441/1092. Dataloading: 0.0059 s/iter. Inference: 0.2386 s/iter. Eval: 0.1156 s/iter. Total: 0.3602 s/iter. ETA=0:03:54
[02/18 08:33:03] mask2former INFO: Inference done 457/1092. Dataloading: 0.0058 s/iter. Inference: 0.2379 s/iter. Eval: 0.1153 s/iter. Total: 0.3591 s/iter. ETA=0:03:48
[02/18 08:33:08] mask2former INFO: Inference done 472/1092. Dataloading: 0.0058 s/iter. Inference: 0.2381 s/iter. Eval: 0.1149 s/iter. Total: 0.3588 s/iter. ETA=0:03:42
[02/18 08:33:13] mask2former INFO: Inference done 486/1092. Dataloading: 0.0058 s/iter. Inference: 0.2380 s/iter. Eval: 0.1150 s/iter. Total: 0.3588 s/iter. ETA=0:03:37
[02/18 08:33:18] mask2former INFO: Inference done 500/1092. Dataloading: 0.0058 s/iter. Inference: 0.2380 s/iter. Eval: 0.1151 s/iter. Total: 0.3590 s/iter. ETA=0:03:32
[02/18 08:33:23] mask2former INFO: Inference done 515/1092. Dataloading: 0.0057 s/iter. Inference: 0.2381 s/iter. Eval: 0.1150 s/iter. Total: 0.3589 s/iter. ETA=0:03:27
[02/18 08:33:29] mask2former INFO: Inference done 530/1092. Dataloading: 0.0057 s/iter. Inference: 0.2380 s/iter. Eval: 0.1149 s/iter. Total: 0.3586 s/iter. ETA=0:03:21
[02/18 08:33:34] mask2former INFO: Inference done 545/1092. Dataloading: 0.0057 s/iter. Inference: 0.2377 s/iter. Eval: 0.1146 s/iter. Total: 0.3581 s/iter. ETA=0:03:15
[02/18 08:33:39] mask2former INFO: Inference done 560/1092. Dataloading: 0.0057 s/iter. Inference: 0.2378 s/iter. Eval: 0.1147 s/iter. Total: 0.3582 s/iter. ETA=0:03:10
[02/18 08:33:44] mask2former INFO: Inference done 574/1092. Dataloading: 0.0057 s/iter. Inference: 0.2381 s/iter. Eval: 0.1145 s/iter. Total: 0.3583 s/iter. ETA=0:03:05
[02/18 08:33:49] mask2former INFO: Inference done 589/1092. Dataloading: 0.0056 s/iter. Inference: 0.2382 s/iter. Eval: 0.1142 s/iter. Total: 0.3582 s/iter. ETA=0:03:00
[02/18 08:33:55] mask2former INFO: Inference done 604/1092. Dataloading: 0.0056 s/iter. Inference: 0.2381 s/iter. Eval: 0.1142 s/iter. Total: 0.3580 s/iter. ETA=0:02:54
[02/18 08:34:00] mask2former INFO: Inference done 616/1092. Dataloading: 0.0057 s/iter. Inference: 0.2391 s/iter. Eval: 0.1146 s/iter. Total: 0.3594 s/iter. ETA=0:02:51
[02/18 08:34:05] mask2former INFO: Inference done 631/1092. Dataloading: 0.0056 s/iter. Inference: 0.2389 s/iter. Eval: 0.1146 s/iter. Total: 0.3592 s/iter. ETA=0:02:45
[02/18 08:34:10] mask2former INFO: Inference done 645/1092. Dataloading: 0.0056 s/iter. Inference: 0.2391 s/iter. Eval: 0.1144 s/iter. Total: 0.3592 s/iter. ETA=0:02:40
[02/18 08:34:15] mask2former INFO: Inference done 659/1092. Dataloading: 0.0056 s/iter. Inference: 0.2390 s/iter. Eval: 0.1146 s/iter. Total: 0.3594 s/iter. ETA=0:02:35
[02/18 08:34:21] mask2former INFO: Inference done 673/1092. Dataloading: 0.0057 s/iter. Inference: 0.2391 s/iter. Eval: 0.1148 s/iter. Total: 0.3597 s/iter. ETA=0:02:30
[02/18 08:34:26] mask2former INFO: Inference done 687/1092. Dataloading: 0.0057 s/iter. Inference: 0.2391 s/iter. Eval: 0.1148 s/iter. Total: 0.3597 s/iter. ETA=0:02:25
[02/18 08:34:31] mask2former INFO: Inference done 702/1092. Dataloading: 0.0057 s/iter. Inference: 0.2390 s/iter. Eval: 0.1146 s/iter. Total: 0.3594 s/iter. ETA=0:02:20
[02/18 08:34:36] mask2former INFO: Inference done 716/1092. Dataloading: 0.0056 s/iter. Inference: 0.2392 s/iter. Eval: 0.1147 s/iter. Total: 0.3596 s/iter. ETA=0:02:15
[02/18 08:34:41] mask2former INFO: Inference done 730/1092. Dataloading: 0.0057 s/iter. Inference: 0.2392 s/iter. Eval: 0.1148 s/iter. Total: 0.3597 s/iter. ETA=0:02:10
[02/18 08:34:46] mask2former INFO: Inference done 745/1092. Dataloading: 0.0057 s/iter. Inference: 0.2392 s/iter. Eval: 0.1148 s/iter. Total: 0.3597 s/iter. ETA=0:02:04
[02/18 08:34:52] mask2former INFO: Inference done 760/1092. Dataloading: 0.0056 s/iter. Inference: 0.2391 s/iter. Eval: 0.1148 s/iter. Total: 0.3596 s/iter. ETA=0:01:59
[02/18 08:34:57] mask2former INFO: Inference done 775/1092. Dataloading: 0.0056 s/iter. Inference: 0.2391 s/iter. Eval: 0.1147 s/iter. Total: 0.3595 s/iter. ETA=0:01:53
[02/18 08:35:02] mask2former INFO: Inference done 789/1092. Dataloading: 0.0056 s/iter. Inference: 0.2389 s/iter. Eval: 0.1149 s/iter. Total: 0.3595 s/iter. ETA=0:01:48
[02/18 08:35:07] mask2former INFO: Inference done 802/1092. Dataloading: 0.0056 s/iter. Inference: 0.2394 s/iter. Eval: 0.1149 s/iter. Total: 0.3600 s/iter. ETA=0:01:44
[02/18 08:35:12] mask2former INFO: Inference done 816/1092. Dataloading: 0.0056 s/iter. Inference: 0.2392 s/iter. Eval: 0.1152 s/iter. Total: 0.3601 s/iter. ETA=0:01:39
[02/18 08:35:18] mask2former INFO: Inference done 831/1092. Dataloading: 0.0056 s/iter. Inference: 0.2391 s/iter. Eval: 0.1152 s/iter. Total: 0.3600 s/iter. ETA=0:01:33
[02/18 08:35:23] mask2former INFO: Inference done 845/1092. Dataloading: 0.0056 s/iter. Inference: 0.2390 s/iter. Eval: 0.1154 s/iter. Total: 0.3601 s/iter. ETA=0:01:28
[02/18 08:35:28] mask2former INFO: Inference done 859/1092. Dataloading: 0.0056 s/iter. Inference: 0.2390 s/iter. Eval: 0.1156 s/iter. Total: 0.3603 s/iter. ETA=0:01:23
[02/18 08:35:33] mask2former INFO: Inference done 873/1092. Dataloading: 0.0056 s/iter. Inference: 0.2391 s/iter. Eval: 0.1155 s/iter. Total: 0.3603 s/iter. ETA=0:01:18
[02/18 08:35:38] mask2former INFO: Inference done 888/1092. Dataloading: 0.0056 s/iter. Inference: 0.2390 s/iter. Eval: 0.1154 s/iter. Total: 0.3600 s/iter. ETA=0:01:13
[02/18 08:35:43] mask2former INFO: Inference done 902/1092. Dataloading: 0.0056 s/iter. Inference: 0.2390 s/iter. Eval: 0.1155 s/iter. Total: 0.3603 s/iter. ETA=0:01:08
[02/18 08:35:49] mask2former INFO: Inference done 917/1092. Dataloading: 0.0056 s/iter. Inference: 0.2389 s/iter. Eval: 0.1158 s/iter. Total: 0.3604 s/iter. ETA=0:01:03
[02/18 08:35:54] mask2former INFO: Inference done 931/1092. Dataloading: 0.0056 s/iter. Inference: 0.2390 s/iter. Eval: 0.1160 s/iter. Total: 0.3607 s/iter. ETA=0:00:58
[02/18 08:36:00] mask2former INFO: Inference done 945/1092. Dataloading: 0.0056 s/iter. Inference: 0.2390 s/iter. Eval: 0.1162 s/iter. Total: 0.3609 s/iter. ETA=0:00:53
[02/18 08:36:05] mask2former INFO: Inference done 960/1092. Dataloading: 0.0056 s/iter. Inference: 0.2390 s/iter. Eval: 0.1160 s/iter. Total: 0.3607 s/iter. ETA=0:00:47
[02/18 08:36:10] mask2former INFO: Inference done 974/1092. Dataloading: 0.0056 s/iter. Inference: 0.2391 s/iter. Eval: 0.1160 s/iter. Total: 0.3608 s/iter. ETA=0:00:42
[02/18 08:36:15] mask2former INFO: Inference done 988/1092. Dataloading: 0.0056 s/iter. Inference: 0.2395 s/iter. Eval: 0.1158 s/iter. Total: 0.3610 s/iter. ETA=0:00:37
[02/18 08:36:20] mask2former INFO: Inference done 1003/1092. Dataloading: 0.0056 s/iter. Inference: 0.2393 s/iter. Eval: 0.1158 s/iter. Total: 0.3607 s/iter. ETA=0:00:32
[02/18 08:36:25] mask2former INFO: Inference done 1017/1092. Dataloading: 0.0056 s/iter. Inference: 0.2393 s/iter. Eval: 0.1158 s/iter. Total: 0.3608 s/iter. ETA=0:00:27
[02/18 08:36:31] mask2former INFO: Inference done 1032/1092. Dataloading: 0.0056 s/iter. Inference: 0.2392 s/iter. Eval: 0.1158 s/iter. Total: 0.3606 s/iter. ETA=0:00:21
[02/18 08:36:36] mask2former INFO: Inference done 1047/1092. Dataloading: 0.0056 s/iter. Inference: 0.2390 s/iter. Eval: 0.1159 s/iter. Total: 0.3605 s/iter. ETA=0:00:16
[02/18 08:36:41] mask2former INFO: Inference done 1062/1092. Dataloading: 0.0056 s/iter. Inference: 0.2389 s/iter. Eval: 0.1158 s/iter. Total: 0.3604 s/iter. ETA=0:00:10
[02/18 08:36:46] mask2former INFO: Inference done 1075/1092. Dataloading: 0.0055 s/iter. Inference: 0.2392 s/iter. Eval: 0.1159 s/iter. Total: 0.3608 s/iter. ETA=0:00:06
[02/18 08:36:52] mask2former INFO: Inference done 1090/1092. Dataloading: 0.0055 s/iter. Inference: 0.2391 s/iter. Eval: 0.1159 s/iter. Total: 0.3606 s/iter. ETA=0:00:00
[02/18 09:45:59] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 09:45:59] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 09:45:59] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 09:46:13] mask2former INFO: Inference done 11/1092. Dataloading: 0.0051 s/iter. Inference: 0.2381 s/iter. Eval: 0.1571 s/iter. Total: 0.4003 s/iter. ETA=0:07:12
[02/18 09:46:18] mask2former INFO: Inference done 25/1092. Dataloading: 0.0054 s/iter. Inference: 0.2448 s/iter. Eval: 0.1284 s/iter. Total: 0.3787 s/iter. ETA=0:06:44
[02/18 09:46:23] mask2former INFO: Inference done 39/1092. Dataloading: 0.0054 s/iter. Inference: 0.2404 s/iter. Eval: 0.1257 s/iter. Total: 0.3716 s/iter. ETA=0:06:31
[02/18 09:46:28] mask2former INFO: Inference done 53/1092. Dataloading: 0.0055 s/iter. Inference: 0.2402 s/iter. Eval: 0.1243 s/iter. Total: 0.3700 s/iter. ETA=0:06:24
[02/18 09:46:33] mask2former INFO: Inference done 67/1092. Dataloading: 0.0054 s/iter. Inference: 0.2392 s/iter. Eval: 0.1224 s/iter. Total: 0.3671 s/iter. ETA=0:06:16
[02/18 09:46:38] mask2former INFO: Inference done 81/1092. Dataloading: 0.0056 s/iter. Inference: 0.2405 s/iter. Eval: 0.1207 s/iter. Total: 0.3669 s/iter. ETA=0:06:10
[02/18 09:46:44] mask2former INFO: Inference done 96/1092. Dataloading: 0.0055 s/iter. Inference: 0.2400 s/iter. Eval: 0.1186 s/iter. Total: 0.3641 s/iter. ETA=0:06:02
[02/18 09:46:49] mask2former INFO: Inference done 111/1092. Dataloading: 0.0054 s/iter. Inference: 0.2388 s/iter. Eval: 0.1196 s/iter. Total: 0.3638 s/iter. ETA=0:05:56
[02/18 09:46:54] mask2former INFO: Inference done 126/1092. Dataloading: 0.0054 s/iter. Inference: 0.2369 s/iter. Eval: 0.1185 s/iter. Total: 0.3610 s/iter. ETA=0:05:48
[02/18 09:46:59] mask2former INFO: Inference done 141/1092. Dataloading: 0.0053 s/iter. Inference: 0.2358 s/iter. Eval: 0.1177 s/iter. Total: 0.3589 s/iter. ETA=0:05:41
[02/18 09:47:05] mask2former INFO: Inference done 156/1092. Dataloading: 0.0054 s/iter. Inference: 0.2354 s/iter. Eval: 0.1167 s/iter. Total: 0.3576 s/iter. ETA=0:05:34
[02/18 09:47:10] mask2former INFO: Inference done 170/1092. Dataloading: 0.0055 s/iter. Inference: 0.2364 s/iter. Eval: 0.1163 s/iter. Total: 0.3584 s/iter. ETA=0:05:30
[02/18 09:47:15] mask2former INFO: Inference done 184/1092. Dataloading: 0.0055 s/iter. Inference: 0.2376 s/iter. Eval: 0.1163 s/iter. Total: 0.3595 s/iter. ETA=0:05:26
[02/18 09:47:20] mask2former INFO: Inference done 199/1092. Dataloading: 0.0055 s/iter. Inference: 0.2377 s/iter. Eval: 0.1164 s/iter. Total: 0.3597 s/iter. ETA=0:05:21
[02/18 09:47:25] mask2former INFO: Inference done 213/1092. Dataloading: 0.0055 s/iter. Inference: 0.2377 s/iter. Eval: 0.1166 s/iter. Total: 0.3599 s/iter. ETA=0:05:16
[02/18 09:47:31] mask2former INFO: Inference done 228/1092. Dataloading: 0.0055 s/iter. Inference: 0.2368 s/iter. Eval: 0.1163 s/iter. Total: 0.3587 s/iter. ETA=0:05:09
[02/18 09:47:36] mask2former INFO: Inference done 243/1092. Dataloading: 0.0055 s/iter. Inference: 0.2374 s/iter. Eval: 0.1153 s/iter. Total: 0.3582 s/iter. ETA=0:05:04
[02/18 09:47:41] mask2former INFO: Inference done 257/1092. Dataloading: 0.0054 s/iter. Inference: 0.2382 s/iter. Eval: 0.1150 s/iter. Total: 0.3588 s/iter. ETA=0:04:59
[02/18 09:47:46] mask2former INFO: Inference done 271/1092. Dataloading: 0.0054 s/iter. Inference: 0.2389 s/iter. Eval: 0.1156 s/iter. Total: 0.3600 s/iter. ETA=0:04:55
[02/18 09:47:51] mask2former INFO: Inference done 285/1092. Dataloading: 0.0054 s/iter. Inference: 0.2392 s/iter. Eval: 0.1157 s/iter. Total: 0.3604 s/iter. ETA=0:04:50
[02/18 09:47:57] mask2former INFO: Inference done 300/1092. Dataloading: 0.0054 s/iter. Inference: 0.2387 s/iter. Eval: 0.1151 s/iter. Total: 0.3594 s/iter. ETA=0:04:44
[02/18 09:48:02] mask2former INFO: Inference done 315/1092. Dataloading: 0.0054 s/iter. Inference: 0.2384 s/iter. Eval: 0.1147 s/iter. Total: 0.3586 s/iter. ETA=0:04:38
[02/18 09:48:07] mask2former INFO: Inference done 330/1092. Dataloading: 0.0054 s/iter. Inference: 0.2380 s/iter. Eval: 0.1150 s/iter. Total: 0.3585 s/iter. ETA=0:04:33
[02/18 09:48:12] mask2former INFO: Inference done 345/1092. Dataloading: 0.0054 s/iter. Inference: 0.2378 s/iter. Eval: 0.1148 s/iter. Total: 0.3582 s/iter. ETA=0:04:27
[02/18 09:48:17] mask2former INFO: Inference done 359/1092. Dataloading: 0.0054 s/iter. Inference: 0.2381 s/iter. Eval: 0.1147 s/iter. Total: 0.3582 s/iter. ETA=0:04:22
[02/18 09:48:23] mask2former INFO: Inference done 373/1092. Dataloading: 0.0054 s/iter. Inference: 0.2386 s/iter. Eval: 0.1149 s/iter. Total: 0.3590 s/iter. ETA=0:04:18
[02/18 09:48:28] mask2former INFO: Inference done 387/1092. Dataloading: 0.0054 s/iter. Inference: 0.2386 s/iter. Eval: 0.1152 s/iter. Total: 0.3593 s/iter. ETA=0:04:13
[02/18 09:48:33] mask2former INFO: Inference done 401/1092. Dataloading: 0.0054 s/iter. Inference: 0.2388 s/iter. Eval: 0.1157 s/iter. Total: 0.3600 s/iter. ETA=0:04:08
[02/18 09:48:38] mask2former INFO: Inference done 416/1092. Dataloading: 0.0053 s/iter. Inference: 0.2388 s/iter. Eval: 0.1154 s/iter. Total: 0.3596 s/iter. ETA=0:04:03
[02/18 09:48:43] mask2former INFO: Inference done 431/1092. Dataloading: 0.0053 s/iter. Inference: 0.2381 s/iter. Eval: 0.1152 s/iter. Total: 0.3588 s/iter. ETA=0:03:57
[02/18 09:48:49] mask2former INFO: Inference done 446/1092. Dataloading: 0.0053 s/iter. Inference: 0.2381 s/iter. Eval: 0.1152 s/iter. Total: 0.3587 s/iter. ETA=0:03:51
[02/18 09:48:54] mask2former INFO: Inference done 460/1092. Dataloading: 0.0053 s/iter. Inference: 0.2385 s/iter. Eval: 0.1152 s/iter. Total: 0.3592 s/iter. ETA=0:03:46
[02/18 09:48:59] mask2former INFO: Inference done 475/1092. Dataloading: 0.0053 s/iter. Inference: 0.2387 s/iter. Eval: 0.1143 s/iter. Total: 0.3584 s/iter. ETA=0:03:41
[02/18 09:49:04] mask2former INFO: Inference done 489/1092. Dataloading: 0.0053 s/iter. Inference: 0.2390 s/iter. Eval: 0.1143 s/iter. Total: 0.3587 s/iter. ETA=0:03:36
[02/18 09:49:09] mask2former INFO: Inference done 503/1092. Dataloading: 0.0053 s/iter. Inference: 0.2392 s/iter. Eval: 0.1145 s/iter. Total: 0.3591 s/iter. ETA=0:03:31
[02/18 09:49:14] mask2former INFO: Inference done 517/1092. Dataloading: 0.0053 s/iter. Inference: 0.2394 s/iter. Eval: 0.1143 s/iter. Total: 0.3591 s/iter. ETA=0:03:26
[02/18 09:49:20] mask2former INFO: Inference done 531/1092. Dataloading: 0.0053 s/iter. Inference: 0.2394 s/iter. Eval: 0.1144 s/iter. Total: 0.3592 s/iter. ETA=0:03:21
[02/18 09:49:25] mask2former INFO: Inference done 545/1092. Dataloading: 0.0053 s/iter. Inference: 0.2397 s/iter. Eval: 0.1143 s/iter. Total: 0.3594 s/iter. ETA=0:03:16
[02/18 09:49:30] mask2former INFO: Inference done 560/1092. Dataloading: 0.0053 s/iter. Inference: 0.2395 s/iter. Eval: 0.1143 s/iter. Total: 0.3592 s/iter. ETA=0:03:11
[02/18 09:49:35] mask2former INFO: Inference done 575/1092. Dataloading: 0.0053 s/iter. Inference: 0.2396 s/iter. Eval: 0.1141 s/iter. Total: 0.3590 s/iter. ETA=0:03:05
[02/18 09:49:41] mask2former INFO: Inference done 590/1092. Dataloading: 0.0053 s/iter. Inference: 0.2394 s/iter. Eval: 0.1141 s/iter. Total: 0.3589 s/iter. ETA=0:03:00
[02/18 09:49:46] mask2former INFO: Inference done 605/1092. Dataloading: 0.0053 s/iter. Inference: 0.2392 s/iter. Eval: 0.1142 s/iter. Total: 0.3588 s/iter. ETA=0:02:54
[02/18 09:49:51] mask2former INFO: Inference done 619/1092. Dataloading: 0.0053 s/iter. Inference: 0.2392 s/iter. Eval: 0.1142 s/iter. Total: 0.3588 s/iter. ETA=0:02:49
[02/18 09:49:56] mask2former INFO: Inference done 634/1092. Dataloading: 0.0053 s/iter. Inference: 0.2391 s/iter. Eval: 0.1143 s/iter. Total: 0.3587 s/iter. ETA=0:02:44
[02/18 09:50:01] mask2former INFO: Inference done 648/1092. Dataloading: 0.0053 s/iter. Inference: 0.2394 s/iter. Eval: 0.1142 s/iter. Total: 0.3589 s/iter. ETA=0:02:39
[02/18 09:50:07] mask2former INFO: Inference done 662/1092. Dataloading: 0.0053 s/iter. Inference: 0.2395 s/iter. Eval: 0.1142 s/iter. Total: 0.3591 s/iter. ETA=0:02:34
[02/18 09:50:12] mask2former INFO: Inference done 677/1092. Dataloading: 0.0053 s/iter. Inference: 0.2395 s/iter. Eval: 0.1141 s/iter. Total: 0.3590 s/iter. ETA=0:02:28
[02/18 09:50:17] mask2former INFO: Inference done 692/1092. Dataloading: 0.0053 s/iter. Inference: 0.2394 s/iter. Eval: 0.1141 s/iter. Total: 0.3589 s/iter. ETA=0:02:23
[02/18 09:50:22] mask2former INFO: Inference done 707/1092. Dataloading: 0.0053 s/iter. Inference: 0.2393 s/iter. Eval: 0.1140 s/iter. Total: 0.3588 s/iter. ETA=0:02:18
[02/18 09:50:28] mask2former INFO: Inference done 721/1092. Dataloading: 0.0053 s/iter. Inference: 0.2393 s/iter. Eval: 0.1142 s/iter. Total: 0.3590 s/iter. ETA=0:02:13
[02/18 09:50:33] mask2former INFO: Inference done 736/1092. Dataloading: 0.0053 s/iter. Inference: 0.2392 s/iter. Eval: 0.1139 s/iter. Total: 0.3585 s/iter. ETA=0:02:07
[02/18 09:50:38] mask2former INFO: Inference done 751/1092. Dataloading: 0.0053 s/iter. Inference: 0.2392 s/iter. Eval: 0.1138 s/iter. Total: 0.3584 s/iter. ETA=0:02:02
[02/18 09:50:43] mask2former INFO: Inference done 766/1092. Dataloading: 0.0053 s/iter. Inference: 0.2391 s/iter. Eval: 0.1137 s/iter. Total: 0.3582 s/iter. ETA=0:01:56
[02/18 09:50:48] mask2former INFO: Inference done 780/1092. Dataloading: 0.0053 s/iter. Inference: 0.2392 s/iter. Eval: 0.1137 s/iter. Total: 0.3583 s/iter. ETA=0:01:51
[02/18 09:50:53] mask2former INFO: Inference done 794/1092. Dataloading: 0.0053 s/iter. Inference: 0.2391 s/iter. Eval: 0.1138 s/iter. Total: 0.3583 s/iter. ETA=0:01:46
[02/18 09:50:58] mask2former INFO: Inference done 808/1092. Dataloading: 0.0053 s/iter. Inference: 0.2391 s/iter. Eval: 0.1138 s/iter. Total: 0.3583 s/iter. ETA=0:01:41
[02/18 09:51:04] mask2former INFO: Inference done 822/1092. Dataloading: 0.0053 s/iter. Inference: 0.2393 s/iter. Eval: 0.1139 s/iter. Total: 0.3586 s/iter. ETA=0:01:36
[02/18 09:51:09] mask2former INFO: Inference done 837/1092. Dataloading: 0.0053 s/iter. Inference: 0.2393 s/iter. Eval: 0.1138 s/iter. Total: 0.3585 s/iter. ETA=0:01:31
[02/18 09:51:14] mask2former INFO: Inference done 852/1092. Dataloading: 0.0053 s/iter. Inference: 0.2388 s/iter. Eval: 0.1140 s/iter. Total: 0.3582 s/iter. ETA=0:01:25
[02/18 09:51:19] mask2former INFO: Inference done 866/1092. Dataloading: 0.0053 s/iter. Inference: 0.2391 s/iter. Eval: 0.1142 s/iter. Total: 0.3586 s/iter. ETA=0:01:21
[02/18 09:51:25] mask2former INFO: Inference done 881/1092. Dataloading: 0.0053 s/iter. Inference: 0.2389 s/iter. Eval: 0.1143 s/iter. Total: 0.3586 s/iter. ETA=0:01:15
[02/18 09:51:30] mask2former INFO: Inference done 896/1092. Dataloading: 0.0053 s/iter. Inference: 0.2388 s/iter. Eval: 0.1145 s/iter. Total: 0.3586 s/iter. ETA=0:01:10
[02/18 09:51:35] mask2former INFO: Inference done 911/1092. Dataloading: 0.0053 s/iter. Inference: 0.2389 s/iter. Eval: 0.1144 s/iter. Total: 0.3586 s/iter. ETA=0:01:04
[02/18 09:51:41] mask2former INFO: Inference done 925/1092. Dataloading: 0.0053 s/iter. Inference: 0.2389 s/iter. Eval: 0.1145 s/iter. Total: 0.3588 s/iter. ETA=0:00:59
[02/18 09:51:46] mask2former INFO: Inference done 939/1092. Dataloading: 0.0053 s/iter. Inference: 0.2390 s/iter. Eval: 0.1146 s/iter. Total: 0.3589 s/iter. ETA=0:00:54
[02/18 09:51:51] mask2former INFO: Inference done 953/1092. Dataloading: 0.0053 s/iter. Inference: 0.2390 s/iter. Eval: 0.1148 s/iter. Total: 0.3591 s/iter. ETA=0:00:49
[02/18 09:51:56] mask2former INFO: Inference done 967/1092. Dataloading: 0.0053 s/iter. Inference: 0.2392 s/iter. Eval: 0.1149 s/iter. Total: 0.3594 s/iter. ETA=0:00:44
[02/18 09:52:02] mask2former INFO: Inference done 982/1092. Dataloading: 0.0053 s/iter. Inference: 0.2391 s/iter. Eval: 0.1148 s/iter. Total: 0.3593 s/iter. ETA=0:00:39
[02/18 09:52:07] mask2former INFO: Inference done 996/1092. Dataloading: 0.0053 s/iter. Inference: 0.2391 s/iter. Eval: 0.1149 s/iter. Total: 0.3594 s/iter. ETA=0:00:34
[02/18 09:52:12] mask2former INFO: Inference done 1010/1092. Dataloading: 0.0053 s/iter. Inference: 0.2391 s/iter. Eval: 0.1150 s/iter. Total: 0.3594 s/iter. ETA=0:00:29
[02/18 09:52:17] mask2former INFO: Inference done 1024/1092. Dataloading: 0.0053 s/iter. Inference: 0.2390 s/iter. Eval: 0.1150 s/iter. Total: 0.3595 s/iter. ETA=0:00:24
[02/18 09:52:22] mask2former INFO: Inference done 1038/1092. Dataloading: 0.0053 s/iter. Inference: 0.2392 s/iter. Eval: 0.1150 s/iter. Total: 0.3596 s/iter. ETA=0:00:19
[02/18 09:52:27] mask2former INFO: Inference done 1053/1092. Dataloading: 0.0053 s/iter. Inference: 0.2392 s/iter. Eval: 0.1149 s/iter. Total: 0.3595 s/iter. ETA=0:00:14
[02/18 09:52:33] mask2former INFO: Inference done 1068/1092. Dataloading: 0.0053 s/iter. Inference: 0.2392 s/iter. Eval: 0.1148 s/iter. Total: 0.3594 s/iter. ETA=0:00:08
[02/18 09:52:38] mask2former INFO: Inference done 1081/1092. Dataloading: 0.0053 s/iter. Inference: 0.2393 s/iter. Eval: 0.1151 s/iter. Total: 0.3597 s/iter. ETA=0:00:03
[02/18 11:01:55] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 11:01:55] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 11:01:55] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 11:02:10] mask2former INFO: Inference done 11/1092. Dataloading: 0.0051 s/iter. Inference: 0.2429 s/iter. Eval: 0.1171 s/iter. Total: 0.3651 s/iter. ETA=0:06:34
[02/18 11:02:15] mask2former INFO: Inference done 25/1092. Dataloading: 0.0054 s/iter. Inference: 0.2417 s/iter. Eval: 0.1166 s/iter. Total: 0.3638 s/iter. ETA=0:06:28
[02/18 11:02:20] mask2former INFO: Inference done 40/1092. Dataloading: 0.0056 s/iter. Inference: 0.2372 s/iter. Eval: 0.1099 s/iter. Total: 0.3527 s/iter. ETA=0:06:11
[02/18 11:02:25] mask2former INFO: Inference done 55/1092. Dataloading: 0.0057 s/iter. Inference: 0.2374 s/iter. Eval: 0.1087 s/iter. Total: 0.3519 s/iter. ETA=0:06:04
[02/18 11:02:30] mask2former INFO: Inference done 70/1092. Dataloading: 0.0055 s/iter. Inference: 0.2360 s/iter. Eval: 0.1106 s/iter. Total: 0.3523 s/iter. ETA=0:05:59
[02/18 11:02:36] mask2former INFO: Inference done 85/1092. Dataloading: 0.0054 s/iter. Inference: 0.2367 s/iter. Eval: 0.1089 s/iter. Total: 0.3511 s/iter. ETA=0:05:53
[02/18 11:02:41] mask2former INFO: Inference done 100/1092. Dataloading: 0.0053 s/iter. Inference: 0.2365 s/iter. Eval: 0.1090 s/iter. Total: 0.3509 s/iter. ETA=0:05:48
[02/18 11:02:46] mask2former INFO: Inference done 114/1092. Dataloading: 0.0054 s/iter. Inference: 0.2387 s/iter. Eval: 0.1105 s/iter. Total: 0.3547 s/iter. ETA=0:05:46
[02/18 11:02:51] mask2former INFO: Inference done 128/1092. Dataloading: 0.0053 s/iter. Inference: 0.2394 s/iter. Eval: 0.1120 s/iter. Total: 0.3567 s/iter. ETA=0:05:43
[02/18 11:02:57] mask2former INFO: Inference done 143/1092. Dataloading: 0.0053 s/iter. Inference: 0.2393 s/iter. Eval: 0.1109 s/iter. Total: 0.3556 s/iter. ETA=0:05:37
[02/18 11:03:02] mask2former INFO: Inference done 157/1092. Dataloading: 0.0053 s/iter. Inference: 0.2399 s/iter. Eval: 0.1122 s/iter. Total: 0.3575 s/iter. ETA=0:05:34
[02/18 11:03:07] mask2former INFO: Inference done 171/1092. Dataloading: 0.0053 s/iter. Inference: 0.2403 s/iter. Eval: 0.1122 s/iter. Total: 0.3579 s/iter. ETA=0:05:29
[02/18 11:03:12] mask2former INFO: Inference done 185/1092. Dataloading: 0.0053 s/iter. Inference: 0.2401 s/iter. Eval: 0.1129 s/iter. Total: 0.3584 s/iter. ETA=0:05:25
[02/18 11:03:17] mask2former INFO: Inference done 199/1092. Dataloading: 0.0054 s/iter. Inference: 0.2406 s/iter. Eval: 0.1128 s/iter. Total: 0.3588 s/iter. ETA=0:05:20
[02/18 11:03:22] mask2former INFO: Inference done 213/1092. Dataloading: 0.0054 s/iter. Inference: 0.2405 s/iter. Eval: 0.1132 s/iter. Total: 0.3592 s/iter. ETA=0:05:15
[02/18 11:03:27] mask2former INFO: Inference done 228/1092. Dataloading: 0.0054 s/iter. Inference: 0.2405 s/iter. Eval: 0.1129 s/iter. Total: 0.3589 s/iter. ETA=0:05:10
[02/18 11:03:33] mask2former INFO: Inference done 243/1092. Dataloading: 0.0054 s/iter. Inference: 0.2401 s/iter. Eval: 0.1126 s/iter. Total: 0.3582 s/iter. ETA=0:05:04
[02/18 11:03:38] mask2former INFO: Inference done 258/1092. Dataloading: 0.0055 s/iter. Inference: 0.2398 s/iter. Eval: 0.1125 s/iter. Total: 0.3578 s/iter. ETA=0:04:58
[02/18 11:03:43] mask2former INFO: Inference done 273/1092. Dataloading: 0.0054 s/iter. Inference: 0.2399 s/iter. Eval: 0.1120 s/iter. Total: 0.3574 s/iter. ETA=0:04:52
[02/18 11:03:49] mask2former INFO: Inference done 288/1092. Dataloading: 0.0054 s/iter. Inference: 0.2394 s/iter. Eval: 0.1125 s/iter. Total: 0.3574 s/iter. ETA=0:04:47
[02/18 11:03:54] mask2former INFO: Inference done 302/1092. Dataloading: 0.0054 s/iter. Inference: 0.2394 s/iter. Eval: 0.1125 s/iter. Total: 0.3574 s/iter. ETA=0:04:42
[02/18 11:03:59] mask2former INFO: Inference done 317/1092. Dataloading: 0.0054 s/iter. Inference: 0.2393 s/iter. Eval: 0.1122 s/iter. Total: 0.3570 s/iter. ETA=0:04:36
[02/18 11:04:04] mask2former INFO: Inference done 330/1092. Dataloading: 0.0054 s/iter. Inference: 0.2402 s/iter. Eval: 0.1124 s/iter. Total: 0.3581 s/iter. ETA=0:04:32
[02/18 11:04:09] mask2former INFO: Inference done 344/1092. Dataloading: 0.0054 s/iter. Inference: 0.2405 s/iter. Eval: 0.1124 s/iter. Total: 0.3584 s/iter. ETA=0:04:28
[02/18 11:04:14] mask2former INFO: Inference done 358/1092. Dataloading: 0.0054 s/iter. Inference: 0.2402 s/iter. Eval: 0.1127 s/iter. Total: 0.3584 s/iter. ETA=0:04:23
[02/18 11:04:19] mask2former INFO: Inference done 373/1092. Dataloading: 0.0054 s/iter. Inference: 0.2400 s/iter. Eval: 0.1125 s/iter. Total: 0.3580 s/iter. ETA=0:04:17
[02/18 11:04:24] mask2former INFO: Inference done 387/1092. Dataloading: 0.0054 s/iter. Inference: 0.2402 s/iter. Eval: 0.1128 s/iter. Total: 0.3585 s/iter. ETA=0:04:12
[02/18 11:04:30] mask2former INFO: Inference done 401/1092. Dataloading: 0.0054 s/iter. Inference: 0.2401 s/iter. Eval: 0.1133 s/iter. Total: 0.3588 s/iter. ETA=0:04:07
[02/18 11:04:35] mask2former INFO: Inference done 416/1092. Dataloading: 0.0053 s/iter. Inference: 0.2397 s/iter. Eval: 0.1133 s/iter. Total: 0.3584 s/iter. ETA=0:04:02
[02/18 11:04:40] mask2former INFO: Inference done 430/1092. Dataloading: 0.0053 s/iter. Inference: 0.2402 s/iter. Eval: 0.1137 s/iter. Total: 0.3594 s/iter. ETA=0:03:57
[02/18 11:04:45] mask2former INFO: Inference done 444/1092. Dataloading: 0.0053 s/iter. Inference: 0.2400 s/iter. Eval: 0.1141 s/iter. Total: 0.3594 s/iter. ETA=0:03:52
[02/18 11:04:50] mask2former INFO: Inference done 459/1092. Dataloading: 0.0053 s/iter. Inference: 0.2398 s/iter. Eval: 0.1135 s/iter. Total: 0.3588 s/iter. ETA=0:03:47
[02/18 11:04:56] mask2former INFO: Inference done 475/1092. Dataloading: 0.0053 s/iter. Inference: 0.2399 s/iter. Eval: 0.1127 s/iter. Total: 0.3580 s/iter. ETA=0:03:40
[02/18 11:05:01] mask2former INFO: Inference done 490/1092. Dataloading: 0.0053 s/iter. Inference: 0.2397 s/iter. Eval: 0.1128 s/iter. Total: 0.3579 s/iter. ETA=0:03:35
[02/18 11:05:06] mask2former INFO: Inference done 504/1092. Dataloading: 0.0054 s/iter. Inference: 0.2403 s/iter. Eval: 0.1128 s/iter. Total: 0.3586 s/iter. ETA=0:03:30
[02/18 11:05:12] mask2former INFO: Inference done 518/1092. Dataloading: 0.0054 s/iter. Inference: 0.2408 s/iter. Eval: 0.1127 s/iter. Total: 0.3589 s/iter. ETA=0:03:26
[02/18 11:05:17] mask2former INFO: Inference done 533/1092. Dataloading: 0.0054 s/iter. Inference: 0.2405 s/iter. Eval: 0.1127 s/iter. Total: 0.3586 s/iter. ETA=0:03:20
[02/18 11:05:22] mask2former INFO: Inference done 548/1092. Dataloading: 0.0053 s/iter. Inference: 0.2401 s/iter. Eval: 0.1126 s/iter. Total: 0.3580 s/iter. ETA=0:03:14
[02/18 11:05:27] mask2former INFO: Inference done 562/1092. Dataloading: 0.0053 s/iter. Inference: 0.2401 s/iter. Eval: 0.1126 s/iter. Total: 0.3581 s/iter. ETA=0:03:09
[02/18 11:05:32] mask2former INFO: Inference done 577/1092. Dataloading: 0.0053 s/iter. Inference: 0.2399 s/iter. Eval: 0.1124 s/iter. Total: 0.3578 s/iter. ETA=0:03:04
[02/18 11:05:37] mask2former INFO: Inference done 592/1092. Dataloading: 0.0053 s/iter. Inference: 0.2397 s/iter. Eval: 0.1125 s/iter. Total: 0.3576 s/iter. ETA=0:02:58
[02/18 11:05:43] mask2former INFO: Inference done 607/1092. Dataloading: 0.0053 s/iter. Inference: 0.2399 s/iter. Eval: 0.1124 s/iter. Total: 0.3577 s/iter. ETA=0:02:53
[02/18 11:05:48] mask2former INFO: Inference done 622/1092. Dataloading: 0.0053 s/iter. Inference: 0.2397 s/iter. Eval: 0.1123 s/iter. Total: 0.3574 s/iter. ETA=0:02:47
[02/18 11:05:53] mask2former INFO: Inference done 636/1092. Dataloading: 0.0053 s/iter. Inference: 0.2397 s/iter. Eval: 0.1124 s/iter. Total: 0.3575 s/iter. ETA=0:02:43
[02/18 11:05:58] mask2former INFO: Inference done 650/1092. Dataloading: 0.0053 s/iter. Inference: 0.2400 s/iter. Eval: 0.1124 s/iter. Total: 0.3577 s/iter. ETA=0:02:38
[02/18 11:06:03] mask2former INFO: Inference done 664/1092. Dataloading: 0.0053 s/iter. Inference: 0.2400 s/iter. Eval: 0.1124 s/iter. Total: 0.3579 s/iter. ETA=0:02:33
[02/18 11:06:08] mask2former INFO: Inference done 679/1092. Dataloading: 0.0053 s/iter. Inference: 0.2398 s/iter. Eval: 0.1124 s/iter. Total: 0.3576 s/iter. ETA=0:02:27
[02/18 11:06:14] mask2former INFO: Inference done 694/1092. Dataloading: 0.0053 s/iter. Inference: 0.2397 s/iter. Eval: 0.1125 s/iter. Total: 0.3576 s/iter. ETA=0:02:22
[02/18 11:06:19] mask2former INFO: Inference done 709/1092. Dataloading: 0.0053 s/iter. Inference: 0.2397 s/iter. Eval: 0.1125 s/iter. Total: 0.3575 s/iter. ETA=0:02:16
[02/18 11:06:24] mask2former INFO: Inference done 723/1092. Dataloading: 0.0053 s/iter. Inference: 0.2396 s/iter. Eval: 0.1126 s/iter. Total: 0.3575 s/iter. ETA=0:02:11
[02/18 11:06:29] mask2former INFO: Inference done 737/1092. Dataloading: 0.0053 s/iter. Inference: 0.2400 s/iter. Eval: 0.1125 s/iter. Total: 0.3579 s/iter. ETA=0:02:07
[02/18 11:06:34] mask2former INFO: Inference done 751/1092. Dataloading: 0.0055 s/iter. Inference: 0.2396 s/iter. Eval: 0.1127 s/iter. Total: 0.3579 s/iter. ETA=0:02:02
[02/18 11:06:40] mask2former INFO: Inference done 766/1092. Dataloading: 0.0054 s/iter. Inference: 0.2395 s/iter. Eval: 0.1128 s/iter. Total: 0.3578 s/iter. ETA=0:01:56
[02/18 11:06:45] mask2former INFO: Inference done 781/1092. Dataloading: 0.0054 s/iter. Inference: 0.2394 s/iter. Eval: 0.1128 s/iter. Total: 0.3577 s/iter. ETA=0:01:51
[02/18 11:06:50] mask2former INFO: Inference done 796/1092. Dataloading: 0.0054 s/iter. Inference: 0.2395 s/iter. Eval: 0.1127 s/iter. Total: 0.3577 s/iter. ETA=0:01:45
[02/18 11:06:56] mask2former INFO: Inference done 811/1092. Dataloading: 0.0054 s/iter. Inference: 0.2395 s/iter. Eval: 0.1126 s/iter. Total: 0.3577 s/iter. ETA=0:01:40
[02/18 11:07:01] mask2former INFO: Inference done 827/1092. Dataloading: 0.0054 s/iter. Inference: 0.2392 s/iter. Eval: 0.1125 s/iter. Total: 0.3572 s/iter. ETA=0:01:34
[02/18 11:07:06] mask2former INFO: Inference done 842/1092. Dataloading: 0.0054 s/iter. Inference: 0.2390 s/iter. Eval: 0.1126 s/iter. Total: 0.3570 s/iter. ETA=0:01:29
[02/18 11:07:11] mask2former INFO: Inference done 856/1092. Dataloading: 0.0054 s/iter. Inference: 0.2390 s/iter. Eval: 0.1127 s/iter. Total: 0.3572 s/iter. ETA=0:01:24
[02/18 11:07:17] mask2former INFO: Inference done 870/1092. Dataloading: 0.0054 s/iter. Inference: 0.2391 s/iter. Eval: 0.1128 s/iter. Total: 0.3574 s/iter. ETA=0:01:19
[02/18 11:07:22] mask2former INFO: Inference done 884/1092. Dataloading: 0.0054 s/iter. Inference: 0.2392 s/iter. Eval: 0.1128 s/iter. Total: 0.3576 s/iter. ETA=0:01:14
[02/18 11:07:27] mask2former INFO: Inference done 898/1092. Dataloading: 0.0054 s/iter. Inference: 0.2394 s/iter. Eval: 0.1128 s/iter. Total: 0.3576 s/iter. ETA=0:01:09
[02/18 11:07:32] mask2former INFO: Inference done 912/1092. Dataloading: 0.0054 s/iter. Inference: 0.2393 s/iter. Eval: 0.1129 s/iter. Total: 0.3576 s/iter. ETA=0:01:04
[02/18 11:07:37] mask2former INFO: Inference done 927/1092. Dataloading: 0.0054 s/iter. Inference: 0.2390 s/iter. Eval: 0.1128 s/iter. Total: 0.3573 s/iter. ETA=0:00:58
[02/18 11:07:42] mask2former INFO: Inference done 941/1092. Dataloading: 0.0054 s/iter. Inference: 0.2390 s/iter. Eval: 0.1129 s/iter. Total: 0.3573 s/iter. ETA=0:00:53
[02/18 11:07:47] mask2former INFO: Inference done 956/1092. Dataloading: 0.0054 s/iter. Inference: 0.2389 s/iter. Eval: 0.1129 s/iter. Total: 0.3573 s/iter. ETA=0:00:48
[02/18 11:07:52] mask2former INFO: Inference done 970/1092. Dataloading: 0.0054 s/iter. Inference: 0.2390 s/iter. Eval: 0.1129 s/iter. Total: 0.3574 s/iter. ETA=0:00:43
[02/18 11:07:57] mask2former INFO: Inference done 984/1092. Dataloading: 0.0054 s/iter. Inference: 0.2392 s/iter. Eval: 0.1128 s/iter. Total: 0.3575 s/iter. ETA=0:00:38
[02/18 11:08:03] mask2former INFO: Inference done 998/1092. Dataloading: 0.0054 s/iter. Inference: 0.2393 s/iter. Eval: 0.1128 s/iter. Total: 0.3576 s/iter. ETA=0:00:33
[02/18 11:08:08] mask2former INFO: Inference done 1012/1092. Dataloading: 0.0054 s/iter. Inference: 0.2394 s/iter. Eval: 0.1130 s/iter. Total: 0.3578 s/iter. ETA=0:00:28
[02/18 11:08:13] mask2former INFO: Inference done 1027/1092. Dataloading: 0.0054 s/iter. Inference: 0.2392 s/iter. Eval: 0.1129 s/iter. Total: 0.3576 s/iter. ETA=0:00:23
[02/18 11:08:18] mask2former INFO: Inference done 1041/1092. Dataloading: 0.0054 s/iter. Inference: 0.2394 s/iter. Eval: 0.1131 s/iter. Total: 0.3579 s/iter. ETA=0:00:18
[02/18 11:08:23] mask2former INFO: Inference done 1056/1092. Dataloading: 0.0054 s/iter. Inference: 0.2392 s/iter. Eval: 0.1130 s/iter. Total: 0.3577 s/iter. ETA=0:00:12
[02/18 11:08:29] mask2former INFO: Inference done 1071/1092. Dataloading: 0.0054 s/iter. Inference: 0.2392 s/iter. Eval: 0.1131 s/iter. Total: 0.3577 s/iter. ETA=0:00:07
[02/18 11:08:34] mask2former INFO: Inference done 1086/1092. Dataloading: 0.0054 s/iter. Inference: 0.2391 s/iter. Eval: 0.1130 s/iter. Total: 0.3575 s/iter. ETA=0:00:02
[02/18 12:11:35] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 12:11:35] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 12:11:35] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 12:11:50] mask2former INFO: Inference done 11/1092. Dataloading: 0.0044 s/iter. Inference: 0.2484 s/iter. Eval: 0.1142 s/iter. Total: 0.3671 s/iter. ETA=0:06:36
[02/18 12:11:55] mask2former INFO: Inference done 25/1092. Dataloading: 0.0053 s/iter. Inference: 0.2491 s/iter. Eval: 0.1167 s/iter. Total: 0.3712 s/iter. ETA=0:06:36
[02/18 12:12:00] mask2former INFO: Inference done 40/1092. Dataloading: 0.0051 s/iter. Inference: 0.2422 s/iter. Eval: 0.1164 s/iter. Total: 0.3637 s/iter. ETA=0:06:22
[02/18 12:12:06] mask2former INFO: Inference done 54/1092. Dataloading: 0.0052 s/iter. Inference: 0.2424 s/iter. Eval: 0.1187 s/iter. Total: 0.3663 s/iter. ETA=0:06:20
[02/18 12:12:11] mask2former INFO: Inference done 69/1092. Dataloading: 0.0056 s/iter. Inference: 0.2417 s/iter. Eval: 0.1168 s/iter. Total: 0.3641 s/iter. ETA=0:06:12
[02/18 12:12:16] mask2former INFO: Inference done 84/1092. Dataloading: 0.0053 s/iter. Inference: 0.2406 s/iter. Eval: 0.1151 s/iter. Total: 0.3611 s/iter. ETA=0:06:03
[02/18 12:12:21] mask2former INFO: Inference done 98/1092. Dataloading: 0.0052 s/iter. Inference: 0.2399 s/iter. Eval: 0.1162 s/iter. Total: 0.3614 s/iter. ETA=0:05:59
[02/18 12:12:26] mask2former INFO: Inference done 112/1092. Dataloading: 0.0052 s/iter. Inference: 0.2399 s/iter. Eval: 0.1165 s/iter. Total: 0.3616 s/iter. ETA=0:05:54
[02/18 12:12:32] mask2former INFO: Inference done 127/1092. Dataloading: 0.0051 s/iter. Inference: 0.2385 s/iter. Eval: 0.1158 s/iter. Total: 0.3595 s/iter. ETA=0:05:46
[02/18 12:12:37] mask2former INFO: Inference done 142/1092. Dataloading: 0.0051 s/iter. Inference: 0.2391 s/iter. Eval: 0.1145 s/iter. Total: 0.3588 s/iter. ETA=0:05:40
[02/18 12:12:42] mask2former INFO: Inference done 156/1092. Dataloading: 0.0051 s/iter. Inference: 0.2397 s/iter. Eval: 0.1149 s/iter. Total: 0.3597 s/iter. ETA=0:05:36
[02/18 12:12:47] mask2former INFO: Inference done 170/1092. Dataloading: 0.0051 s/iter. Inference: 0.2400 s/iter. Eval: 0.1149 s/iter. Total: 0.3601 s/iter. ETA=0:05:31
[02/18 12:12:52] mask2former INFO: Inference done 185/1092. Dataloading: 0.0051 s/iter. Inference: 0.2406 s/iter. Eval: 0.1144 s/iter. Total: 0.3601 s/iter. ETA=0:05:26
[02/18 12:12:58] mask2former INFO: Inference done 200/1092. Dataloading: 0.0055 s/iter. Inference: 0.2400 s/iter. Eval: 0.1136 s/iter. Total: 0.3592 s/iter. ETA=0:05:20
[02/18 12:13:03] mask2former INFO: Inference done 214/1092. Dataloading: 0.0056 s/iter. Inference: 0.2390 s/iter. Eval: 0.1150 s/iter. Total: 0.3597 s/iter. ETA=0:05:15
[02/18 12:13:08] mask2former INFO: Inference done 228/1092. Dataloading: 0.0056 s/iter. Inference: 0.2389 s/iter. Eval: 0.1152 s/iter. Total: 0.3598 s/iter. ETA=0:05:10
[02/18 12:13:13] mask2former INFO: Inference done 242/1092. Dataloading: 0.0057 s/iter. Inference: 0.2387 s/iter. Eval: 0.1155 s/iter. Total: 0.3600 s/iter. ETA=0:05:06
[02/18 12:13:18] mask2former INFO: Inference done 256/1092. Dataloading: 0.0057 s/iter. Inference: 0.2397 s/iter. Eval: 0.1153 s/iter. Total: 0.3608 s/iter. ETA=0:05:01
[02/18 12:13:23] mask2former INFO: Inference done 270/1092. Dataloading: 0.0056 s/iter. Inference: 0.2397 s/iter. Eval: 0.1154 s/iter. Total: 0.3608 s/iter. ETA=0:04:56
[02/18 12:13:29] mask2former INFO: Inference done 284/1092. Dataloading: 0.0058 s/iter. Inference: 0.2407 s/iter. Eval: 0.1151 s/iter. Total: 0.3617 s/iter. ETA=0:04:52
[02/18 12:13:34] mask2former INFO: Inference done 299/1092. Dataloading: 0.0058 s/iter. Inference: 0.2407 s/iter. Eval: 0.1141 s/iter. Total: 0.3606 s/iter. ETA=0:04:45
[02/18 12:13:39] mask2former INFO: Inference done 313/1092. Dataloading: 0.0058 s/iter. Inference: 0.2410 s/iter. Eval: 0.1137 s/iter. Total: 0.3605 s/iter. ETA=0:04:40
[02/18 12:13:44] mask2former INFO: Inference done 328/1092. Dataloading: 0.0059 s/iter. Inference: 0.2405 s/iter. Eval: 0.1133 s/iter. Total: 0.3598 s/iter. ETA=0:04:34
[02/18 12:13:49] mask2former INFO: Inference done 342/1092. Dataloading: 0.0059 s/iter. Inference: 0.2405 s/iter. Eval: 0.1136 s/iter. Total: 0.3600 s/iter. ETA=0:04:29
[02/18 12:13:54] mask2former INFO: Inference done 356/1092. Dataloading: 0.0058 s/iter. Inference: 0.2401 s/iter. Eval: 0.1142 s/iter. Total: 0.3602 s/iter. ETA=0:04:25
[02/18 12:13:59] mask2former INFO: Inference done 371/1092. Dataloading: 0.0058 s/iter. Inference: 0.2396 s/iter. Eval: 0.1137 s/iter. Total: 0.3592 s/iter. ETA=0:04:18
[02/18 12:14:04] mask2former INFO: Inference done 386/1092. Dataloading: 0.0058 s/iter. Inference: 0.2390 s/iter. Eval: 0.1136 s/iter. Total: 0.3584 s/iter. ETA=0:04:13
[02/18 12:14:09] mask2former INFO: Inference done 400/1092. Dataloading: 0.0057 s/iter. Inference: 0.2387 s/iter. Eval: 0.1141 s/iter. Total: 0.3586 s/iter. ETA=0:04:08
[02/18 12:14:14] mask2former INFO: Inference done 414/1092. Dataloading: 0.0057 s/iter. Inference: 0.2386 s/iter. Eval: 0.1143 s/iter. Total: 0.3587 s/iter. ETA=0:04:03
[02/18 12:14:19] mask2former INFO: Inference done 428/1092. Dataloading: 0.0058 s/iter. Inference: 0.2385 s/iter. Eval: 0.1146 s/iter. Total: 0.3589 s/iter. ETA=0:03:58
[02/18 12:14:25] mask2former INFO: Inference done 442/1092. Dataloading: 0.0057 s/iter. Inference: 0.2387 s/iter. Eval: 0.1144 s/iter. Total: 0.3589 s/iter. ETA=0:03:53
[02/18 12:14:30] mask2former INFO: Inference done 456/1092. Dataloading: 0.0058 s/iter. Inference: 0.2388 s/iter. Eval: 0.1144 s/iter. Total: 0.3590 s/iter. ETA=0:03:48
[02/18 12:14:35] mask2former INFO: Inference done 472/1092. Dataloading: 0.0057 s/iter. Inference: 0.2381 s/iter. Eval: 0.1140 s/iter. Total: 0.3579 s/iter. ETA=0:03:41
[02/18 12:14:40] mask2former INFO: Inference done 487/1092. Dataloading: 0.0057 s/iter. Inference: 0.2381 s/iter. Eval: 0.1138 s/iter. Total: 0.3578 s/iter. ETA=0:03:36
[02/18 12:14:45] mask2former INFO: Inference done 501/1092. Dataloading: 0.0057 s/iter. Inference: 0.2379 s/iter. Eval: 0.1141 s/iter. Total: 0.3577 s/iter. ETA=0:03:31
[02/18 12:14:50] mask2former INFO: Inference done 515/1092. Dataloading: 0.0058 s/iter. Inference: 0.2378 s/iter. Eval: 0.1141 s/iter. Total: 0.3578 s/iter. ETA=0:03:26
[02/18 12:14:55] mask2former INFO: Inference done 530/1092. Dataloading: 0.0058 s/iter. Inference: 0.2380 s/iter. Eval: 0.1137 s/iter. Total: 0.3576 s/iter. ETA=0:03:20
[02/18 12:15:01] mask2former INFO: Inference done 545/1092. Dataloading: 0.0057 s/iter. Inference: 0.2384 s/iter. Eval: 0.1135 s/iter. Total: 0.3577 s/iter. ETA=0:03:15
[02/18 12:15:06] mask2former INFO: Inference done 559/1092. Dataloading: 0.0057 s/iter. Inference: 0.2386 s/iter. Eval: 0.1133 s/iter. Total: 0.3577 s/iter. ETA=0:03:10
[02/18 12:15:11] mask2former INFO: Inference done 574/1092. Dataloading: 0.0057 s/iter. Inference: 0.2386 s/iter. Eval: 0.1133 s/iter. Total: 0.3577 s/iter. ETA=0:03:05
[02/18 12:15:16] mask2former INFO: Inference done 588/1092. Dataloading: 0.0057 s/iter. Inference: 0.2389 s/iter. Eval: 0.1133 s/iter. Total: 0.3580 s/iter. ETA=0:03:00
[02/18 12:15:22] mask2former INFO: Inference done 602/1092. Dataloading: 0.0057 s/iter. Inference: 0.2394 s/iter. Eval: 0.1134 s/iter. Total: 0.3586 s/iter. ETA=0:02:55
[02/18 12:15:27] mask2former INFO: Inference done 616/1092. Dataloading: 0.0057 s/iter. Inference: 0.2394 s/iter. Eval: 0.1138 s/iter. Total: 0.3591 s/iter. ETA=0:02:50
[02/18 12:15:32] mask2former INFO: Inference done 630/1092. Dataloading: 0.0058 s/iter. Inference: 0.2391 s/iter. Eval: 0.1141 s/iter. Total: 0.3591 s/iter. ETA=0:02:45
[02/18 12:15:37] mask2former INFO: Inference done 644/1092. Dataloading: 0.0058 s/iter. Inference: 0.2395 s/iter. Eval: 0.1141 s/iter. Total: 0.3595 s/iter. ETA=0:02:41
[02/18 12:15:43] mask2former INFO: Inference done 659/1092. Dataloading: 0.0058 s/iter. Inference: 0.2395 s/iter. Eval: 0.1140 s/iter. Total: 0.3594 s/iter. ETA=0:02:35
[02/18 12:15:48] mask2former INFO: Inference done 674/1092. Dataloading: 0.0057 s/iter. Inference: 0.2391 s/iter. Eval: 0.1141 s/iter. Total: 0.3591 s/iter. ETA=0:02:30
[02/18 12:15:53] mask2former INFO: Inference done 689/1092. Dataloading: 0.0057 s/iter. Inference: 0.2390 s/iter. Eval: 0.1142 s/iter. Total: 0.3590 s/iter. ETA=0:02:24
[02/18 12:15:58] mask2former INFO: Inference done 704/1092. Dataloading: 0.0057 s/iter. Inference: 0.2388 s/iter. Eval: 0.1142 s/iter. Total: 0.3588 s/iter. ETA=0:02:19
[02/18 12:16:04] mask2former INFO: Inference done 718/1092. Dataloading: 0.0057 s/iter. Inference: 0.2388 s/iter. Eval: 0.1142 s/iter. Total: 0.3588 s/iter. ETA=0:02:14
[02/18 12:16:09] mask2former INFO: Inference done 733/1092. Dataloading: 0.0057 s/iter. Inference: 0.2387 s/iter. Eval: 0.1139 s/iter. Total: 0.3584 s/iter. ETA=0:02:08
[02/18 12:16:14] mask2former INFO: Inference done 748/1092. Dataloading: 0.0057 s/iter. Inference: 0.2385 s/iter. Eval: 0.1137 s/iter. Total: 0.3580 s/iter. ETA=0:02:03
[02/18 12:16:19] mask2former INFO: Inference done 763/1092. Dataloading: 0.0057 s/iter. Inference: 0.2384 s/iter. Eval: 0.1137 s/iter. Total: 0.3578 s/iter. ETA=0:01:57
[02/18 12:16:24] mask2former INFO: Inference done 777/1092. Dataloading: 0.0057 s/iter. Inference: 0.2387 s/iter. Eval: 0.1135 s/iter. Total: 0.3580 s/iter. ETA=0:01:52
[02/18 12:16:29] mask2former INFO: Inference done 791/1092. Dataloading: 0.0057 s/iter. Inference: 0.2389 s/iter. Eval: 0.1138 s/iter. Total: 0.3584 s/iter. ETA=0:01:47
[02/18 12:16:34] mask2former INFO: Inference done 805/1092. Dataloading: 0.0057 s/iter. Inference: 0.2387 s/iter. Eval: 0.1140 s/iter. Total: 0.3585 s/iter. ETA=0:01:42
[02/18 12:16:40] mask2former INFO: Inference done 820/1092. Dataloading: 0.0056 s/iter. Inference: 0.2387 s/iter. Eval: 0.1140 s/iter. Total: 0.3585 s/iter. ETA=0:01:37
[02/18 12:16:45] mask2former INFO: Inference done 834/1092. Dataloading: 0.0056 s/iter. Inference: 0.2387 s/iter. Eval: 0.1143 s/iter. Total: 0.3588 s/iter. ETA=0:01:32
[02/18 12:16:50] mask2former INFO: Inference done 849/1092. Dataloading: 0.0056 s/iter. Inference: 0.2383 s/iter. Eval: 0.1146 s/iter. Total: 0.3587 s/iter. ETA=0:01:27
[02/18 12:16:56] mask2former INFO: Inference done 863/1092. Dataloading: 0.0057 s/iter. Inference: 0.2386 s/iter. Eval: 0.1146 s/iter. Total: 0.3590 s/iter. ETA=0:01:22
[02/18 12:17:01] mask2former INFO: Inference done 877/1092. Dataloading: 0.0057 s/iter. Inference: 0.2388 s/iter. Eval: 0.1147 s/iter. Total: 0.3593 s/iter. ETA=0:01:17
[02/18 12:17:06] mask2former INFO: Inference done 891/1092. Dataloading: 0.0057 s/iter. Inference: 0.2388 s/iter. Eval: 0.1150 s/iter. Total: 0.3595 s/iter. ETA=0:01:12
[02/18 12:17:11] mask2former INFO: Inference done 905/1092. Dataloading: 0.0057 s/iter. Inference: 0.2389 s/iter. Eval: 0.1151 s/iter. Total: 0.3598 s/iter. ETA=0:01:07
[02/18 12:17:17] mask2former INFO: Inference done 917/1092. Dataloading: 0.0057 s/iter. Inference: 0.2392 s/iter. Eval: 0.1156 s/iter. Total: 0.3606 s/iter. ETA=0:01:03
[02/18 12:17:22] mask2former INFO: Inference done 930/1092. Dataloading: 0.0057 s/iter. Inference: 0.2393 s/iter. Eval: 0.1158 s/iter. Total: 0.3610 s/iter. ETA=0:00:58
[02/18 12:17:27] mask2former INFO: Inference done 944/1092. Dataloading: 0.0057 s/iter. Inference: 0.2393 s/iter. Eval: 0.1161 s/iter. Total: 0.3612 s/iter. ETA=0:00:53
[02/18 12:17:32] mask2former INFO: Inference done 959/1092. Dataloading: 0.0057 s/iter. Inference: 0.2393 s/iter. Eval: 0.1159 s/iter. Total: 0.3610 s/iter. ETA=0:00:48
[02/18 12:17:37] mask2former INFO: Inference done 974/1092. Dataloading: 0.0057 s/iter. Inference: 0.2392 s/iter. Eval: 0.1156 s/iter. Total: 0.3606 s/iter. ETA=0:00:42
[02/18 12:17:42] mask2former INFO: Inference done 988/1092. Dataloading: 0.0057 s/iter. Inference: 0.2395 s/iter. Eval: 0.1156 s/iter. Total: 0.3608 s/iter. ETA=0:00:37
[02/18 12:17:48] mask2former INFO: Inference done 1003/1092. Dataloading: 0.0057 s/iter. Inference: 0.2395 s/iter. Eval: 0.1154 s/iter. Total: 0.3606 s/iter. ETA=0:00:32
[02/18 12:17:53] mask2former INFO: Inference done 1018/1092. Dataloading: 0.0057 s/iter. Inference: 0.2394 s/iter. Eval: 0.1153 s/iter. Total: 0.3604 s/iter. ETA=0:00:26
[02/18 12:17:58] mask2former INFO: Inference done 1034/1092. Dataloading: 0.0056 s/iter. Inference: 0.2392 s/iter. Eval: 0.1151 s/iter. Total: 0.3600 s/iter. ETA=0:00:20
[02/18 12:18:03] mask2former INFO: Inference done 1049/1092. Dataloading: 0.0056 s/iter. Inference: 0.2390 s/iter. Eval: 0.1151 s/iter. Total: 0.3598 s/iter. ETA=0:00:15
[02/18 12:18:08] mask2former INFO: Inference done 1063/1092. Dataloading: 0.0056 s/iter. Inference: 0.2391 s/iter. Eval: 0.1150 s/iter. Total: 0.3598 s/iter. ETA=0:00:10
[02/18 12:18:13] mask2former INFO: Inference done 1077/1092. Dataloading: 0.0056 s/iter. Inference: 0.2391 s/iter. Eval: 0.1150 s/iter. Total: 0.3598 s/iter. ETA=0:00:05
[02/18 12:18:18] mask2former INFO: Inference done 1092/1092. Dataloading: 0.0056 s/iter. Inference: 0.2388 s/iter. Eval: 0.1151 s/iter. Total: 0.3595 s/iter. ETA=0:00:00
[02/18 13:26:13] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 13:26:13] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 13:26:13] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 13:26:27] mask2former INFO: Inference done 11/1092. Dataloading: 0.0035 s/iter. Inference: 0.2581 s/iter. Eval: 0.1085 s/iter. Total: 0.3702 s/iter. ETA=0:06:40
[02/18 13:26:32] mask2former INFO: Inference done 25/1092. Dataloading: 0.0045 s/iter. Inference: 0.2426 s/iter. Eval: 0.1163 s/iter. Total: 0.3635 s/iter. ETA=0:06:27
[02/18 13:26:38] mask2former INFO: Inference done 40/1092. Dataloading: 0.0048 s/iter. Inference: 0.2415 s/iter. Eval: 0.1107 s/iter. Total: 0.3571 s/iter. ETA=0:06:15
[02/18 13:26:43] mask2former INFO: Inference done 55/1092. Dataloading: 0.0047 s/iter. Inference: 0.2391 s/iter. Eval: 0.1085 s/iter. Total: 0.3523 s/iter. ETA=0:06:05
[02/18 13:26:48] mask2former INFO: Inference done 70/1092. Dataloading: 0.0046 s/iter. Inference: 0.2387 s/iter. Eval: 0.1107 s/iter. Total: 0.3540 s/iter. ETA=0:06:01
[02/18 13:26:53] mask2former INFO: Inference done 83/1092. Dataloading: 0.0047 s/iter. Inference: 0.2422 s/iter. Eval: 0.1125 s/iter. Total: 0.3595 s/iter. ETA=0:06:02
[02/18 13:26:58] mask2former INFO: Inference done 98/1092. Dataloading: 0.0047 s/iter. Inference: 0.2410 s/iter. Eval: 0.1128 s/iter. Total: 0.3586 s/iter. ETA=0:05:56
[02/18 13:27:03] mask2former INFO: Inference done 112/1092. Dataloading: 0.0047 s/iter. Inference: 0.2395 s/iter. Eval: 0.1142 s/iter. Total: 0.3584 s/iter. ETA=0:05:51
[02/18 13:27:09] mask2former INFO: Inference done 127/1092. Dataloading: 0.0048 s/iter. Inference: 0.2399 s/iter. Eval: 0.1132 s/iter. Total: 0.3580 s/iter. ETA=0:05:45
[02/18 13:27:14] mask2former INFO: Inference done 142/1092. Dataloading: 0.0048 s/iter. Inference: 0.2392 s/iter. Eval: 0.1134 s/iter. Total: 0.3575 s/iter. ETA=0:05:39
[02/18 13:27:19] mask2former INFO: Inference done 157/1092. Dataloading: 0.0048 s/iter. Inference: 0.2393 s/iter. Eval: 0.1126 s/iter. Total: 0.3568 s/iter. ETA=0:05:33
[02/18 13:27:24] mask2former INFO: Inference done 171/1092. Dataloading: 0.0049 s/iter. Inference: 0.2395 s/iter. Eval: 0.1132 s/iter. Total: 0.3578 s/iter. ETA=0:05:29
[02/18 13:27:30] mask2former INFO: Inference done 186/1092. Dataloading: 0.0049 s/iter. Inference: 0.2392 s/iter. Eval: 0.1126 s/iter. Total: 0.3567 s/iter. ETA=0:05:23
[02/18 13:27:35] mask2former INFO: Inference done 201/1092. Dataloading: 0.0050 s/iter. Inference: 0.2396 s/iter. Eval: 0.1125 s/iter. Total: 0.3572 s/iter. ETA=0:05:18
[02/18 13:27:40] mask2former INFO: Inference done 216/1092. Dataloading: 0.0050 s/iter. Inference: 0.2384 s/iter. Eval: 0.1130 s/iter. Total: 0.3565 s/iter. ETA=0:05:12
[02/18 13:27:46] mask2former INFO: Inference done 231/1092. Dataloading: 0.0051 s/iter. Inference: 0.2390 s/iter. Eval: 0.1125 s/iter. Total: 0.3567 s/iter. ETA=0:05:07
[02/18 13:27:51] mask2former INFO: Inference done 245/1092. Dataloading: 0.0051 s/iter. Inference: 0.2388 s/iter. Eval: 0.1134 s/iter. Total: 0.3573 s/iter. ETA=0:05:02
[02/18 13:27:56] mask2former INFO: Inference done 259/1092. Dataloading: 0.0051 s/iter. Inference: 0.2388 s/iter. Eval: 0.1142 s/iter. Total: 0.3582 s/iter. ETA=0:04:58
[02/18 13:28:01] mask2former INFO: Inference done 274/1092. Dataloading: 0.0051 s/iter. Inference: 0.2384 s/iter. Eval: 0.1142 s/iter. Total: 0.3578 s/iter. ETA=0:04:52
[02/18 13:28:06] mask2former INFO: Inference done 288/1092. Dataloading: 0.0052 s/iter. Inference: 0.2387 s/iter. Eval: 0.1143 s/iter. Total: 0.3582 s/iter. ETA=0:04:47
[02/18 13:28:12] mask2former INFO: Inference done 301/1092. Dataloading: 0.0052 s/iter. Inference: 0.2397 s/iter. Eval: 0.1148 s/iter. Total: 0.3598 s/iter. ETA=0:04:44
[02/18 13:28:17] mask2former INFO: Inference done 316/1092. Dataloading: 0.0052 s/iter. Inference: 0.2395 s/iter. Eval: 0.1145 s/iter. Total: 0.3593 s/iter. ETA=0:04:38
[02/18 13:28:22] mask2former INFO: Inference done 331/1092. Dataloading: 0.0052 s/iter. Inference: 0.2388 s/iter. Eval: 0.1147 s/iter. Total: 0.3588 s/iter. ETA=0:04:33
[02/18 13:28:27] mask2former INFO: Inference done 346/1092. Dataloading: 0.0052 s/iter. Inference: 0.2386 s/iter. Eval: 0.1145 s/iter. Total: 0.3583 s/iter. ETA=0:04:27
[02/18 13:28:33] mask2former INFO: Inference done 360/1092. Dataloading: 0.0052 s/iter. Inference: 0.2394 s/iter. Eval: 0.1145 s/iter. Total: 0.3592 s/iter. ETA=0:04:22
[02/18 13:28:38] mask2former INFO: Inference done 376/1092. Dataloading: 0.0052 s/iter. Inference: 0.2386 s/iter. Eval: 0.1142 s/iter. Total: 0.3581 s/iter. ETA=0:04:16
[02/18 13:28:43] mask2former INFO: Inference done 390/1092. Dataloading: 0.0052 s/iter. Inference: 0.2384 s/iter. Eval: 0.1145 s/iter. Total: 0.3581 s/iter. ETA=0:04:11
[02/18 13:28:48] mask2former INFO: Inference done 405/1092. Dataloading: 0.0052 s/iter. Inference: 0.2380 s/iter. Eval: 0.1144 s/iter. Total: 0.3577 s/iter. ETA=0:04:05
[02/18 13:28:54] mask2former INFO: Inference done 420/1092. Dataloading: 0.0052 s/iter. Inference: 0.2381 s/iter. Eval: 0.1143 s/iter. Total: 0.3577 s/iter. ETA=0:04:00
[02/18 13:28:59] mask2former INFO: Inference done 435/1092. Dataloading: 0.0052 s/iter. Inference: 0.2378 s/iter. Eval: 0.1141 s/iter. Total: 0.3572 s/iter. ETA=0:03:54
[02/18 13:29:04] mask2former INFO: Inference done 449/1092. Dataloading: 0.0052 s/iter. Inference: 0.2383 s/iter. Eval: 0.1141 s/iter. Total: 0.3577 s/iter. ETA=0:03:49
[02/18 13:29:09] mask2former INFO: Inference done 463/1092. Dataloading: 0.0052 s/iter. Inference: 0.2386 s/iter. Eval: 0.1141 s/iter. Total: 0.3579 s/iter. ETA=0:03:45
[02/18 13:29:14] mask2former INFO: Inference done 478/1092. Dataloading: 0.0052 s/iter. Inference: 0.2384 s/iter. Eval: 0.1136 s/iter. Total: 0.3573 s/iter. ETA=0:03:39
[02/18 13:29:19] mask2former INFO: Inference done 493/1092. Dataloading: 0.0052 s/iter. Inference: 0.2386 s/iter. Eval: 0.1134 s/iter. Total: 0.3573 s/iter. ETA=0:03:33
[02/18 13:29:25] mask2former INFO: Inference done 507/1092. Dataloading: 0.0052 s/iter. Inference: 0.2392 s/iter. Eval: 0.1135 s/iter. Total: 0.3580 s/iter. ETA=0:03:29
[02/18 13:29:30] mask2former INFO: Inference done 521/1092. Dataloading: 0.0052 s/iter. Inference: 0.2394 s/iter. Eval: 0.1133 s/iter. Total: 0.3580 s/iter. ETA=0:03:24
[02/18 13:29:35] mask2former INFO: Inference done 536/1092. Dataloading: 0.0052 s/iter. Inference: 0.2390 s/iter. Eval: 0.1131 s/iter. Total: 0.3575 s/iter. ETA=0:03:18
[02/18 13:29:40] mask2former INFO: Inference done 550/1092. Dataloading: 0.0052 s/iter. Inference: 0.2391 s/iter. Eval: 0.1136 s/iter. Total: 0.3580 s/iter. ETA=0:03:14
[02/18 13:29:45] mask2former INFO: Inference done 565/1092. Dataloading: 0.0052 s/iter. Inference: 0.2387 s/iter. Eval: 0.1134 s/iter. Total: 0.3574 s/iter. ETA=0:03:08
[02/18 13:29:50] mask2former INFO: Inference done 578/1092. Dataloading: 0.0053 s/iter. Inference: 0.2392 s/iter. Eval: 0.1134 s/iter. Total: 0.3581 s/iter. ETA=0:03:04
[02/18 13:29:55] mask2former INFO: Inference done 592/1092. Dataloading: 0.0053 s/iter. Inference: 0.2392 s/iter. Eval: 0.1135 s/iter. Total: 0.3582 s/iter. ETA=0:02:59
[02/18 13:30:01] mask2former INFO: Inference done 606/1092. Dataloading: 0.0053 s/iter. Inference: 0.2393 s/iter. Eval: 0.1137 s/iter. Total: 0.3585 s/iter. ETA=0:02:54
[02/18 13:30:06] mask2former INFO: Inference done 620/1092. Dataloading: 0.0054 s/iter. Inference: 0.2392 s/iter. Eval: 0.1140 s/iter. Total: 0.3586 s/iter. ETA=0:02:49
[02/18 13:30:11] mask2former INFO: Inference done 635/1092. Dataloading: 0.0053 s/iter. Inference: 0.2391 s/iter. Eval: 0.1139 s/iter. Total: 0.3585 s/iter. ETA=0:02:43
[02/18 13:30:16] mask2former INFO: Inference done 649/1092. Dataloading: 0.0053 s/iter. Inference: 0.2391 s/iter. Eval: 0.1142 s/iter. Total: 0.3587 s/iter. ETA=0:02:38
[02/18 13:30:21] mask2former INFO: Inference done 664/1092. Dataloading: 0.0054 s/iter. Inference: 0.2392 s/iter. Eval: 0.1141 s/iter. Total: 0.3587 s/iter. ETA=0:02:33
[02/18 13:30:27] mask2former INFO: Inference done 677/1092. Dataloading: 0.0054 s/iter. Inference: 0.2395 s/iter. Eval: 0.1145 s/iter. Total: 0.3595 s/iter. ETA=0:02:29
[02/18 13:30:32] mask2former INFO: Inference done 692/1092. Dataloading: 0.0054 s/iter. Inference: 0.2393 s/iter. Eval: 0.1144 s/iter. Total: 0.3591 s/iter. ETA=0:02:23
[02/18 13:30:37] mask2former INFO: Inference done 706/1092. Dataloading: 0.0054 s/iter. Inference: 0.2393 s/iter. Eval: 0.1144 s/iter. Total: 0.3592 s/iter. ETA=0:02:18
[02/18 13:30:42] mask2former INFO: Inference done 721/1092. Dataloading: 0.0054 s/iter. Inference: 0.2392 s/iter. Eval: 0.1143 s/iter. Total: 0.3590 s/iter. ETA=0:02:13
[02/18 13:30:48] mask2former INFO: Inference done 736/1092. Dataloading: 0.0054 s/iter. Inference: 0.2393 s/iter. Eval: 0.1142 s/iter. Total: 0.3590 s/iter. ETA=0:02:07
[02/18 13:30:53] mask2former INFO: Inference done 750/1092. Dataloading: 0.0054 s/iter. Inference: 0.2393 s/iter. Eval: 0.1145 s/iter. Total: 0.3593 s/iter. ETA=0:02:02
[02/18 13:30:58] mask2former INFO: Inference done 765/1092. Dataloading: 0.0054 s/iter. Inference: 0.2395 s/iter. Eval: 0.1142 s/iter. Total: 0.3592 s/iter. ETA=0:01:57
[02/18 13:31:03] mask2former INFO: Inference done 779/1092. Dataloading: 0.0054 s/iter. Inference: 0.2393 s/iter. Eval: 0.1146 s/iter. Total: 0.3594 s/iter. ETA=0:01:52
[02/18 13:31:08] mask2former INFO: Inference done 793/1092. Dataloading: 0.0054 s/iter. Inference: 0.2394 s/iter. Eval: 0.1146 s/iter. Total: 0.3594 s/iter. ETA=0:01:47
[02/18 13:31:13] mask2former INFO: Inference done 807/1092. Dataloading: 0.0054 s/iter. Inference: 0.2393 s/iter. Eval: 0.1147 s/iter. Total: 0.3595 s/iter. ETA=0:01:42
[02/18 13:31:19] mask2former INFO: Inference done 821/1092. Dataloading: 0.0054 s/iter. Inference: 0.2394 s/iter. Eval: 0.1149 s/iter. Total: 0.3597 s/iter. ETA=0:01:37
[02/18 13:31:24] mask2former INFO: Inference done 835/1092. Dataloading: 0.0054 s/iter. Inference: 0.2395 s/iter. Eval: 0.1150 s/iter. Total: 0.3600 s/iter. ETA=0:01:32
[02/18 13:31:29] mask2former INFO: Inference done 849/1092. Dataloading: 0.0054 s/iter. Inference: 0.2394 s/iter. Eval: 0.1151 s/iter. Total: 0.3600 s/iter. ETA=0:01:27
[02/18 13:31:34] mask2former INFO: Inference done 863/1092. Dataloading: 0.0054 s/iter. Inference: 0.2395 s/iter. Eval: 0.1151 s/iter. Total: 0.3600 s/iter. ETA=0:01:22
[02/18 13:31:39] mask2former INFO: Inference done 877/1092. Dataloading: 0.0054 s/iter. Inference: 0.2397 s/iter. Eval: 0.1151 s/iter. Total: 0.3602 s/iter. ETA=0:01:17
[02/18 13:31:44] mask2former INFO: Inference done 892/1092. Dataloading: 0.0053 s/iter. Inference: 0.2395 s/iter. Eval: 0.1150 s/iter. Total: 0.3600 s/iter. ETA=0:01:12
[02/18 13:31:50] mask2former INFO: Inference done 906/1092. Dataloading: 0.0053 s/iter. Inference: 0.2394 s/iter. Eval: 0.1155 s/iter. Total: 0.3603 s/iter. ETA=0:01:07
[02/18 13:31:55] mask2former INFO: Inference done 922/1092. Dataloading: 0.0053 s/iter. Inference: 0.2389 s/iter. Eval: 0.1154 s/iter. Total: 0.3597 s/iter. ETA=0:01:01
[02/18 13:32:00] mask2former INFO: Inference done 936/1092. Dataloading: 0.0053 s/iter. Inference: 0.2388 s/iter. Eval: 0.1158 s/iter. Total: 0.3600 s/iter. ETA=0:00:56
[02/18 13:32:05] mask2former INFO: Inference done 951/1092. Dataloading: 0.0053 s/iter. Inference: 0.2386 s/iter. Eval: 0.1156 s/iter. Total: 0.3597 s/iter. ETA=0:00:50
[02/18 13:32:10] mask2former INFO: Inference done 966/1092. Dataloading: 0.0053 s/iter. Inference: 0.2386 s/iter. Eval: 0.1154 s/iter. Total: 0.3594 s/iter. ETA=0:00:45
[02/18 13:32:15] mask2former INFO: Inference done 980/1092. Dataloading: 0.0053 s/iter. Inference: 0.2385 s/iter. Eval: 0.1155 s/iter. Total: 0.3594 s/iter. ETA=0:00:40
[02/18 13:32:21] mask2former INFO: Inference done 994/1092. Dataloading: 0.0053 s/iter. Inference: 0.2385 s/iter. Eval: 0.1154 s/iter. Total: 0.3594 s/iter. ETA=0:00:35
[02/18 13:32:26] mask2former INFO: Inference done 1007/1092. Dataloading: 0.0054 s/iter. Inference: 0.2389 s/iter. Eval: 0.1155 s/iter. Total: 0.3598 s/iter. ETA=0:00:30
[02/18 13:32:31] mask2former INFO: Inference done 1021/1092. Dataloading: 0.0054 s/iter. Inference: 0.2390 s/iter. Eval: 0.1154 s/iter. Total: 0.3598 s/iter. ETA=0:00:25
[02/18 13:32:36] mask2former INFO: Inference done 1036/1092. Dataloading: 0.0054 s/iter. Inference: 0.2390 s/iter. Eval: 0.1152 s/iter. Total: 0.3597 s/iter. ETA=0:00:20
[02/18 13:32:41] mask2former INFO: Inference done 1049/1092. Dataloading: 0.0054 s/iter. Inference: 0.2394 s/iter. Eval: 0.1154 s/iter. Total: 0.3602 s/iter. ETA=0:00:15
[02/18 13:32:46] mask2former INFO: Inference done 1064/1092. Dataloading: 0.0054 s/iter. Inference: 0.2393 s/iter. Eval: 0.1153 s/iter. Total: 0.3600 s/iter. ETA=0:00:10
[02/18 13:32:51] mask2former INFO: Inference done 1078/1092. Dataloading: 0.0053 s/iter. Inference: 0.2392 s/iter. Eval: 0.1155 s/iter. Total: 0.3601 s/iter. ETA=0:00:05
[02/18 15:06:28] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 15:06:29] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 15:06:29] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 15:06:44] mask2former INFO: Inference done 11/1092. Dataloading: 0.0040 s/iter. Inference: 0.3583 s/iter. Eval: 0.1332 s/iter. Total: 0.4954 s/iter. ETA=0:08:55
[02/18 15:06:49] mask2former INFO: Inference done 22/1092. Dataloading: 0.0046 s/iter. Inference: 0.3636 s/iter. Eval: 0.1284 s/iter. Total: 0.4967 s/iter. ETA=0:08:51
[02/18 15:06:55] mask2former INFO: Inference done 33/1092. Dataloading: 0.0050 s/iter. Inference: 0.3655 s/iter. Eval: 0.1208 s/iter. Total: 0.4915 s/iter. ETA=0:08:40
[02/18 15:07:00] mask2former INFO: Inference done 44/1092. Dataloading: 0.0050 s/iter. Inference: 0.3694 s/iter. Eval: 0.1206 s/iter. Total: 0.4951 s/iter. ETA=0:08:38
[02/18 15:07:06] mask2former INFO: Inference done 55/1092. Dataloading: 0.0049 s/iter. Inference: 0.3686 s/iter. Eval: 0.1179 s/iter. Total: 0.4915 s/iter. ETA=0:08:29
[02/18 15:07:11] mask2former INFO: Inference done 66/1092. Dataloading: 0.0051 s/iter. Inference: 0.3632 s/iter. Eval: 0.1188 s/iter. Total: 0.4872 s/iter. ETA=0:08:19
[02/18 15:07:16] mask2former INFO: Inference done 77/1092. Dataloading: 0.0051 s/iter. Inference: 0.3631 s/iter. Eval: 0.1220 s/iter. Total: 0.4902 s/iter. ETA=0:08:17
[02/18 15:07:21] mask2former INFO: Inference done 87/1092. Dataloading: 0.0057 s/iter. Inference: 0.3650 s/iter. Eval: 0.1213 s/iter. Total: 0.4920 s/iter. ETA=0:08:14
[02/18 15:07:27] mask2former INFO: Inference done 98/1092. Dataloading: 0.0057 s/iter. Inference: 0.3652 s/iter. Eval: 0.1199 s/iter. Total: 0.4909 s/iter. ETA=0:08:08
[02/18 15:07:32] mask2former INFO: Inference done 109/1092. Dataloading: 0.0058 s/iter. Inference: 0.3656 s/iter. Eval: 0.1199 s/iter. Total: 0.4913 s/iter. ETA=0:08:02
[02/18 15:07:37] mask2former INFO: Inference done 119/1092. Dataloading: 0.0060 s/iter. Inference: 0.3661 s/iter. Eval: 0.1218 s/iter. Total: 0.4940 s/iter. ETA=0:08:00
[02/18 15:07:43] mask2former INFO: Inference done 130/1092. Dataloading: 0.0060 s/iter. Inference: 0.3671 s/iter. Eval: 0.1203 s/iter. Total: 0.4936 s/iter. ETA=0:07:54
[02/18 15:07:48] mask2former INFO: Inference done 140/1092. Dataloading: 0.0062 s/iter. Inference: 0.3676 s/iter. Eval: 0.1202 s/iter. Total: 0.4941 s/iter. ETA=0:07:50
[02/18 15:07:53] mask2former INFO: Inference done 151/1092. Dataloading: 0.0061 s/iter. Inference: 0.3664 s/iter. Eval: 0.1198 s/iter. Total: 0.4924 s/iter. ETA=0:07:43
[02/18 15:07:58] mask2former INFO: Inference done 162/1092. Dataloading: 0.0060 s/iter. Inference: 0.3668 s/iter. Eval: 0.1194 s/iter. Total: 0.4923 s/iter. ETA=0:07:37
[02/18 15:08:03] mask2former INFO: Inference done 173/1092. Dataloading: 0.0060 s/iter. Inference: 0.3659 s/iter. Eval: 0.1193 s/iter. Total: 0.4913 s/iter. ETA=0:07:31
[02/18 15:08:09] mask2former INFO: Inference done 184/1092. Dataloading: 0.0059 s/iter. Inference: 0.3662 s/iter. Eval: 0.1197 s/iter. Total: 0.4919 s/iter. ETA=0:07:26
[02/18 15:08:14] mask2former INFO: Inference done 195/1092. Dataloading: 0.0060 s/iter. Inference: 0.3659 s/iter. Eval: 0.1185 s/iter. Total: 0.4905 s/iter. ETA=0:07:19
[02/18 15:08:20] mask2former INFO: Inference done 206/1092. Dataloading: 0.0059 s/iter. Inference: 0.3662 s/iter. Eval: 0.1182 s/iter. Total: 0.4903 s/iter. ETA=0:07:14
[02/18 15:08:25] mask2former INFO: Inference done 217/1092. Dataloading: 0.0059 s/iter. Inference: 0.3666 s/iter. Eval: 0.1178 s/iter. Total: 0.4904 s/iter. ETA=0:07:09
[02/18 15:08:30] mask2former INFO: Inference done 227/1092. Dataloading: 0.0060 s/iter. Inference: 0.3667 s/iter. Eval: 0.1183 s/iter. Total: 0.4911 s/iter. ETA=0:07:04
[02/18 15:08:35] mask2former INFO: Inference done 238/1092. Dataloading: 0.0060 s/iter. Inference: 0.3660 s/iter. Eval: 0.1175 s/iter. Total: 0.4896 s/iter. ETA=0:06:58
[02/18 15:08:40] mask2former INFO: Inference done 249/1092. Dataloading: 0.0059 s/iter. Inference: 0.3654 s/iter. Eval: 0.1172 s/iter. Total: 0.4886 s/iter. ETA=0:06:51
[02/18 15:08:46] mask2former INFO: Inference done 260/1092. Dataloading: 0.0059 s/iter. Inference: 0.3646 s/iter. Eval: 0.1178 s/iter. Total: 0.4884 s/iter. ETA=0:06:46
[02/18 15:08:51] mask2former INFO: Inference done 270/1092. Dataloading: 0.0059 s/iter. Inference: 0.3650 s/iter. Eval: 0.1183 s/iter. Total: 0.4892 s/iter. ETA=0:06:42
[02/18 15:08:56] mask2former INFO: Inference done 281/1092. Dataloading: 0.0059 s/iter. Inference: 0.3642 s/iter. Eval: 0.1189 s/iter. Total: 0.4891 s/iter. ETA=0:06:36
[02/18 15:09:01] mask2former INFO: Inference done 291/1092. Dataloading: 0.0059 s/iter. Inference: 0.3639 s/iter. Eval: 0.1200 s/iter. Total: 0.4898 s/iter. ETA=0:06:32
[02/18 15:09:06] mask2former INFO: Inference done 302/1092. Dataloading: 0.0059 s/iter. Inference: 0.3641 s/iter. Eval: 0.1192 s/iter. Total: 0.4893 s/iter. ETA=0:06:26
[02/18 15:09:12] mask2former INFO: Inference done 313/1092. Dataloading: 0.0059 s/iter. Inference: 0.3645 s/iter. Eval: 0.1190 s/iter. Total: 0.4894 s/iter. ETA=0:06:21
[02/18 15:09:17] mask2former INFO: Inference done 324/1092. Dataloading: 0.0064 s/iter. Inference: 0.3639 s/iter. Eval: 0.1192 s/iter. Total: 0.4896 s/iter. ETA=0:06:15
[02/18 15:09:22] mask2former INFO: Inference done 334/1092. Dataloading: 0.0064 s/iter. Inference: 0.3643 s/iter. Eval: 0.1193 s/iter. Total: 0.4901 s/iter. ETA=0:06:11
[02/18 15:09:28] mask2former INFO: Inference done 345/1092. Dataloading: 0.0064 s/iter. Inference: 0.3637 s/iter. Eval: 0.1197 s/iter. Total: 0.4900 s/iter. ETA=0:06:05
[02/18 15:09:33] mask2former INFO: Inference done 355/1092. Dataloading: 0.0064 s/iter. Inference: 0.3644 s/iter. Eval: 0.1206 s/iter. Total: 0.4914 s/iter. ETA=0:06:02
[02/18 15:09:38] mask2former INFO: Inference done 366/1092. Dataloading: 0.0064 s/iter. Inference: 0.3644 s/iter. Eval: 0.1203 s/iter. Total: 0.4911 s/iter. ETA=0:05:56
[02/18 15:09:44] mask2former INFO: Inference done 377/1092. Dataloading: 0.0063 s/iter. Inference: 0.3647 s/iter. Eval: 0.1200 s/iter. Total: 0.4911 s/iter. ETA=0:05:51
[02/18 15:09:49] mask2former INFO: Inference done 387/1092. Dataloading: 0.0063 s/iter. Inference: 0.3647 s/iter. Eval: 0.1206 s/iter. Total: 0.4917 s/iter. ETA=0:05:46
[02/18 15:09:54] mask2former INFO: Inference done 398/1092. Dataloading: 0.0064 s/iter. Inference: 0.3643 s/iter. Eval: 0.1206 s/iter. Total: 0.4915 s/iter. ETA=0:05:41
[02/18 15:10:00] mask2former INFO: Inference done 409/1092. Dataloading: 0.0064 s/iter. Inference: 0.3648 s/iter. Eval: 0.1205 s/iter. Total: 0.4917 s/iter. ETA=0:05:35
[02/18 15:10:05] mask2former INFO: Inference done 419/1092. Dataloading: 0.0065 s/iter. Inference: 0.3655 s/iter. Eval: 0.1202 s/iter. Total: 0.4923 s/iter. ETA=0:05:31
[02/18 15:10:10] mask2former INFO: Inference done 430/1092. Dataloading: 0.0064 s/iter. Inference: 0.3655 s/iter. Eval: 0.1198 s/iter. Total: 0.4918 s/iter. ETA=0:05:25
[02/18 15:10:15] mask2former INFO: Inference done 441/1092. Dataloading: 0.0064 s/iter. Inference: 0.3646 s/iter. Eval: 0.1201 s/iter. Total: 0.4912 s/iter. ETA=0:05:19
[02/18 15:10:20] mask2former INFO: Inference done 452/1092. Dataloading: 0.0063 s/iter. Inference: 0.3642 s/iter. Eval: 0.1200 s/iter. Total: 0.4906 s/iter. ETA=0:05:13
[02/18 15:10:26] mask2former INFO: Inference done 463/1092. Dataloading: 0.0063 s/iter. Inference: 0.3643 s/iter. Eval: 0.1200 s/iter. Total: 0.4906 s/iter. ETA=0:05:08
[02/18 15:10:31] mask2former INFO: Inference done 475/1092. Dataloading: 0.0063 s/iter. Inference: 0.3640 s/iter. Eval: 0.1193 s/iter. Total: 0.4897 s/iter. ETA=0:05:02
[02/18 15:10:36] mask2former INFO: Inference done 486/1092. Dataloading: 0.0062 s/iter. Inference: 0.3640 s/iter. Eval: 0.1191 s/iter. Total: 0.4895 s/iter. ETA=0:04:56
[02/18 15:10:42] mask2former INFO: Inference done 497/1092. Dataloading: 0.0062 s/iter. Inference: 0.3645 s/iter. Eval: 0.1187 s/iter. Total: 0.4895 s/iter. ETA=0:04:51
[02/18 15:10:47] mask2former INFO: Inference done 508/1092. Dataloading: 0.0062 s/iter. Inference: 0.3647 s/iter. Eval: 0.1186 s/iter. Total: 0.4896 s/iter. ETA=0:04:45
[02/18 15:10:53] mask2former INFO: Inference done 519/1092. Dataloading: 0.0062 s/iter. Inference: 0.3646 s/iter. Eval: 0.1187 s/iter. Total: 0.4896 s/iter. ETA=0:04:40
[02/18 15:10:58] mask2former INFO: Inference done 530/1092. Dataloading: 0.0062 s/iter. Inference: 0.3643 s/iter. Eval: 0.1190 s/iter. Total: 0.4895 s/iter. ETA=0:04:35
[02/18 15:11:03] mask2former INFO: Inference done 540/1092. Dataloading: 0.0062 s/iter. Inference: 0.3646 s/iter. Eval: 0.1190 s/iter. Total: 0.4899 s/iter. ETA=0:04:30
[02/18 15:11:08] mask2former INFO: Inference done 551/1092. Dataloading: 0.0061 s/iter. Inference: 0.3643 s/iter. Eval: 0.1193 s/iter. Total: 0.4899 s/iter. ETA=0:04:25
[02/18 15:11:14] mask2former INFO: Inference done 562/1092. Dataloading: 0.0061 s/iter. Inference: 0.3640 s/iter. Eval: 0.1197 s/iter. Total: 0.4899 s/iter. ETA=0:04:19
[02/18 15:11:19] mask2former INFO: Inference done 573/1092. Dataloading: 0.0061 s/iter. Inference: 0.3639 s/iter. Eval: 0.1197 s/iter. Total: 0.4898 s/iter. ETA=0:04:14
[02/18 15:11:24] mask2former INFO: Inference done 584/1092. Dataloading: 0.0061 s/iter. Inference: 0.3641 s/iter. Eval: 0.1191 s/iter. Total: 0.4894 s/iter. ETA=0:04:08
[02/18 15:11:30] mask2former INFO: Inference done 595/1092. Dataloading: 0.0061 s/iter. Inference: 0.3641 s/iter. Eval: 0.1190 s/iter. Total: 0.4894 s/iter. ETA=0:04:03
[02/18 15:11:35] mask2former INFO: Inference done 606/1092. Dataloading: 0.0061 s/iter. Inference: 0.3641 s/iter. Eval: 0.1190 s/iter. Total: 0.4894 s/iter. ETA=0:03:57
[02/18 15:11:40] mask2former INFO: Inference done 617/1092. Dataloading: 0.0061 s/iter. Inference: 0.3638 s/iter. Eval: 0.1189 s/iter. Total: 0.4889 s/iter. ETA=0:03:52
[02/18 15:11:45] mask2former INFO: Inference done 628/1092. Dataloading: 0.0061 s/iter. Inference: 0.3637 s/iter. Eval: 0.1186 s/iter. Total: 0.4884 s/iter. ETA=0:03:46
[02/18 15:11:51] mask2former INFO: Inference done 639/1092. Dataloading: 0.0061 s/iter. Inference: 0.3637 s/iter. Eval: 0.1189 s/iter. Total: 0.4888 s/iter. ETA=0:03:41
[02/18 15:11:56] mask2former INFO: Inference done 650/1092. Dataloading: 0.0060 s/iter. Inference: 0.3633 s/iter. Eval: 0.1189 s/iter. Total: 0.4883 s/iter. ETA=0:03:35
[02/18 15:12:01] mask2former INFO: Inference done 662/1092. Dataloading: 0.0060 s/iter. Inference: 0.3630 s/iter. Eval: 0.1186 s/iter. Total: 0.4877 s/iter. ETA=0:03:29
[02/18 15:12:07] mask2former INFO: Inference done 673/1092. Dataloading: 0.0060 s/iter. Inference: 0.3629 s/iter. Eval: 0.1185 s/iter. Total: 0.4875 s/iter. ETA=0:03:24
[02/18 15:12:12] mask2former INFO: Inference done 684/1092. Dataloading: 0.0060 s/iter. Inference: 0.3630 s/iter. Eval: 0.1183 s/iter. Total: 0.4875 s/iter. ETA=0:03:18
[02/18 15:12:17] mask2former INFO: Inference done 696/1092. Dataloading: 0.0060 s/iter. Inference: 0.3626 s/iter. Eval: 0.1181 s/iter. Total: 0.4869 s/iter. ETA=0:03:12
[02/18 15:12:23] mask2former INFO: Inference done 707/1092. Dataloading: 0.0060 s/iter. Inference: 0.3628 s/iter. Eval: 0.1180 s/iter. Total: 0.4868 s/iter. ETA=0:03:07
[02/18 15:12:28] mask2former INFO: Inference done 717/1092. Dataloading: 0.0060 s/iter. Inference: 0.3630 s/iter. Eval: 0.1181 s/iter. Total: 0.4871 s/iter. ETA=0:03:02
[02/18 15:12:33] mask2former INFO: Inference done 729/1092. Dataloading: 0.0059 s/iter. Inference: 0.3627 s/iter. Eval: 0.1177 s/iter. Total: 0.4865 s/iter. ETA=0:02:56
[02/18 15:12:38] mask2former INFO: Inference done 740/1092. Dataloading: 0.0059 s/iter. Inference: 0.3627 s/iter. Eval: 0.1173 s/iter. Total: 0.4860 s/iter. ETA=0:02:51
[02/18 15:12:44] mask2former INFO: Inference done 752/1092. Dataloading: 0.0059 s/iter. Inference: 0.3624 s/iter. Eval: 0.1171 s/iter. Total: 0.4855 s/iter. ETA=0:02:45
[02/18 15:12:49] mask2former INFO: Inference done 763/1092. Dataloading: 0.0059 s/iter. Inference: 0.3626 s/iter. Eval: 0.1169 s/iter. Total: 0.4855 s/iter. ETA=0:02:39
[02/18 15:12:54] mask2former INFO: Inference done 774/1092. Dataloading: 0.0059 s/iter. Inference: 0.3626 s/iter. Eval: 0.1167 s/iter. Total: 0.4853 s/iter. ETA=0:02:34
[02/18 15:12:59] mask2former INFO: Inference done 785/1092. Dataloading: 0.0059 s/iter. Inference: 0.3626 s/iter. Eval: 0.1165 s/iter. Total: 0.4851 s/iter. ETA=0:02:28
[02/18 15:13:05] mask2former INFO: Inference done 796/1092. Dataloading: 0.0059 s/iter. Inference: 0.3626 s/iter. Eval: 0.1165 s/iter. Total: 0.4851 s/iter. ETA=0:02:23
[02/18 15:13:10] mask2former INFO: Inference done 807/1092. Dataloading: 0.0059 s/iter. Inference: 0.3627 s/iter. Eval: 0.1165 s/iter. Total: 0.4852 s/iter. ETA=0:02:18
[02/18 15:13:15] mask2former INFO: Inference done 817/1092. Dataloading: 0.0059 s/iter. Inference: 0.3630 s/iter. Eval: 0.1167 s/iter. Total: 0.4856 s/iter. ETA=0:02:13
[02/18 15:13:21] mask2former INFO: Inference done 828/1092. Dataloading: 0.0059 s/iter. Inference: 0.3631 s/iter. Eval: 0.1167 s/iter. Total: 0.4858 s/iter. ETA=0:02:08
[02/18 15:13:26] mask2former INFO: Inference done 839/1092. Dataloading: 0.0059 s/iter. Inference: 0.3629 s/iter. Eval: 0.1167 s/iter. Total: 0.4855 s/iter. ETA=0:02:02
[02/18 15:13:31] mask2former INFO: Inference done 851/1092. Dataloading: 0.0058 s/iter. Inference: 0.3625 s/iter. Eval: 0.1166 s/iter. Total: 0.4850 s/iter. ETA=0:01:56
[02/18 15:13:36] mask2former INFO: Inference done 862/1092. Dataloading: 0.0058 s/iter. Inference: 0.3621 s/iter. Eval: 0.1167 s/iter. Total: 0.4848 s/iter. ETA=0:01:51
[02/18 15:13:42] mask2former INFO: Inference done 873/1092. Dataloading: 0.0058 s/iter. Inference: 0.3622 s/iter. Eval: 0.1169 s/iter. Total: 0.4850 s/iter. ETA=0:01:46
[02/18 15:13:47] mask2former INFO: Inference done 884/1092. Dataloading: 0.0058 s/iter. Inference: 0.3620 s/iter. Eval: 0.1169 s/iter. Total: 0.4848 s/iter. ETA=0:01:40
[02/18 15:13:53] mask2former INFO: Inference done 895/1092. Dataloading: 0.0058 s/iter. Inference: 0.3621 s/iter. Eval: 0.1168 s/iter. Total: 0.4849 s/iter. ETA=0:01:35
[02/18 15:13:58] mask2former INFO: Inference done 906/1092. Dataloading: 0.0058 s/iter. Inference: 0.3622 s/iter. Eval: 0.1168 s/iter. Total: 0.4849 s/iter. ETA=0:01:30
[02/18 15:14:03] mask2former INFO: Inference done 917/1092. Dataloading: 0.0058 s/iter. Inference: 0.3620 s/iter. Eval: 0.1170 s/iter. Total: 0.4850 s/iter. ETA=0:01:24
[02/18 15:14:09] mask2former INFO: Inference done 928/1092. Dataloading: 0.0058 s/iter. Inference: 0.3619 s/iter. Eval: 0.1172 s/iter. Total: 0.4849 s/iter. ETA=0:01:19
[02/18 15:14:14] mask2former INFO: Inference done 939/1092. Dataloading: 0.0058 s/iter. Inference: 0.3618 s/iter. Eval: 0.1171 s/iter. Total: 0.4848 s/iter. ETA=0:01:14
[02/18 15:14:19] mask2former INFO: Inference done 950/1092. Dataloading: 0.0058 s/iter. Inference: 0.3617 s/iter. Eval: 0.1170 s/iter. Total: 0.4846 s/iter. ETA=0:01:08
[02/18 15:14:24] mask2former INFO: Inference done 962/1092. Dataloading: 0.0057 s/iter. Inference: 0.3613 s/iter. Eval: 0.1170 s/iter. Total: 0.4841 s/iter. ETA=0:01:02
[02/18 15:14:29] mask2former INFO: Inference done 976/1092. Dataloading: 0.0059 s/iter. Inference: 0.3595 s/iter. Eval: 0.1169 s/iter. Total: 0.4824 s/iter. ETA=0:00:55
[02/18 15:14:35] mask2former INFO: Inference done 991/1092. Dataloading: 0.0059 s/iter. Inference: 0.3575 s/iter. Eval: 0.1169 s/iter. Total: 0.4804 s/iter. ETA=0:00:48
[02/18 15:14:40] mask2former INFO: Inference done 1005/1092. Dataloading: 0.0059 s/iter. Inference: 0.3559 s/iter. Eval: 0.1171 s/iter. Total: 0.4790 s/iter. ETA=0:00:41
[02/18 15:14:45] mask2former INFO: Inference done 1020/1092. Dataloading: 0.0059 s/iter. Inference: 0.3542 s/iter. Eval: 0.1170 s/iter. Total: 0.4772 s/iter. ETA=0:00:34
[02/18 15:14:50] mask2former INFO: Inference done 1034/1092. Dataloading: 0.0059 s/iter. Inference: 0.3526 s/iter. Eval: 0.1170 s/iter. Total: 0.4757 s/iter. ETA=0:00:27
[02/18 15:14:56] mask2former INFO: Inference done 1049/1092. Dataloading: 0.0059 s/iter. Inference: 0.3509 s/iter. Eval: 0.1169 s/iter. Total: 0.4738 s/iter. ETA=0:00:20
[02/18 15:15:01] mask2former INFO: Inference done 1063/1092. Dataloading: 0.0059 s/iter. Inference: 0.3495 s/iter. Eval: 0.1169 s/iter. Total: 0.4723 s/iter. ETA=0:00:13
[02/18 15:15:06] mask2former INFO: Inference done 1078/1092. Dataloading: 0.0058 s/iter. Inference: 0.3478 s/iter. Eval: 0.1169 s/iter. Total: 0.4706 s/iter. ETA=0:00:06
[02/18 15:15:11] mask2former INFO: Inference done 1092/1092. Dataloading: 0.0058 s/iter. Inference: 0.3463 s/iter. Eval: 0.1171 s/iter. Total: 0.4693 s/iter. ETA=0:00:00
[02/18 17:22:57] mask2former.data.dataset_mappers.mask_former_sceneflow_dataset_mapper INFO: [MaskFormerSceneFlowDatasetMapper] Augmentations used in inference: []
[02/18 17:22:58] detectron2.data.common INFO: Serializing 4370 elements to byte tensors and concatenating them all ...
[02/18 17:22:58] detectron2.data.common INFO: Serialized dataset takes 1.22 MiB
[02/18 17:23:13] mask2former INFO: Inference done 11/1092. Dataloading: 0.0038 s/iter. Inference: 0.3632 s/iter. Eval: 0.1064 s/iter. Total: 0.4734 s/iter. ETA=0:08:31
[02/18 17:23:18] mask2former INFO: Inference done 22/1092. Dataloading: 0.0041 s/iter. Inference: 0.3568 s/iter. Eval: 0.1114 s/iter. Total: 0.4725 s/iter. ETA=0:08:25
[02/18 17:23:24] mask2former INFO: Inference done 33/1092. Dataloading: 0.0059 s/iter. Inference: 0.3615 s/iter. Eval: 0.1110 s/iter. Total: 0.4784 s/iter. ETA=0:08:26
[02/18 17:23:29] mask2former INFO: Inference done 43/1092. Dataloading: 0.0059 s/iter. Inference: 0.3634 s/iter. Eval: 0.1170 s/iter. Total: 0.4863 s/iter. ETA=0:08:30
[02/18 17:23:34] mask2former INFO: Inference done 54/1092. Dataloading: 0.0056 s/iter. Inference: 0.3606 s/iter. Eval: 0.1159 s/iter. Total: 0.4823 s/iter. ETA=0:08:20
[02/18 17:23:39] mask2former INFO: Inference done 64/1092. Dataloading: 0.0055 s/iter. Inference: 0.3635 s/iter. Eval: 0.1167 s/iter. Total: 0.4858 s/iter. ETA=0:08:19
[02/18 17:23:44] mask2former INFO: Inference done 75/1092. Dataloading: 0.0054 s/iter. Inference: 0.3640 s/iter. Eval: 0.1173 s/iter. Total: 0.4868 s/iter. ETA=0:08:15
[02/18 17:23:50] mask2former INFO: Inference done 86/1092. Dataloading: 0.0054 s/iter. Inference: 0.3640 s/iter. Eval: 0.1173 s/iter. Total: 0.4867 s/iter. ETA=0:08:09
[02/18 17:23:55] mask2former INFO: Inference done 97/1092. Dataloading: 0.0052 s/iter. Inference: 0.3624 s/iter. Eval: 0.1168 s/iter. Total: 0.4845 s/iter. ETA=0:08:02
[02/18 17:24:00] mask2former INFO: Inference done 107/1092. Dataloading: 0.0053 s/iter. Inference: 0.3659 s/iter. Eval: 0.1173 s/iter. Total: 0.4885 s/iter. ETA=0:08:01
[02/18 17:24:05] mask2former INFO: Inference done 117/1092. Dataloading: 0.0052 s/iter. Inference: 0.3660 s/iter. Eval: 0.1201 s/iter. Total: 0.4914 s/iter. ETA=0:07:59
[02/18 17:24:10] mask2former INFO: Inference done 128/1092. Dataloading: 0.0052 s/iter. Inference: 0.3645 s/iter. Eval: 0.1192 s/iter. Total: 0.4890 s/iter. ETA=0:07:51
[02/18 17:24:16] mask2former INFO: Inference done 139/1092. Dataloading: 0.0052 s/iter. Inference: 0.3638 s/iter. Eval: 0.1201 s/iter. Total: 0.4892 s/iter. ETA=0:07:46
[02/18 17:24:21] mask2former INFO: Inference done 150/1092. Dataloading: 0.0051 s/iter. Inference: 0.3643 s/iter. Eval: 0.1190 s/iter. Total: 0.4885 s/iter. ETA=0:07:40
[02/18 17:24:26] mask2former INFO: Inference done 161/1092. Dataloading: 0.0051 s/iter. Inference: 0.3639 s/iter. Eval: 0.1186 s/iter. Total: 0.4878 s/iter. ETA=0:07:34
[02/18 17:24:32] mask2former INFO: Inference done 172/1092. Dataloading: 0.0051 s/iter. Inference: 0.3644 s/iter. Eval: 0.1182 s/iter. Total: 0.4878 s/iter. ETA=0:07:28
[02/18 17:24:37] mask2former INFO: Inference done 182/1092. Dataloading: 0.0051 s/iter. Inference: 0.3640 s/iter. Eval: 0.1195 s/iter. Total: 0.4887 s/iter. ETA=0:07:24
[02/18 17:24:42] mask2former INFO: Inference done 193/1092. Dataloading: 0.0051 s/iter. Inference: 0.3637 s/iter. Eval: 0.1196 s/iter. Total: 0.4885 s/iter. ETA=0:07:19
[02/18 17:24:47] mask2former INFO: Inference done 204/1092. Dataloading: 0.0051 s/iter. Inference: 0.3634 s/iter. Eval: 0.1194 s/iter. Total: 0.4879 s/iter. ETA=0:07:13
[02/18 17:24:52] mask2former INFO: Inference done 215/1092. Dataloading: 0.0051 s/iter. Inference: 0.3624 s/iter. Eval: 0.1191 s/iter. Total: 0.4867 s/iter. ETA=0:07:06
[02/18 17:24:58] mask2former INFO: Inference done 226/1092. Dataloading: 0.0051 s/iter. Inference: 0.3628 s/iter. Eval: 0.1187 s/iter. Total: 0.4867 s/iter. ETA=0:07:01
[02/18 17:25:03] mask2former INFO: Inference done 237/1092. Dataloading: 0.0051 s/iter. Inference: 0.3632 s/iter. Eval: 0.1184 s/iter. Total: 0.4868 s/iter. ETA=0:06:56
[02/18 17:25:08] mask2former INFO: Inference done 248/1092. Dataloading: 0.0051 s/iter. Inference: 0.3624 s/iter. Eval: 0.1179 s/iter. Total: 0.4855 s/iter. ETA=0:06:49
[02/18 17:25:14] mask2former INFO: Inference done 259/1092. Dataloading: 0.0050 s/iter. Inference: 0.3629 s/iter. Eval: 0.1177 s/iter. Total: 0.4858 s/iter. ETA=0:06:44
[02/18 17:25:19] mask2former INFO: Inference done 270/1092. Dataloading: 0.0050 s/iter. Inference: 0.3626 s/iter. Eval: 0.1177 s/iter. Total: 0.4855 s/iter. ETA=0:06:39
[02/18 17:25:24] mask2former INFO: Inference done 281/1092. Dataloading: 0.0051 s/iter. Inference: 0.3619 s/iter. Eval: 0.1179 s/iter. Total: 0.4849 s/iter. ETA=0:06:33
[02/18 17:25:29] mask2former INFO: Inference done 291/1092. Dataloading: 0.0051 s/iter. Inference: 0.3628 s/iter. Eval: 0.1177 s/iter. Total: 0.4857 s/iter. ETA=0:06:29
[02/18 17:25:34] mask2former INFO: Inference done 302/1092. Dataloading: 0.0051 s/iter. Inference: 0.3629 s/iter. Eval: 0.1176 s/iter. Total: 0.4858 s/iter. ETA=0:06:23
[02/18 17:25:40] mask2former INFO: Inference done 313/1092. Dataloading: 0.0051 s/iter. Inference: 0.3629 s/iter. Eval: 0.1178 s/iter. Total: 0.4859 s/iter. ETA=0:06:18
[02/18 17:25:45] mask2former INFO: Inference done 324/1092. Dataloading: 0.0051 s/iter. Inference: 0.3634 s/iter. Eval: 0.1177 s/iter. Total: 0.4864 s/iter. ETA=0:06:13
[02/18 17:25:51] mask2former INFO: Inference done 334/1092. Dataloading: 0.0052 s/iter. Inference: 0.3638 s/iter. Eval: 0.1182 s/iter. Total: 0.4873 s/iter. ETA=0:06:09
[02/18 17:25:56] mask2former INFO: Inference done 345/1092. Dataloading: 0.0052 s/iter. Inference: 0.3637 s/iter. Eval: 0.1178 s/iter. Total: 0.4868 s/iter. ETA=0:06:03
[02/18 17:26:01] mask2former INFO: Inference done 356/1092. Dataloading: 0.0052 s/iter. Inference: 0.3638 s/iter. Eval: 0.1173 s/iter. Total: 0.4864 s/iter. ETA=0:05:58
[02/18 17:26:06] mask2former INFO: Inference done 367/1092. Dataloading: 0.0051 s/iter. Inference: 0.3640 s/iter. Eval: 0.1168 s/iter. Total: 0.4860 s/iter. ETA=0:05:52
[02/18 17:26:12] mask2former INFO: Inference done 378/1092. Dataloading: 0.0052 s/iter. Inference: 0.3640 s/iter. Eval: 0.1168 s/iter. Total: 0.4861 s/iter. ETA=0:05:47
[02/18 17:26:17] mask2former INFO: Inference done 389/1092. Dataloading: 0.0052 s/iter. Inference: 0.3640 s/iter. Eval: 0.1170 s/iter. Total: 0.4862 s/iter. ETA=0:05:41
[02/18 17:26:22] mask2former INFO: Inference done 400/1092. Dataloading: 0.0051 s/iter. Inference: 0.3642 s/iter. Eval: 0.1170 s/iter. Total: 0.4865 s/iter. ETA=0:05:36
[02/18 17:26:28] mask2former INFO: Inference done 411/1092. Dataloading: 0.0052 s/iter. Inference: 0.3643 s/iter. Eval: 0.1171 s/iter. Total: 0.4866 s/iter. ETA=0:05:31
[02/18 17:26:33] mask2former INFO: Inference done 422/1092. Dataloading: 0.0052 s/iter. Inference: 0.3637 s/iter. Eval: 0.1170 s/iter. Total: 0.4860 s/iter. ETA=0:05:25
[02/18 17:26:38] mask2former INFO: Inference done 433/1092. Dataloading: 0.0052 s/iter. Inference: 0.3635 s/iter. Eval: 0.1169 s/iter. Total: 0.4857 s/iter. ETA=0:05:20
[02/18 17:26:43] mask2former INFO: Inference done 444/1092. Dataloading: 0.0052 s/iter. Inference: 0.3636 s/iter. Eval: 0.1167 s/iter. Total: 0.4857 s/iter. ETA=0:05:14
[02/18 17:26:49] mask2former INFO: Inference done 455/1092. Dataloading: 0.0052 s/iter. Inference: 0.3640 s/iter. Eval: 0.1167 s/iter. Total: 0.4860 s/iter. ETA=0:05:09
[02/18 17:26:54] mask2former INFO: Inference done 466/1092. Dataloading: 0.0052 s/iter. Inference: 0.3640 s/iter. Eval: 0.1164 s/iter. Total: 0.4857 s/iter. ETA=0:05:04
[02/18 17:26:59] mask2former INFO: Inference done 476/1092. Dataloading: 0.0053 s/iter. Inference: 0.3642 s/iter. Eval: 0.1165 s/iter. Total: 0.4860 s/iter. ETA=0:04:59
[02/18 17:27:04] mask2former INFO: Inference done 487/1092. Dataloading: 0.0052 s/iter. Inference: 0.3641 s/iter. Eval: 0.1166 s/iter. Total: 0.4861 s/iter. ETA=0:04:54
[02/18 17:27:10] mask2former INFO: Inference done 498/1092. Dataloading: 0.0052 s/iter. Inference: 0.3639 s/iter. Eval: 0.1164 s/iter. Total: 0.4856 s/iter. ETA=0:04:48
[02/18 17:27:15] mask2former INFO: Inference done 509/1092. Dataloading: 0.0052 s/iter. Inference: 0.3637 s/iter. Eval: 0.1163 s/iter. Total: 0.4854 s/iter. ETA=0:04:42
[02/18 17:27:20] mask2former INFO: Inference done 520/1092. Dataloading: 0.0052 s/iter. Inference: 0.3642 s/iter. Eval: 0.1161 s/iter. Total: 0.4857 s/iter. ETA=0:04:37
[02/18 17:27:26] mask2former INFO: Inference done 531/1092. Dataloading: 0.0052 s/iter. Inference: 0.3641 s/iter. Eval: 0.1161 s/iter. Total: 0.4855 s/iter. ETA=0:04:32
[02/18 17:27:31] mask2former INFO: Inference done 542/1092. Dataloading: 0.0052 s/iter. Inference: 0.3638 s/iter. Eval: 0.1158 s/iter. Total: 0.4849 s/iter. ETA=0:04:26
[02/18 17:27:36] mask2former INFO: Inference done 553/1092. Dataloading: 0.0052 s/iter. Inference: 0.3637 s/iter. Eval: 0.1161 s/iter. Total: 0.4852 s/iter. ETA=0:04:21
[02/18 17:27:41] mask2former INFO: Inference done 564/1092. Dataloading: 0.0052 s/iter. Inference: 0.3639 s/iter. Eval: 0.1158 s/iter. Total: 0.4850 s/iter. ETA=0:04:16
[02/18 17:27:46] mask2former INFO: Inference done 574/1092. Dataloading: 0.0052 s/iter. Inference: 0.3640 s/iter. Eval: 0.1160 s/iter. Total: 0.4854 s/iter. ETA=0:04:11
[02/18 17:27:52] mask2former INFO: Inference done 585/1092. Dataloading: 0.0052 s/iter. Inference: 0.3637 s/iter. Eval: 0.1161 s/iter. Total: 0.4851 s/iter. ETA=0:04:05
[02/18 17:27:57] mask2former INFO: Inference done 596/1092. Dataloading: 0.0052 s/iter. Inference: 0.3638 s/iter. Eval: 0.1158 s/iter. Total: 0.4850 s/iter. ETA=0:04:00
[02/18 17:28:02] mask2former INFO: Inference done 607/1092. Dataloading: 0.0052 s/iter. Inference: 0.3634 s/iter. Eval: 0.1159 s/iter. Total: 0.4846 s/iter. ETA=0:03:55
[02/18 17:28:07] mask2former INFO: Inference done 618/1092. Dataloading: 0.0052 s/iter. Inference: 0.3633 s/iter. Eval: 0.1158 s/iter. Total: 0.4844 s/iter. ETA=0:03:49
[02/18 17:28:13] mask2former INFO: Inference done 629/1092. Dataloading: 0.0052 s/iter. Inference: 0.3630 s/iter. Eval: 0.1163 s/iter. Total: 0.4846 s/iter. ETA=0:03:44
[02/18 17:28:18] mask2former INFO: Inference done 640/1092. Dataloading: 0.0052 s/iter. Inference: 0.3632 s/iter. Eval: 0.1163 s/iter. Total: 0.4848 s/iter. ETA=0:03:39
[02/18 17:28:23] mask2former INFO: Inference done 651/1092. Dataloading: 0.0052 s/iter. Inference: 0.3632 s/iter. Eval: 0.1163 s/iter. Total: 0.4848 s/iter. ETA=0:03:33
[02/18 17:28:29] mask2former INFO: Inference done 662/1092. Dataloading: 0.0052 s/iter. Inference: 0.3632 s/iter. Eval: 0.1162 s/iter. Total: 0.4847 s/iter. ETA=0:03:28
[02/18 17:28:34] mask2former INFO: Inference done 673/1092. Dataloading: 0.0053 s/iter. Inference: 0.3628 s/iter. Eval: 0.1162 s/iter. Total: 0.4843 s/iter. ETA=0:03:22
[02/18 17:28:39] mask2former INFO: Inference done 683/1092. Dataloading: 0.0053 s/iter. Inference: 0.3629 s/iter. Eval: 0.1163 s/iter. Total: 0.4846 s/iter. ETA=0:03:18
[02/18 17:28:44] mask2former INFO: Inference done 694/1092. Dataloading: 0.0053 s/iter. Inference: 0.3630 s/iter. Eval: 0.1163 s/iter. Total: 0.4846 s/iter. ETA=0:03:12
[02/18 17:28:49] mask2former INFO: Inference done 705/1092. Dataloading: 0.0053 s/iter. Inference: 0.3627 s/iter. Eval: 0.1164 s/iter. Total: 0.4844 s/iter. ETA=0:03:07
[02/18 17:28:55] mask2former INFO: Inference done 716/1092. Dataloading: 0.0053 s/iter. Inference: 0.3626 s/iter. Eval: 0.1163 s/iter. Total: 0.4843 s/iter. ETA=0:03:02
[02/18 17:29:00] mask2former INFO: Inference done 727/1092. Dataloading: 0.0053 s/iter. Inference: 0.3627 s/iter. Eval: 0.1163 s/iter. Total: 0.4844 s/iter. ETA=0:02:56
[02/18 17:29:05] mask2former INFO: Inference done 738/1092. Dataloading: 0.0053 s/iter. Inference: 0.3628 s/iter. Eval: 0.1163 s/iter. Total: 0.4845 s/iter. ETA=0:02:51
[02/18 17:29:11] mask2former INFO: Inference done 749/1092. Dataloading: 0.0054 s/iter. Inference: 0.3628 s/iter. Eval: 0.1161 s/iter. Total: 0.4844 s/iter. ETA=0:02:46
[02/18 17:29:16] mask2former INFO: Inference done 760/1092. Dataloading: 0.0053 s/iter. Inference: 0.3626 s/iter. Eval: 0.1162 s/iter. Total: 0.4842 s/iter. ETA=0:02:40
[02/18 17:29:21] mask2former INFO: Inference done 770/1092. Dataloading: 0.0053 s/iter. Inference: 0.3627 s/iter. Eval: 0.1163 s/iter. Total: 0.4844 s/iter. ETA=0:02:35
[02/18 17:29:26] mask2former INFO: Inference done 781/1092. Dataloading: 0.0055 s/iter. Inference: 0.3626 s/iter. Eval: 0.1161 s/iter. Total: 0.4843 s/iter. ETA=0:02:30
[02/18 17:29:31] mask2former INFO: Inference done 792/1092. Dataloading: 0.0055 s/iter. Inference: 0.3624 s/iter. Eval: 0.1161 s/iter. Total: 0.4841 s/iter. ETA=0:02:25
[02/18 17:29:37] mask2former INFO: Inference done 803/1092. Dataloading: 0.0055 s/iter. Inference: 0.3625 s/iter. Eval: 0.1162 s/iter. Total: 0.4842 s/iter. ETA=0:02:19
[02/18 17:29:42] mask2former INFO: Inference done 814/1092. Dataloading: 0.0055 s/iter. Inference: 0.3626 s/iter. Eval: 0.1164 s/iter. Total: 0.4847 s/iter. ETA=0:02:14
[02/18 17:29:47] mask2former INFO: Inference done 820/1092. Dataloading: 0.0056 s/iter. Inference: 0.3639 s/iter. Eval: 0.1177 s/iter. Total: 0.4873 s/iter. ETA=0:02:12
[02/18 17:29:53] mask2former INFO: Inference done 826/1092. Dataloading: 0.0057 s/iter. Inference: 0.3655 s/iter. Eval: 0.1191 s/iter. Total: 0.4904 s/iter. ETA=0:02:10
[02/18 17:29:58] mask2former INFO: Inference done 834/1092. Dataloading: 0.0057 s/iter. Inference: 0.3660 s/iter. Eval: 0.1205 s/iter. Total: 0.4923 s/iter. ETA=0:02:07
[02/18 17:30:04] mask2former INFO: Inference done 844/1092. Dataloading: 0.0057 s/iter. Inference: 0.3659 s/iter. Eval: 0.1210 s/iter. Total: 0.4927 s/iter. ETA=0:02:02
[02/18 17:30:09] mask2former INFO: Inference done 852/1092. Dataloading: 0.0057 s/iter. Inference: 0.3664 s/iter. Eval: 0.1219 s/iter. Total: 0.4941 s/iter. ETA=0:01:58
[02/18 17:30:14] mask2former INFO: Inference done 862/1092. Dataloading: 0.0057 s/iter. Inference: 0.3667 s/iter. Eval: 0.1218 s/iter. Total: 0.4943 s/iter. ETA=0:01:53
[02/18 17:30:19] mask2former INFO: Inference done 873/1092. Dataloading: 0.0057 s/iter. Inference: 0.3665 s/iter. Eval: 0.1219 s/iter. Total: 0.4942 s/iter. ETA=0:01:48
[02/18 17:30:25] mask2former INFO: Inference done 884/1092. Dataloading: 0.0057 s/iter. Inference: 0.3665 s/iter. Eval: 0.1221 s/iter. Total: 0.4944 s/iter. ETA=0:01:42
[02/18 17:30:30] mask2former INFO: Inference done 895/1092. Dataloading: 0.0057 s/iter. Inference: 0.3664 s/iter. Eval: 0.1220 s/iter. Total: 0.4943 s/iter. ETA=0:01:37
[02/18 17:30:36] mask2former INFO: Inference done 906/1092. Dataloading: 0.0057 s/iter. Inference: 0.3665 s/iter. Eval: 0.1220 s/iter. Total: 0.4942 s/iter. ETA=0:01:31
[02/18 17:30:41] mask2former INFO: Inference done 916/1092. Dataloading: 0.0057 s/iter. Inference: 0.3667 s/iter. Eval: 0.1221 s/iter. Total: 0.4945 s/iter. ETA=0:01:27
[02/18 17:30:46] mask2former INFO: Inference done 927/1092. Dataloading: 0.0057 s/iter. Inference: 0.3665 s/iter. Eval: 0.1221 s/iter. Total: 0.4944 s/iter. ETA=0:01:21
[02/18 17:30:52] mask2former INFO: Inference done 938/1092. Dataloading: 0.0057 s/iter. Inference: 0.3666 s/iter. Eval: 0.1221 s/iter. Total: 0.4945 s/iter. ETA=0:01:16
[02/18 17:30:57] mask2former INFO: Inference done 949/1092. Dataloading: 0.0057 s/iter. Inference: 0.3665 s/iter. Eval: 0.1221 s/iter. Total: 0.4944 s/iter. ETA=0:01:10
[02/18 17:31:02] mask2former INFO: Inference done 960/1092. Dataloading: 0.0057 s/iter. Inference: 0.3665 s/iter. Eval: 0.1219 s/iter. Total: 0.4942 s/iter. ETA=0:01:05
[02/18 17:31:08] mask2former INFO: Inference done 971/1092. Dataloading: 0.0057 s/iter. Inference: 0.3663 s/iter. Eval: 0.1220 s/iter. Total: 0.4942 s/iter. ETA=0:00:59
[02/18 17:31:13] mask2former INFO: Inference done 981/1092. Dataloading: 0.0057 s/iter. Inference: 0.3664 s/iter. Eval: 0.1221 s/iter. Total: 0.4944 s/iter. ETA=0:00:54
[02/18 17:31:18] mask2former INFO: Inference done 992/1092. Dataloading: 0.0057 s/iter. Inference: 0.3666 s/iter. Eval: 0.1219 s/iter. Total: 0.4943 s/iter. ETA=0:00:49
[02/18 17:31:24] mask2former INFO: Inference done 1002/1092. Dataloading: 0.0057 s/iter. Inference: 0.3669 s/iter. Eval: 0.1221 s/iter. Total: 0.4948 s/iter. ETA=0:00:44
[02/18 17:31:29] mask2former INFO: Inference done 1012/1092. Dataloading: 0.0057 s/iter. Inference: 0.3669 s/iter. Eval: 0.1222 s/iter. Total: 0.4949 s/iter. ETA=0:00:39
[02/18 17:31:34] mask2former INFO: Inference done 1022/1092. Dataloading: 0.0057 s/iter. Inference: 0.3668 s/iter. Eval: 0.1225 s/iter. Total: 0.4951 s/iter. ETA=0:00:34
[02/18 17:31:39] mask2former INFO: Inference done 1033/1092. Dataloading: 0.0057 s/iter. Inference: 0.3668 s/iter. Eval: 0.1225 s/iter. Total: 0.4951 s/iter. ETA=0:00:29
[02/18 17:31:44] mask2former INFO: Inference done 1043/1092. Dataloading: 0.0057 s/iter. Inference: 0.3668 s/iter. Eval: 0.1226 s/iter. Total: 0.4952 s/iter. ETA=0:00:24
[02/18 17:31:50] mask2former INFO: Inference done 1054/1092. Dataloading: 0.0057 s/iter. Inference: 0.3669 s/iter. Eval: 0.1225 s/iter. Total: 0.4952 s/iter. ETA=0:00:18
[02/18 17:31:55] mask2former INFO: Inference done 1065/1092. Dataloading: 0.0057 s/iter. Inference: 0.3668 s/iter. Eval: 0.1224 s/iter. Total: 0.4950 s/iter. ETA=0:00:13
[02/18 17:32:00] mask2former INFO: Inference done 1076/1092. Dataloading: 0.0057 s/iter. Inference: 0.3666 s/iter. Eval: 0.1225 s/iter. Total: 0.4949 s/iter. ETA=0:00:07
[02/18 17:32:06] mask2former INFO: Inference done 1087/1092. Dataloading: 0.0057 s/iter. Inference: 0.3665 s/iter. Eval: 0.1226 s/iter. Total: 0.4948 s/iter. ETA=0:00:02
[02/18 17:32:51] detectron2.engine.hooks INFO: Overall training speed: 30000 iterations in 16:44:44 (2.0095 s / it)
[02/18 17:32:51] detectron2.engine.hooks INFO: Total training time: 18:27:05 (1:42:20 on hooks)
